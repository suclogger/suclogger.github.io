<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on To Mars</title><link>https://www.tomars.cv/tags/spring/</link><description>Recent content in Spring on To Mars</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 10 Aug 2016 22:19:54 +0000</lastBuildDate><atom:link href="https://www.tomars.cv/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>再看一遍SpringMVC的工作流程</title><link>https://www.tomars.cv/post/%E5%86%8D%E7%9C%8B%E4%B8%80%E9%81%8Dspringmvc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 10 Aug 2016 22:19:54 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%86%8D%E7%9C%8B%E4%B8%80%E9%81%8Dspringmvc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>&lt;img src="https://www.tomars.cv/image/74046075A2738B39AB990A21164CB8F7.png" alt="">&lt;/p>
&lt;p>high level overview 工作流程图&lt;/p>
&lt;p>初始化DispatcherServlet的过程:&lt;/p>
&lt;p>因为在web.xml文件中配置了DispatcherServlet:&lt;/p></description></item><item><title>谈谈spring中的循环依赖问题</title><link>https://www.tomars.cv/post/spring%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</link><pubDate>Tue, 19 Jul 2016 16:41:40 +0000</pubDate><guid>https://www.tomars.cv/post/spring%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>昨天听到同事谈到，代码架构的同层不应该存在相互调用，因为会出现循环依赖。
这个编码规范我是支持的，但是这个原因我是拒绝的。&lt;/p>
&lt;p>首先看一下下面这两段代码（不完整，仅用于表达意思）：&lt;/p></description></item><item><title>到底需不需要Manager层？</title><link>https://www.tomars.cv/post/%E5%88%B0%E5%BA%95%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81manager%E5%B1%82/</link><pubDate>Wed, 18 May 2016 00:09:55 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%88%B0%E5%BA%95%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81manager%E5%B1%82/</guid><description>&lt;!-- abstract -->
&lt;p>今天跟同事们一起主要就是否需要按照严格的分层架构来规范当前代码讨论了应用的几个架构问题。&lt;/p>
&lt;!-- 开始正文 -->
&lt;p>之前第一家公司采用的是经典的SpringMVC架构，主要划分为Controller，Service，DAO三层。Controller层控制页面逻辑，数据库操作通过自己编写hql在DAO层实现，事务控制在Service层。这样的架构容易理解和上手，但是无法对DAO层的代码逻辑进行控制，很容易出现以下问题：&lt;/p></description></item></channel></rss>