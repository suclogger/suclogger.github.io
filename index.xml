<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Half Bit</title><link>https://run.halfbit.top/</link><description>Recent content on Half Bit</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 08 Apr 2022 01:21:09 +0800</lastBuildDate><atom:link href="https://run.halfbit.top/index.xml" rel="self" type="application/rss+xml"/><item><title>《置身事内》</title><link>https://run.halfbit.top/post/lifer/</link><pubDate>Fri, 08 Apr 2022 01:21:09 +0800</pubDate><guid>https://run.halfbit.top/post/lifer/</guid><description>&lt;h3 id="关于这本书本身">关于这本书本身&lt;/h3>
&lt;p>这本书的阅读体验非常棒，主要有几个来源：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通俗易懂的叙述，介绍了微观/宏观的政府和经济的现象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读者的立场，作者站在跟大多数读者（包括我）的同一边，从非政策制定者的角度，探讨政治经济政策的客观影响，并倡导人文主义的政治/经济理念，读来也十分亲切。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>探究讳莫如深的官场秘事，政府事务，官员的决策，在作者的笔下亦无神秘之处。如作者文中的观点，政府和企业的边界是很模糊的。满足了读者们的好奇心，如爱读红楼梦的“宫闱秘事”的读者一样。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解释的工具。我的书架上一直摆着一本书，书名就是《解释的工具》，虽然一直没读，但是这本书也仿佛可以呼应那本书名，解释了大多数读者亲身经历的社会变革的深层原因。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这本书的作者也参加过播客节目《随机波动》，当时听了一些，对作者朴实的学者风范印象颇深，果然作品也并未让人失望。&lt;/p>
&lt;h3 id="直接的一些感想">直接的一些感想&lt;/h3>
&lt;p>个人仅仅是时代中的一粒浮萍。&lt;/p>
&lt;p>书中介绍的94年税改，是近代政府经济政策的一次重大转折。作为亲历者，尽管当时非常小，依然记得94年前，征税的执法者暴力踹开家门征税的恐怖画面。&lt;/p>
&lt;p>为响应更早的三线布局政策，西安交通大学也在同一时期从上海拆分迁移到内陆西安。在50年后我选择它成为母校，遗憾错过了一线城市的绝佳的发展机遇。&lt;/p>
&lt;p>当然也有好的，没有沿海城市的开放招商，也没有家乡的办厂发展，贫瘠的农村的小小家庭怎么培养两个大学生。&lt;/p>
&lt;p>近期的疫情政策，特别是上海出人意料的应对方式，更能印证书中的观点：民生和以人为本的缺失。&lt;/p>
&lt;p>虽然作者在书中还是乐观积极为主，但是个人不得不从个体的角度，更多的探究如何顺应政策和时代的背景，获得更大的收益。宏观经济的知识容易对个人产生虚妄的自信，结合宏观经济的理念，还原到个体的实实在在的财务管理上，才是真正的智慧。&lt;/p>
&lt;h3 id="微观和宏观的思考方式">微观和宏观的思考方式&lt;/h3>
&lt;p>虽然经济学向来有宏观和微观两个视角（案上也积灰已久），但是作者的观点和分析方式是特点鲜明的：纯粹探讨宏观经济和通行规律没有意义，必须结合实际场景（比如中国官场，政府和投资的深度结合）来分析，才更有意思，更有价值。而且在章节编排上，特意先探讨微观，再探讨宏观，是一个明显的抽象的思路。&lt;/p>
&lt;p>之前我也聊过一篇 &lt;a href="https://run.halfbit.top/post/1108-%E6%8A%BD%E8%B1%A1%E6%80%9D%E8%80%83%E8%BF%98%E5%8E%9F%E7%9C%8B%E6%B8%85%E7%9C%9F%E7%9B%B8/">抽象=思考，还原=看清真相&lt;/a> ，近期在实际做架构的过程中，也跟团队的同学们多次探讨。&lt;/p>
&lt;p>现在大多数工程做系统设计的视角，更多的还是在具体的实现方案/具体的问题上，而不是试图做抽象设计来解决更多的通用问题，更遑论 具体-抽象-具体的多轮推演。&lt;/p>
&lt;p>这本书就是一个非常棒的示范。&lt;/p></description></item><item><title>0321 消极性的缺失</title><link>https://run.halfbit.top/post/0321-%E6%B6%88%E6%9E%81%E6%80%A7%E7%9A%84%E7%BC%BA%E5%A4%B1/</link><pubDate>Mon, 21 Mar 2022 02:05:37 +0000</pubDate><guid>https://run.halfbit.top/post/0321-%E6%B6%88%E6%9E%81%E6%80%A7%E7%9A%84%E7%BC%BA%E5%A4%B1/</guid><description>&lt;p>去年写过一篇文章《无聊时间》，是受到一期播客节目的启发。无独有偶，昨天又听到一期播客，又聊到类似的话题，从而读了主播推荐的韩炳哲的《倦怠社会》，仿佛是对自己近几年状态的精确制导，近几月尤甚。&lt;/p>
&lt;p>&lt;em>有两种不同形式的能力。积极的能力是去做某事。与之相反，消极的能力是不去做某事，按照尼采的说法，是说“不”的能力。这种消极的能力有别于单纯的无能，即没有能力做某事。无能仅仅是积极能力的反面。它本身也是积极的，由于它和某件事物联结在一起，即它无法完成某事。消极的能力则超越了这种束缚于某件事物的积极性。它是一种不去做某事的能力。如果一个人缺少了消极的能力，那种不去感受某物的能力，而只有积极的能力，即感受的能力，那么感官将无助地面对汹涌而至、不由自主的刺激和冲动。&lt;/em>&lt;/p>
&lt;p>不知道从何时开始，甚至是从大学刚毕业开始，自己就在一条“积极”的道路上。不管是上海，还是杭州，这两座城市被资本赋予的意义甚嚣尘上，个人总在不经意间被裹挟。自主的积极性成为了企业催眠员工的手段，进而渐渐渗透进个人潜意识，导致了个人主体性的消失。&lt;/p>
&lt;p>&lt;em>现代晚期的功绩主体不屈服于任何人。事实上，他已经不再是一个主体，因为主体的根本属性即是屈从（subject to）。他把自我积极化，解放自我，使其成为一个建设项目。从主体转化为项目却没有消除束缚。曾经来自他者的约束如今变为自我约束，后者却伪装成自由。这一发展变化同资本主义生产关系存在密切关联。当生产力达到一定程度时，自我剥削比他者剥削更有效率，功能更加强大，因为自我剥削伴随着一种自由的感觉。功绩社会是自我剥削的社会。功绩主体不断剥削自我，直至精力枯竭。他发展出一种自我攻击，并往往以自我毁灭为终结。建构自我的项目（Projekt）如同一枚子弹（Projektil），功绩主体开枪瞄准自身。&lt;/em>&lt;/p>
&lt;p>在警惕自我攻击的倾向同时，怎么区别有意义的个人价值的实现，以及无意义的过度倦怠呢？&lt;/p>
&lt;p>&lt;em>&lt;strong>一味的忙碌不会产生新事物。它只会重复或加速业已存在的事物。&lt;/strong>&lt;/em>&lt;/p>
&lt;p>我想答案可能是：决策。有消极意义的决策，不是做什么，而是选择不做什么。&lt;/p>
&lt;p>从去年到今年，在工作中让我最痛苦的两件事，都源于对自我不认可的事情的承诺。除了有讨好型人格倾向以及对自己发展危机的恐惧，更多的是决策的缺失，消极性决策的缺失。&lt;/p>
&lt;p>我们很容易总结我们做了什么，却不容易总结我们没做什么。原本不应该做的，却强行占有了过多的精力，消耗了信任，消解了更多本该有意义的时间和思考。&lt;/p>
&lt;p>&lt;em>当他表面看来无所作为时最为活跃，当他独自一人时最不孤独。&lt;/em>&lt;/p>
&lt;p>附图 《有熊谷守一在的地方》&lt;/p>
&lt;p>希望未来也能拥有这独一份心境&lt;/p></description></item><item><title>0315 心力</title><link>https://run.halfbit.top/post/0315-%E5%BF%83%E5%8A%9B/</link><pubDate>Wed, 16 Mar 2022 00:07:37 +0000</pubDate><guid>https://run.halfbit.top/post/0315-%E5%BF%83%E5%8A%9B/</guid><description>&lt;p>穆阿迪布之所以能做到英勇无畏，也许是因为他从一开始就知道结局，一步也不离开他预见到的路径。这一点，他说得非常清楚。“我的行为就是验证我的预言，事实将证明，我是神明的终极仆从。”这样一来，一切力量都将为他所用，他的朋友和敌人都崇拜他。&lt;/p>
&lt;ul>
&lt;li>《沙丘2 沙丘救世主》&lt;/li>
&lt;/ul>
&lt;p>《问题》：事情开始的时候，我们能否预判到过程的风险，能否预判谁未来适合在什么岗位发展。如果与预判不符合，过程中需要额外采取什么样的手段来控制风险。&lt;/p>
&lt;p>这些问题最近一直萦绕着我，最近答案渐渐浮现，问题就在于心力的锤炼。&lt;/p>
&lt;p>以前在阿里的时候，每年做大促PM，往往预示着一个人第二年得到提名晋升的机会。还有阿里文化一直倡导的脑力、心力、体力，缺一不可。这些现象，直到最近，才慢慢对自己产生意义。&lt;/p>
&lt;p>大促是一年中最重要，最复杂的任务，完成它所需要的预判能力和应对能力要求很高。那怎么得到所谓的预判能力和应对能力，离不开脑力，心力，体力。足够的脑力为了快速理解问题，拆解复杂度，给出应对方案。心力为了时时跟进千头万绪的遗留问题，确保事事有着落。体力则是一切的根本。&lt;/p>
&lt;p>有一句老话说： To lead is to anticipate 。&lt;/p>
&lt;p>为什么公司中，需要有业务架构师，有业务TL，因为他们可以基于自己的经验，预判业务的发展，预判有价值（ROI高）的方向投入资源，因为他们的预判能带来最大的价值。&lt;/p>
&lt;p>在 NG / Junior / Pre-Senior 的阶段，往往从大头兵心态提供体力和堪堪的脑力，逐步能够完成工作/复杂工作/高效地完成复杂工作。到了 Senior 之后，对心力的要求是最高的。到这个阶段的切换过程是令人痛苦的，不仅要完成部分 Senior 应当承担的具体工作，还需要跟进事情，及时调整，预判方向，引领他人。&lt;/p>
&lt;p>别忘了，除了工作，还有生活。&lt;/p>
&lt;p>如果工作忙碌的档口，老师电话来，小孩在学校发烧了/把别的小孩揍了，还能否有足够的心力，继续兼顾工作/生活？&lt;/p>
&lt;p>心力是宝贵的资源，在不能准确预判的时候，投入足够的心力是可以把事情做好的。心力不够了，体力就会大受其累，疲于奔命。&lt;/p>
&lt;p>感谢 Guangzhao，Momoka 最近提供的情绪价值，如果没有，自己很难熬过这段时间。总是感慨，身边的人都很强很厉害，是阿里出来的佼佼者，不仅脑力出众，心力和沟通能力都非常棒，自己也看到不少差距。好在看到差距意味着有努力和成长的方向，如果自己再选一次，依然会做这个选择，那就无憾。&lt;/p></description></item><item><title>0103 变、30 / 8</title><link>https://run.halfbit.top/post/0103-%E5%8F%9830-8/</link><pubDate>Mon, 03 Jan 2022 03:52:37 +0000</pubDate><guid>https://run.halfbit.top/post/0103-%E5%8F%9830-8/</guid><description>&lt;p>上一篇文章标题多少沾到点公司的流量，意外导致粉丝数量翻番，从12 -&amp;gt; 30，多了很多陌生人，写内容就多了很多顾虑，首先是害羞作祟担心自己写的很内心的一些话被别人看到，其次是担心后续写的内容的质量满足不了新关注的人的期望，如果取关了我可能会比较难受。不过迟早是要发的，要取关的迟早也会取关的，还是保持初心吧，这里主要还是写给自己看的自留地。&lt;/p>
&lt;p>本来计划在2020的12月31号写的，捱到了今天，总之要总结下2021，展望下2022. 按理说在农历年写更好，但是这几天刚好有空，想了比较多，就提前按阳历来吧。&lt;/p>
&lt;p>2021是巨变的一年，万幸大都比较顺利。1月 SHABAO 上岸，3月绩效 375 公布，5月家里打官司胜诉，8月晋升通过，10月换了工作。&lt;/p>
&lt;p>进入 30 / 8 ，年纪的第 30 岁，工作的第 8 年。年纪总是自己想要避讳的一点，总觉得自己走了很多弯路，虚度了很多年光阴，年纪大了随之而来的压力，即将下滑的职场竞争力，随之而来的就是焦虑。想了些办法处理自己的焦虑，效果不佳。很像这几年的新冠，人终归要学会与之共处。&lt;/p>
&lt;p>生活上出门的时间少了很多，多了很多独处和思考的时间。陪伴家人的时间略微多了一些，爸妈都来杭州住了几天，体检，SHABAO 妈妈也来了几天。但是对家人们的关注还是不够，一些事情没有处理好。&lt;/p>
&lt;p>还有其他。看了 30 多本书，还不错。财务上投资亏损很多，需要痛定思痛。&lt;/p>
&lt;p>写好了明年的OKR，灵感主要来源于前几天跟老板聊天，以及这几天读书，和看到他人的的一些年度总结。&lt;/p>
&lt;p>给自己画了3个大O，每个KR 下都具体拆分了多项，每个季度回顾和总结下。&lt;/p>
&lt;ul>
&lt;li>O: 个人：优雅、爱
&lt;ul>
&lt;li>KR1: 有信仰和坚持，经历，体验更多，有广度和深度，勇气&lt;/li>
&lt;li>KR2: 爱，陪伴家人&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>O: 工作：优秀IC &amp;amp; 初级LD，2021 S2 绩效 &amp;gt;= m+
&lt;ul>
&lt;li>KR1: 个人技术深度 #架构专题&lt;/li>
&lt;li>KR2: 招聘，领导，管理4+团队成员 #领导力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>O: #FIRE ：个人收入占比不低于10%来源非工资收入
&lt;ul>
&lt;li>KR1: 美股投资波段操作，每周至少两次交易 0/108&lt;/li>
&lt;li>KR2: 投资观的构筑&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>每个 O 都可以展开写几篇感想，作为挖的坑吧，后面再慢慢补。&lt;/p>
&lt;p>2022 年的关键字，我希望是 #勇气 ，如附图的真嗣君一样。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020125721.png" alt="">&lt;/p></description></item><item><title>1228 在字节用 Go 写业务代码的意义</title><link>https://run.halfbit.top/post/1228-%E5%9C%A8%E5%AD%97%E8%8A%82%E7%94%A8-go-%E5%86%99%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E7%9A%84%E6%84%8F%E4%B9%89/</link><pubDate>Tue, 28 Dec 2021 02:26:37 +0000</pubDate><guid>https://run.halfbit.top/post/1228-%E5%9C%A8%E5%AD%97%E8%8A%82%E7%94%A8-go-%E5%86%99%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E7%9A%84%E6%84%8F%E4%B9%89/</guid><description>&lt;p>又是被 Go 语言血虐的一天。&lt;/p>
&lt;p>本来一天能写完的代码，硬生生非常专注的写了一天，只完成了预期进度的 20%不到。&lt;/p>
&lt;p>下班在路边等车的时候，仔细思考了下，为什么我需要要用有限状态机去管理业务动线，状态机的好处究竟是什么？又联想起之前做的leetcode 1839：longest-substring-of-all-vowels-in-order ，隐约找到了有限状态机设计的哲学。&lt;/p>
&lt;p>想起以前在阿里的时候，这种事情三下五除二早就用 Java 写完几十遍了，为什么到了字节，我要开始仔细思考设计呢？固然和我不同阶段关注的点不一样，但是我能感觉到，在力排众议选择 Go 作为业务团队的项目研发语言，字节在造有史以来最大的一个轮子。&lt;/p>
&lt;p>习惯了 Java 生态后，用 Go 的痛苦无处不在，时刻提醒着你，为什么没有依赖注入，为什么没有 Bean 管理，单例什么时候创建和回收，实现一个基于容器生命周期的注册简直天方夜谭，为什么没有继承，隐晦的接口实现，平铺的包结构，一页代码有半页的 *if err != nil *。&lt;/p>
&lt;p>吹个 Go 的拥趸们常挂在嘴边的彩虹屁，就是 Go 语言崇尚简单，所以啥都没有，说白点，就是刀耕火种，在 Java 生态中已经烂大街的编程范式，在 Go 里面就要重新实现，重新造轮子。&lt;/p>
&lt;p>为什么字节要选择 Go 语言呢？&lt;/p>
&lt;p>当然我不相信这是一个业务团队的领导者们经过切实调研后精心设计的选择，毕竟作出决定的 3-1，3-2，4-1 们，早已经脱离一线编码了，前两段说的痛苦，他们不可能可以切身体会。&lt;/p>
&lt;p>我更倾向于另一个答案：政治正确。&lt;/p>
&lt;p>在字节为什么选 Go 是政治正确呢？因为字节是工程师文化，要在传统 BAT 巨头下引领技术浪潮，Go 是其他巨头都没有采纳的方案，选择 Go，意味着在这一生态下，字节有绝对的话语权，在这一个生态下，有非常多的轮子可以造。&lt;/p>
&lt;p>那造轮子有什么好处呢？&lt;/p>
&lt;p>造轮子直接的好处是可以逼迫你思考，间接的好处是可以帮助你学习。&lt;/p>
&lt;p>回想下之前那篇 &lt;a href="https://run.halfbit.top/">1222 不内卷的文化怎么来？&lt;/a>，轮子在 Go 生态下，会沿着 Justifiability 这条纵轴从下到上构建出来。先是最基础的 SOA 框架（基于thrift的kitex）、MQ（暂时还没有）、Consul（偏不要zk）等，而且现在连这些都谈不上好用，相信后续会有更多的想阿里内部一样丰富的中间件和技术产品涌现出来。&lt;/p>
&lt;p>我一直认为作为工程的同学，在技术上，要做到无畏，没啥技术是有多难掌握不了的，只要架构设计合理，落地是不成问题的，然后这两天就感觉自己被啪啪打脸，在技术落地的成本上，切换生态后，确实需要重新校准。&lt;/p>
&lt;p>虽然有点难受，不过我真的觉得这是挺好的机会。可以从头思考一些之前习以为常的设计，离开了 Java 和阿里这个长年致力于让业务工程同学越来越不会写代码的生态，重新享受钻研编码的乐趣。&lt;/p>
&lt;p>也算是痛并快乐着了。&lt;/p></description></item><item><title>1227 《牛奶可乐经济学》</title><link>https://run.halfbit.top/post/1227-%E7%89%9B%E5%A5%B6%E5%8F%AF%E4%B9%90%E7%BB%8F%E6%B5%8E%E5%AD%A6/</link><pubDate>Mon, 27 Dec 2021 00:06:37 +0000</pubDate><guid>https://run.halfbit.top/post/1227-%E7%89%9B%E5%A5%B6%E5%8F%AF%E4%B9%90%E7%BB%8F%E6%B5%8E%E5%AD%A6/</guid><description>&lt;p>一本不错的经济学科普读物，我想给这本书打个高分。&lt;/p>
&lt;p>虽然书中有很多解释经不起推敲或者解释有点牵强，但是我觉得作者的立意和背后传达的思考习惯非常有启发意义。&lt;/p>
&lt;ul>
&lt;li>作者是为了推翻经济学给人的古板和充满公式、定义、数学公式的晦涩难懂的印象，从身边有趣的小事来捕捉经济学的踪迹。&lt;/li>
&lt;li>从身边的小事，多多思考，会发现背后有意思的原因。&lt;/li>
&lt;/ul>
&lt;p>我最近在听吴军的数学通识，里面也反复强调，学习数学，重要的是对数据规律的理解，经历从公理到定理到设计一系列路径的理解，不仅掌握字面上的数学知识，更能掌握体系化的数学思考方式。&lt;/p>
&lt;p>这本书仿佛也有异曲同工之妙。&lt;/p>
&lt;p>经济学理论，无非也是来源于人类的真实生活，从最早的古典经济学对理性人的表述，到行为经济学对人的心理学的探寻，理解从生活到理论的发展，才是不仅掌握理论知识，更学习思考方式的好方法。&lt;/p>
&lt;p>最有意思的一点，是书中对内卷现象的经济学论述，大致表述为，如何避免 &amp;ldquo;race to the bottom&amp;rdquo; ，可以理解为是内卷 &amp;ldquo;involution&amp;rdquo; 的另一种大白话表述。从供需和所有权的理论出发考虑，所有人都被 “内卷” 裹挟后，结局就是对谁都没有好处的“竞次”。之前网上刚好有个无厘头的段子，讲的是葵花宝典流传到江湖后，所有人为了更厉害都去练，就导致了所有人都自宫了，但是都依然分不出高下，所以武林上就达成默契，练这门功夫人人得而诛之。“个人动机与集体动机不符，所以国家要对行为加以管制。” 所以美国的法律认定雇主允许员工自愿加班而不支付加班工资属于非法行为。&lt;/p>
&lt;p>所以这本书真的有意思的点在于启发我们观察和思考身边的社会现象，背后蕴含的经济学原理，对从事的电商零售行业的同学想必更有启发。&lt;/p></description></item><item><title>1221 滞后效应</title><link>https://run.halfbit.top/post/1221-%E6%BB%9E%E5%90%8E%E6%95%88%E5%BA%94/</link><pubDate>Tue, 21 Dec 2021 01:53:37 +0000</pubDate><guid>https://run.halfbit.top/post/1221-%E6%BB%9E%E5%90%8E%E6%95%88%E5%BA%94/</guid><description>&lt;p>过去一周偷懒了没写，想写的内容其实挺多的，抽个感触比较深的聊一聊。&lt;/p>
&lt;p>上上周的负能量有点太多了，归根结底还是自己不够耐心。想来选择去字节，选择离开舒适区，决定的出发点不就是让自己不舒适吗？&lt;/p>
&lt;p>仿佛那天SHABAO问我的，让你再选一次，你还会选字节吗？&lt;/p>
&lt;p>我肯定还会选字节。&lt;/p>
&lt;p>选了字节后，这些痛苦和不舒适不就应该是自己所预见的吗？觉得痛苦就逃避，埋怨是外部原因导致的，岂不是自欺欺人。&lt;/p>
&lt;p>刚好周末听吴军的数学通识，谈到积分的滞后效应：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>凡是需要通过积分获得的数量，它的结果会滞后于瞬间变化，有时还要经过相当长的时间滞后才能看到。&lt;/li>
&lt;li>这种由积分获得的数量，一旦大到被大家都观察到之后，要逆转这个趋势是非常难的。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020122270.png" alt="">&lt;/p>
&lt;p>刚开始努力，就想看到成效，得到他人的认可是不切实际的。&lt;/p>
&lt;p>上周五约之前的同事吃饭也聊到：有的时候得等。&lt;/p>
&lt;p>后半周自己的心态已经逐渐释然了，作为供应链的新人，如果产出的设计方案能得到在供应链多年经验认可的同事的认同，就已经是一件很了不起的事情了，不要看客观的知识量的差异，多关注过程中自己思考理解能力，交流沟通技巧和架构能力的锻炼。&lt;/p>
&lt;p>还发现了，家务给我带来的治愈效果非常惊人。&lt;/p>
&lt;p>周六下午的时候，就开始打扫卫生，洗衣服，更换被褥，晒晒太阳。确定性的事情带来确定性的好转，就算是微小的环境的改变，也可以让自己开心很多。&lt;/p>
&lt;p>边做家务边想起来电影《类人猿行动》里面的一个桥段，男主安抚行动前过于紧张的同伴，是让同伴将弹夹的子弹全数推出又一枚一枚推入，这样重复的简单动作，聚焦在细节上，就可以抚慰情绪。真是异曲同工。&lt;/p></description></item><item><title>1212 拥抱WEB 3.0</title><link>https://run.halfbit.top/post/1212-%E6%8B%A5%E6%8A%B1web-3.0/</link><pubDate>Sun, 12 Dec 2021 23:39:37 +0000</pubDate><guid>https://run.halfbit.top/post/1212-%E6%8B%A5%E6%8A%B1web-3.0/</guid><description>&lt;p>本来今晚想写个严肃点的话题，聊一聊这两天读的架构书的一些思考，但是觉得上一篇刚比较沉重，这篇不如轻松点，聊下最近接触的好玩的 Web 3.o的一些内容。&lt;/p>
&lt;p>周五晚上听到一个 Twitter Space 的分享，谈到 Web 3.0 的趋势，聊到了人类社会到目前已经被验证成功的商业模式，在 Web 3.0 下都会有全新的形式：&lt;/p>
&lt;ul>
&lt;li>电商&lt;/li>
&lt;li>游戏&lt;/li>
&lt;li>广告&lt;/li>
&lt;li>增值服务&lt;/li>
&lt;/ul>
&lt;p>这个想法真的非常有意思，想象空间也非常大。&lt;/p>
&lt;p>现在Meta（FaceBoook），Bytedance ，都在元宇宙抓紧布局，想要把握 Web 3.0 在游戏的突破，但是结局会怎样呢？推荐大家都去读一篇长文《雪崩才是元宇宙的必然》：&lt;/p>
&lt;ul>
&lt;li>如果一定要挑出现阶段“元宇宙”技术蓝图最大的逻辑问题，那么显而易见——真正的“元宇宙”，根本就不该让Faceook这种寡头来创造。和崩溃边缘的糟糕现实相比，流光溢彩的虚拟世界才是躲避一切苦难的归宿；至于这片乐土的创造者，则是一群偏执到近乎鲁莽、相比于盈利更重视内容素质的怪胎，再加上无数认同这些怪胎的Geek。*&lt;/li>
&lt;/ul>
&lt;p>Web 2.0 时代的巨头们，注定在3.0时代是被抛弃的，Web 3.0 是真正属于每一个参与者的，去中心化的。再补充一个视频，讲的深得我心。&lt;/p>
&lt;p>&lt;em>本来想直接传上来的，但是一直在审核，想看的直接搜：美国国会举行听证会，加密公司高管阐释Web3.0&lt;/em>
这恰恰是本篇文章最想嘲讽Web 2.0 的地方啊哈哈，送上门的案例。
内容都是把控在中心化的巨头公司，写了也不是你的，想说也得别人同意。&lt;/p>
&lt;p>前面讲了一通，这周主要玩的是：&lt;/p>
&lt;ul>
&lt;li>买了十年的 ens 域名（ &lt;em>runbao.eth&lt;/em> ），未来 ens 就是你在元宇宙的全局 ID，再也不用记一长串的地址编码了。&lt;/li>
&lt;li>基于这个域名，开通了一个去中心化的博客（又），地址是: &lt;a href="https://mirror.xyz/runbao.eth">https://mirror.xyz/runbao.eth&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>然后就是一些投资什么的，这里就不讲了。&lt;/p>
&lt;p>总之，Web 3.0 精髓就是参与。去中心化的产品，可能通过各种形式来奖励参与者，但是自己投身进去体验，去感受，踩在新一代技术潮流的浪花上玩一下，才是程序员最开心的时候呀。&lt;/p>
&lt;p>祝大家下周搬砖愉快～&lt;/p></description></item><item><title>1210 闲谈</title><link>https://run.halfbit.top/post/1210-%E9%97%B2%E8%B0%88/</link><pubDate>Fri, 10 Dec 2021 23:29:37 +0000</pubDate><guid>https://run.halfbit.top/post/1210-%E9%97%B2%E8%B0%88/</guid><description>&lt;p>昨晚看到有人描述加入字节整个过程的感受，是从期待到失落再到回归，对我这个一个多月来的心态总结的太好了，不由得让人想起达克效应，感慨这个曲线之普适。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020121592.png" alt="">&lt;/p>
&lt;p>还记得入职第一周，深夜在公司读一鸣早期的内部信，在那种赤忱的激情的感召下，对字节的期待达到了最巅峰。&lt;/p>
&lt;p>然而随之而来的，就是对期待的消磨。对于业务的不适应，团队内部分工的差异，团队间边界的撕扯，项目迟迟无法排上日程，漫长的项目准备，一个月之后，依然还在被 TL 挑战架构图的 UML 用语是否规范，一行项目的代码都还没开始写，开始怀疑自己做的事情在整个大团队内的意义，开始怀疑自己在字节创造价值能力，甚至想着离开现有团队，回归到熟悉的仓团队。&lt;/p>
&lt;p>然后渐渐的，开始回想起去年、前年的自己。一样的愤懑，一样的不满，甚至在技术文档被挑战n次后，依然没有领悟到在技术团队一个P7应该考虑的是什么。&lt;/p>
&lt;p>今天渐渐给自己做好心理按摩了，想再提醒自己两个点：&lt;/p>
&lt;ul>
&lt;li>善于利用自己的老板&lt;/li>
&lt;li>追求极致&lt;/li>
&lt;/ul>
&lt;p>第一点还是菜鸟的同事去年提醒我的，如今依然犯了这个错误，上两周这么难，项目一直没办法推进，自己也暗示老板很多次，但是就是没有主动PUSH老板帮我去PUSH别人。这点要引以为戒，不要再让自己难受。&lt;/p>
&lt;p>这个项目当然可以按最简单的满足业务最小需求集的方式来落地，但是随着前面周期的拉长，我已经有了更充裕的时间，可以把方案设计的更好，更可以支持未来一段时间的需求了，虽然目前用不上，为什么不设计好一点呢？在满足业务需求之外，技术亮点，数据分析有没有一起考虑呢？这是自己处在焦躁状态下，一直没有好好沉下心去思考的。&lt;/p>
&lt;p>如今，也更能理解在当前团队的做事风格了，永远没有什么很急的事情。就算有很急的事情，也不是仓促做完就有价值的。多多思考，找到自己成长和可以发挥的空间，才是正解。&lt;/p></description></item><item><title>1207 向内看</title><link>https://run.halfbit.top/post/1207-%E5%90%91%E5%86%85%E7%9C%8B/</link><pubDate>Wed, 08 Dec 2021 00:44:37 +0000</pubDate><guid>https://run.halfbit.top/post/1207-%E5%90%91%E5%86%85%E7%9C%8B/</guid><description>&lt;p>昨晚写代码到很晚，还是没有办法抵御深入技术细节的诱惑，立一个Flag，这个月要读完 Writing An Interpreter In Go ，完成 Toby Interpreter 的代码。&lt;/p>
&lt;p>今天跟同事闲聊，说到不要在意手上做什么，需要看重对于自己能力的提升。&lt;/p>
&lt;p>做了这个事情之后，自己架构的提升是什么？&lt;/p>
&lt;p>设计的架构完美了吗？&lt;/p>
&lt;p>架构设计的基准是什么？&lt;/p>
&lt;p>就像学会了用Go写一个解释器，对自己的提升是非常有限的，最多只能变成自己的一个兴趣爱好。&lt;/p>
&lt;p>追求更难的东西，为什么自己就懒得去想呢？&lt;/p>
&lt;p>总觉得焦虑，想做具体的事情，当前的事情，自己做到极致了吗？&lt;/p>
&lt;p>做架构设计的时候，有没有从这几个架构方向去深度思考：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>业务架构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据架构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应用架构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>技术架构&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>架构的语言对吗？&lt;/p>
&lt;p>再立一个Flag，下一个双月的目标是完成&lt;/p>
&lt;ul>
&lt;li>TOGAF&lt;/li>
&lt;li>UML&lt;/li>
&lt;/ul>
&lt;p>另外，729声工场制作的三体广播剧，真是太精彩了，作为原著爱好者都被深深感染，推荐大家都去听。&lt;/p></description></item><item><title>1206 信息论，认知论，方法论</title><link>https://run.halfbit.top/post/1206-%E4%BF%A1%E6%81%AF%E8%AE%BA%E8%AE%A4%E7%9F%A5%E8%AE%BA%E6%96%B9%E6%B3%95%E8%AE%BA/</link><pubDate>Mon, 06 Dec 2021 13:50:37 +0000</pubDate><guid>https://run.halfbit.top/post/1206-%E4%BF%A1%E6%81%AF%E8%AE%BA%E8%AE%A4%E7%9F%A5%E8%AE%BA%E6%96%B9%E6%B3%95%E8%AE%BA/</guid><description>&lt;p>周六听了几节吴军的得到课程《信息论》有点意思，本来他的另一门课程《数学导论》也想听，但是同事的推荐，就先开始听信息论。&lt;/p>
&lt;p>深入分析下我这个决定其实还挺有意思的：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>探索的价值，最近读了一本《算法之美》，谈的是实际生活中的最优博弈的。对一台从未使用过的老虎，以及一台赢9输6的老虎机来说，哪台更有吸引力，通过一些数学和算法的研究证明，从未使用过的老虎机是更有吸引力的，因为已经听了《数学导论》 的部分章节，调整了期望后，觉得未知的《信息论》可能更有吸引力。对于这个下意识的决定虽然也是受人类喜新厌旧的天性影响的，但还是挺符合利益最大化的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>信息对称，我已经第二次提到这个词了，最近对这个概念还是感触很深。对同样的作者，同样发布在得到上的课程，哪一门课更值得学呢？对于我来说是单次博弈，但是被朋友推荐后，对于我的吸引力显著提升，这就是我和朋友在一定的认知共同层面上形成了重复博弈。对于课程质量，在重复博弈下显然可以得到更大程度的保障。关于信息对称，还想多聊一句，最近招人的时候，跟hr沟通，hr说可以把自己需要跟进的候选人先发给hr看下，hr基于过往的面试评价给出是否推荐重点跟进的建议，这个也是基于对同一个候选人的重复博弈。所以信息对称这一点在日常生活中扮演着非常重要的角色。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>OK上面讲了很多选择过程的一些认知和方法论的点，下面讲讲初步听了《信息论》之后的一些感悟。&lt;/p>
&lt;p>一个很重要的概念：信息熵，一个很重要的推演：提出问题比解决问题更重要。&lt;/p>
&lt;p>大意一个信息包含的信息量，与获得这个信息量需要付出的努力是相关的。100瓶毒药里面，哪一瓶是有毒的，跟100瓶毒药都有毒，这两个信息包含的信息量是不同，吴军也给出了信息量的计算公式。&lt;/p>
&lt;p>在对信息量的多少，信息量传递的效率的大体感知后，吴军还提出了相关的认知论和方法论的模型。&lt;/p>
&lt;p>提出问题比解决问题更重要，因为提出问题包含了更多的信息量。举的一个例子就是发现宇宙大爆炸理论的背景辐射的论文，虽然只有短短两页，但是包含的信息量却是巨大的。&lt;/p>
&lt;p>这点也是我上周在思考的一个问题，为什么老板们对我们的技术方案的反馈，往往给我们带来非常大的启发，就像上周我做的技术方案，老板挑战我的5W1H，就一下把我问清醒了。很多时候我们做事，过于关注对一个已有问题的回答，比如技术方案的细节，怎么解决业务上的问题。但是我们却过于忽视了对没有提出的问题的回答。比如业务为什么要做这个事情（5W），只有多问问题，我们的思考才是更有价值的（包含更多信息量的）。&lt;/p>
&lt;p>所以信息论在指导我们的思考和工作过程意义是很大的，在稻盛和夫的《活法》这本书里面也提到了，每个人的成就是天分*认知*勤奋，认知在对成就的影响，也是乘法级别的。&lt;/p>
&lt;p>在具体的方案论上，目前看，5W1H是一个很好的工具，后面再听听吴军怎么说。&lt;/p>
&lt;hr>
&lt;p>附图信息论鼻祖香农&lt;/p></description></item><item><title>1201 机器学习的自然美感</title><link>https://run.halfbit.top/post/1201-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E7%84%B6%E7%BE%8E%E6%84%9F/</link><pubDate>Wed, 01 Dec 2021 01:07:37 +0000</pubDate><guid>https://run.halfbit.top/post/1201-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E7%84%B6%E7%BE%8E%E6%84%9F/</guid><description>&lt;p>这篇文章源于读了《深度学习入门-基于Python的理论与实现》这本书。之所以读这本书，是因为今年给自己定下来的目标：技术视角广度的延伸之一是机器学习命题。为什么定这个目标呢，直接源于两个主要的影响。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>早几个月逛一亩三分地，看到地里讨论的目前硅谷程序员的技术栈，后端（Server Side）基本是标配ML（机器学习/深度学习）的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在推上关注的一个独立开发者（ServerCat的作者），本职是个iOS客户端开发，却成功通过在产品中集成机器学习的能力，做出了非常优秀的作品：熊猫吃短信-基于文本特征的垃圾短信过滤 &amp;amp; DAMA-基于深度学习自动打码图片敏感信息&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这两点给我带来非常大的触动，让我感受到机器学习的巨大威力和社区印象力。&lt;/p>
&lt;p>其实早在2017年，我就试图入门过机器学习，当时还在jizhi社区（jizhi.im）上购买了相关的课程：&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020119313.png" alt="">&lt;/p>
&lt;p>当时我还在公司组织大家一起学习，做了一个王者荣耀手游英雄的简易分类器：&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020120506.png" alt="">&lt;/p>
&lt;p>为什么最终还是没持续学习呢？&lt;/p>
&lt;p>我觉得最主要的原因，就是一直没有合适的教材，当年的机器学习的学习资料，充斥着非常复杂的推导公式和数据理论，实在是令人望而却步。&lt;/p>
&lt;p>《深度学习入门》这本书，说来也是一个契机，恰好也是上面提到的那位iOS开发同学推荐的。11月13日EDG决赛夺冠那天，约了好友一起观赛，带着在地铁上打发时间用的，没想到读了一部分后就被吸引了。&lt;/p>
&lt;p>这本书没有那么多的公式，推导更多是直观的，感性的，显然作者不是为了追求或严谨或高深的对一门技术的显摆，而是娓娓道来，恨不得再浅显易懂一些。&lt;/p>
&lt;blockquote>
&lt;p>根据深度学习的可视化相关的研究，随着层次加深，提取的信息（正确地讲，是反映强烈的神经元）也越来越抽象。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020120305.png" alt="">&lt;/p>
&lt;p>如果堆叠了多层卷积层，则随着层次加深，提取的信息 也愈加复杂、抽象，这是深度学习中很有意思的一个地方。最开始的层对简 单的边缘有响应，接下来的层对纹理有响应，再后面的层对更加复杂的物体 部件有响应。也就是说，随着层次加深，神经元从简单的形状向“高级”信息 变化。换句话说，就像我们理解东西的“含义”一样，响应的对象在逐渐变化。&lt;/p>
&lt;/blockquote>
&lt;p>这里的描述彻底打动了我，尽管机器学习的理论非常复杂，数学求证非常晦涩，但是它现在呈现出的形态是多么自然，多么符合直觉。&lt;/p>
&lt;p>想起来摆在案头的吴军的《数学之美》，还有同样读了到开头的《素数之恋》，他们都想传达出来的，都是一种纯粹和自然的美感，这些恐怕都是饱经应试教育洗礼的我，迟迟无法体会到的。&lt;/p>
&lt;p>相见恨晚，为时未晚，得把上面两本书再放进阅读日程了。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020120826.png" alt="">&lt;/p></description></item><item><title>1126 无聊时间</title><link>https://run.halfbit.top/post/1126-%E6%97%A0%E8%81%8A%E6%97%B6%E9%97%B4/</link><pubDate>Fri, 26 Nov 2021 14:49:37 +0000</pubDate><guid>https://run.halfbit.top/post/1126-%E6%97%A0%E8%81%8A%E6%97%B6%E9%97%B4/</guid><description>&lt;p>两周前记录了对招聘的一些想法 ：「招聘」这件事的思考 。里面有提到，招聘沟通导致精力分散，工作时间碎片化。&lt;/p>
&lt;p>这周的想法更进一步，主要是受到了昨晚听的一个播客【无聊是内心的一方净土-超智游戏】的启发。&lt;/p>
&lt;p>最近的招聘，频繁的发出邀约，跟进候选人，对自己来说是一个过度刺激。平时喝个水，如个厕，都要掏出手机，看看有没有需要关注的内容。在排队吃饭的时候，明明知道刚刚已经刚看过脉脉，还是会无意识的再打开，期待着一个红点，一个数字。&lt;/p>
&lt;p>就像播客中举的例子，聊到一个人的观察，出租车司机在等红灯的间隙，也要刷下抖音，那个人在说为什么不利用这个时间做个冥想或者正念呢？&lt;/p>
&lt;p>虽然这个例子举的不好，也不阳春白雪，但是他描述了一个现象。&lt;/p>
&lt;p>我作为一个研发工程师，在工作间隙，为什么不做个正念，思考下工作，反而要投入很多精力，去过度寻求社交，连接的刺激呢。当然，人与人的连接是非常必要的，也是不可或缺的，但是健康的刺激力度是多少呢，我们要谨慎的思考这个问题。&lt;/p>
&lt;p>昨天晚上，特地早半个小时下班，坐上地铁，从地铁站步行20分钟到家，路上就听着一个聊电影的播客节目，我发现很享受这个过程。前天上午早的早了，在阳台上裹着羽绒读沙丘，边读边小憩了一会，醒来去上班，我也很享受这个过程。&lt;/p>
&lt;p>最近一直在用内推系统，脉脉，boss直聘填充碎片时间让自己承受了过多的刺激了。&lt;/p>
&lt;p>所以我Mute了脉脉，boss，飞书的所有通知，电脑上关闭了微信，让自己可以专注的做事，早点下班，享受一点无聊的时间，希望可以让自己更幸福一点。&lt;/p></description></item><item><title>27/15 沙丘之子</title><link>https://run.halfbit.top/post/27-15-%E6%B2%99%E4%B8%98%E4%B9%8B%E5%AD%90/</link><pubDate>Thu, 25 Nov 2021 20:03:37 +0000</pubDate><guid>https://run.halfbit.top/post/27-15-%E6%B2%99%E4%B8%98%E4%B9%8B%E5%AD%90/</guid><description>&lt;p>今年的目标是读15本书，这是完成的有记录的第27本。&lt;/p>
&lt;p>本来觉得读的非编程向的书太多了，刻意读了几本，后来索性随心所欲了，一本好书才能让自己有翻看的动力。今年买的书还是太多了，书还是要买来新鲜着读最好，一旦放了两周可能就很难再翻开了。&lt;/p>
&lt;hr>
&lt;p>这一本是系列读来最费脑子的一本，充斥着阴谋论，诡计，反转，圈套。
保罗，尼莉亚，杰西卡的主线都完整了，雷托二世的成长也激动人心。&lt;/p>
&lt;p>对于第二本书中保罗的选择做了更多解释，从雷托二世的视角，看到了保罗的局限和渺小。&lt;/p>
&lt;p>人类每次正视自己的渺小，都是自身的一次巨大进步。&lt;/p>
&lt;p>不要试图窥探未来，雷托二世的选择，多了更多人性的光辉，但是接近结尾部分，他非人的转换，又凸显出人类的渺小。&lt;/p>
&lt;p>整本书对两个场景的刻画非常抓人，一个是尼莉亚的自杀，是整本书阴谋的交汇。一个是雷托二世的非人转变，让人期待已久的成神。&lt;/p>
&lt;p>缺点也是这本书读来比较费脑，反派的刻画不太丰满，相比前两部作品来说略显逊色。铺垫过于长了，直到全书的后半段，才逐渐明白作者想要传达的内容。&lt;/p></description></item><item><title>1123 两位候选人</title><link>https://run.halfbit.top/post/1123-%E4%B8%A4%E4%BD%8D%E5%80%99%E9%80%89%E4%BA%BA/</link><pubDate>Tue, 23 Nov 2021 21:32:37 +0000</pubDate><guid>https://run.halfbit.top/post/1123-%E4%B8%A4%E4%BD%8D%E5%80%99%E9%80%89%E4%BA%BA/</guid><description>&lt;p>今天筛选简历时遇到两个候选人：&lt;/p>
&lt;p>候选人A：211院校，2年半经验， 毕业后换了两份工作，工作经历混合了算法和工程，侧重算法和工程桥接。&lt;/p>
&lt;p>候选人B：211院校，2年半经验，毕业后换了两份工作，工作经历基本都在Java生态下承接业务需求。&lt;/p>
&lt;p>我的观点：&lt;/p>
&lt;p>候选人A工程和算法了解都不深入，职业方向缺少规划，公司也不是大厂，简历不通过。&lt;/p>
&lt;p>候选人B基础技术栈比较吻合，虽然简历上看只是做了些CRUD的工作，但是通过可以放进来干活。&lt;/p>
&lt;p>另一位团队TL跟我的观点恰好相反：&lt;/p>
&lt;p>候选人A工程和算法都了解，技术面广，做的算法支持的工程工作有比较强的独特性，通过。&lt;/p>
&lt;p>候选人B做的就是CRUD的工作，简历和经历看不出亮点，市面上类似的人一大把，不通过。&lt;/p>
&lt;p>下来我反思了下，首先我们站的立场不同：&lt;/p>
&lt;p>1. 我是内推人的视角，简历投递越多越好，门槛会不自觉的放低&lt;/p>
&lt;p>2. 他是面试官的视角，简历筛选越严格越好，减少面试投入成本&lt;/p>
&lt;p>其次，我们负责的领域不同：&lt;/p>
&lt;p>1. 我是工程领域，自己也是从CRUD BOY过来的，对类似经历的同学表示理解&lt;/p>
&lt;p>2. 他是综合技术领域，对算法，工程混合人才比较关注，对CRUD BOY不感冒&lt;/p>
&lt;p>我们做的很多对别人简历的筛选决策，仿佛是给自己人生重新走了一遍。&lt;/p>
&lt;p>你是去读211，还是一个普通大学？你在大学学什么专业，要不要实习，有没有ACM？&lt;/p>
&lt;p>毕业选什么公司，公司做什么项目，项目用什么技术，这技术为什么这么用，背后的原理是什么？&lt;/p>
&lt;p>除了工作用到的，空闲时间有没有了解前沿的技术，有没有求知的欲望？&lt;/p>
&lt;p>到了找工作的时候，这薄薄的一两页简历，有没有表达清楚自己的核心竞争力，独特性？&lt;/p>
&lt;p>还是要写个普通的CRUD的简历，碰见个像我一样网开一面的面试官才能敲开面试官的门？&lt;/p>
&lt;p>所以这两份简历都不好，我之所以没放弃候选人A，因为我多少看到他身上的优点，而且我知道我们有这么个岗位，大多数公司和部门都不存在跟他对口的岗位。候选人B也是刚好碰见了我这样对CRUD宽容的人才把简历提交进来。&lt;/p>
&lt;p>不要把自己的路越走越窄，提升自己的独特性，展示自己的学习能力，求知欲，成长性，表达力。&lt;/p>
&lt;p>自勉。&lt;/p></description></item><item><title>1120 又菜又卷</title><link>https://run.halfbit.top/post/0105-%E6%B7%B1%E6%84%9F%E6%8C%AF%E5%A5%8B/</link><pubDate>Sat, 20 Nov 2021 21:38:37 +0000</pubDate><guid>https://run.halfbit.top/post/0105-%E6%B7%B1%E6%84%9F%E6%8C%AF%E5%A5%8B/</guid><description>&lt;p>看别人的年度总结是一件非常有趣的事情，仿佛在另一个平行时空走了一遭，我决定把他们都记录下来，新列表启用 #年度总结&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020125959.png" alt="">&lt;/p>
&lt;p>关于怎么找到自己的价值，被两篇文章深受启发。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020125099.png" alt="">&lt;/p>
&lt;p>抱着激动的心情，深夜去撸了个PR。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020125210.png" alt="">&lt;/p>
&lt;p>一瞬间改变生活的，几乎都是坏事情。几乎所有创造幸福快乐的过程，都需要很长时间：学习新技能、改变旧行为、建立良好关系、抚养孩子。这就是为什么耐心和决心是人生中最重要的美德。&lt;/p>
&lt;ul>
&lt;li>《Too Soon Old, Too Late Smart》&lt;/li>
&lt;/ul>
&lt;p>突然感觉自己有很多可以做的事情，一点也不焦虑了。&lt;/p>
&lt;p>真是个可爱的社区，我爱程序员们。&lt;/p></description></item><item><title>1120 又菜又卷</title><link>https://run.halfbit.top/post/1120-%E5%8F%88%E8%8F%9C%E5%8F%88%E5%8D%B7/</link><pubDate>Sat, 20 Nov 2021 21:38:37 +0000</pubDate><guid>https://run.halfbit.top/post/1120-%E5%8F%88%E8%8F%9C%E5%8F%88%E5%8D%B7/</guid><description>&lt;p>首先觉得现在在用的这个字体非常好，以后写公号大概都用这个字体，有一种庄重严肃的感觉。&lt;/p>
&lt;p>昨天晚上听了一期播客，是刘飞和小宇宙创始人的一个对谈，有非常大的触动。结合最近自己的状态，有了很多想法，借着周末的时间记录一下。&lt;/p>
&lt;p>首先自己最近是一个什么状态呢？刚从菜鸟到字节，本身就是一个新的环境，而且供应链这块业务对自己又是一个新的方向，所以做事情束手束脚，总感觉要充分调研，看看别人都是怎么做的，前几周花了非常多的时间在看别人的方案，自己没有什么实质上的创造和产出，基本都是对吸收内容的再加工。前几次跟Leader聊方案参看别人的方案文档，他都在问这个是不是你写的，我也觉得有点尴尬。&lt;/p>
&lt;p>然后播客里面是怎么说的呢？刘飞说自己不想写公众号，因为很多观点都是别人都已经写过了，自己再写一样的东西，没有什么意义，不如邀请一些独特的嘉宾，聊出一些独创的内容。追求创造，连接更多的人，也连接自己。主播和嘉宾对能够创造的自豪感，让人羡慕。&lt;/p>
&lt;p>听完之后我一直在反思，在工程这条路上，到底应该怎么做比较好？&lt;/p>
&lt;p>字节这边有一个很有意思的对开发的称呼，RD，指的是 Rearch &amp;amp; Develop，对 Rearch 的强调非常明显，这在之前阿里的氛围里面是没有的。那Rearch 到底应该做到什么程度呢？我在字节过去的这几个礼拜，基本都在 Rearch ，反而陷入了迷茫，天天觉得很焦虑想做事，但是自己又没有什么实际的产出，淹没在文档中，产出的都是一些很虚的架构图，思路，总结。&lt;/p>
&lt;p>字节的Slogan是 Inspire Creativity, Enrich Life 。那我自己的 Creativity 体现在哪里呢？其实现在工程的同学，特别是在供应链这块相对比较成熟的领域，Creativity 是很难的。&lt;/p>
&lt;p>上周跟阿里供应链的老同学木恒吃饭，聊到做供应链的核心竞争力，他说做供应链，最重要的就是经验，而不是知识。知识随便读几本书，大家都可以说，什么信息流、金流、物流，什么人、货、场。重要的是知道什么方案可行，什么方案不可行，你觉得听起来很好的一个方案，投入了非常大的精力进去最后失败了，但是另一个更有经验的人来做，可能早就预见到了这个方案不能成功。&lt;/p>
&lt;p>那我要在字节做工程，到底应该怎么做才好呢？现在我的困惑，我觉得很直接的方式就是：去做。来字节不就是为了摆脱阿里的那些历史包袱吗，不就是为了轻装上阵吗？在这边还束手束脚，不放飞自己的 Creativity，永远没有机会得到认可。&lt;/p>
&lt;p>为什么标题叫做又菜又卷，卷是最近焦虑的表现，菜是目前对自己的一个评价。这个阶段的自己，需要果断借机会来证明自己，不要再束手束脚了，给出自己的方案，而不是一直在看别人的方案。&lt;/p></description></item><item><title>1222 不内卷的文化怎么来？</title><link>https://run.halfbit.top/post/1222-%E4%B8%8D%E5%86%85%E5%8D%B7%E7%9A%84%E6%96%87%E5%8C%96%E6%80%8E%E4%B9%88%E6%9D%A5/</link><pubDate>Sat, 20 Nov 2021 21:38:37 +0000</pubDate><guid>https://run.halfbit.top/post/1222-%E4%B8%8D%E5%86%85%E5%8D%B7%E7%9A%84%E6%96%87%E5%8C%96%E6%80%8E%E4%B9%88%E6%9D%A5/</guid><description>&lt;p>今天被工作上的一件事情震惊了，切身感受到了字节的卷的程度：同一份产品需求文档，同时在两个技术团队产出了两套技术方案，并行开发，先后上线。&lt;/p>
&lt;p>回来之后认真思考了下，又回顾了一遍南门老师谈论内卷必然性的文章，有点感想。&lt;/p>
&lt;p>阿里为什么不这么卷，因为业务已经既定成型，团队和边界都比较清晰，梯队上都均匀有侧重长处的人选，团队的 SCOPE 和 OKR 都相对自洽，业务团队不提倡造轮子，提倡体系化的业务理解和思考，崇尚古典的技术架构方案论，很多资深的开发同学都进入了产品或者业务团队。&lt;/p>
&lt;p>字节的卷，本质源于对技术的崇拜，这是字节的文化基因决定的。但是，你的方案能不能解决，跟我想不想通过你的方案来解决，是两回事情。说白了，就是很多在卖力输出的团队，误判了别人解决这个问题的 Justifiability 。&lt;/p>
&lt;blockquote>
&lt;p>Justfiability的意思是：你能不能讲清楚你重复造轮⼦背后的逻辑，你造这个轮⼦是不是justifiable的（即能不能被justify）。Justifiability和这个东⻄是偏底层还是偏上层关系很⼤。⼀般来说， 越偏低层，通⽤性越强、差异性越低，重复造轮⼦越不justifiable。&lt;/p>
&lt;/blockquote>
&lt;p>在阿里为什么比较少人犯这个错误（工程团队不提倡造轮子），因为这个观点已经成为了一种群体无意识。&lt;/p>
&lt;p>逻辑在于：你作为一个工程团队的同学，在开发过程中顺手实现的一个解决方案，必然是不昂贵的（副产品）。其他人想要来复用你这个方案，必然是昂贵的（理解成本，维护成本，扩展成本），所以这是一件性价比很低的事情，注定不会成功。&lt;/p>
&lt;p>所以归根到底，业务（或者说工程）同学，最重要的素质，是对业务问题的快速理解，对业务扩展性的预判，落地到系统架构的设计，带来长远的技术收益。&lt;/p>
&lt;p>凭借解决方案对外输出的非业务线同学，要多想想自己是不是纸老虎，别人实现一套你的方案，付出和收益的比例到底是怎么样的？&lt;/p>
&lt;p>这样想想，对自己马上要重复造的一个轮子心安理得了起来，甚至觉得应该克服借鉴别人方案的 “偷窃” 心态，大胆的偷，多多的偷，来造好自己手上的轮子。&lt;/p>
&lt;p>附图是南门老师的图，非常非常好&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020123725.png" alt="">&lt;/p></description></item><item><title>1119 关于信息对称和公平</title><link>https://run.halfbit.top/post/1119-%E5%85%B3%E4%BA%8E%E4%BF%A1%E6%81%AF%E5%AF%B9%E7%A7%B0%E5%92%8C%E5%85%AC%E5%B9%B3/</link><pubDate>Fri, 19 Nov 2021 11:26:37 +0000</pubDate><guid>https://run.halfbit.top/post/1119-%E5%85%B3%E4%BA%8E%E4%BF%A1%E6%81%AF%E5%AF%B9%E7%A7%B0%E5%92%8C%E5%85%AC%E5%B9%B3/</guid><description>&lt;p>前几天高德打车打了一个出租车，司机服务态度非常恶劣，下来我就在高德上投诉了，客服后来答复把司机从平台移除了，订单也退款了。&lt;/p>
&lt;p>这个事情给我带来两个想法。&lt;/p>
&lt;p>一个是信息对称的巨大力量。如果我跟一个出租车司机在10年前相遇，任凭他态度多么恶劣，我也很难对他造成实质的影响，他提供的服务质量好坏无关痛痒，我们两个之间就是单次博弈。有了打车平台后，他的恶劣服务，会直接导致他的收入减少，打车人和出租车司机之间，就形成了重复博弈，可以有效对司机的服务质量作出管控，从而使得打车平台上的服务质量得以反馈提升，现在的滴滴服务质量比高德好就印证了这一点。大众点评的成功也是基于同一逻辑，把客户和饭馆的关系转变为了重复博弈，好吃的店得到曝光，不好吃的店快速消亡。&lt;/p>
&lt;p>另一个是公平。为什么存在上一个重复博弈的情况下，司机还是做出了明显不利于他的选择呢？之前看到字节和一个微博大V打官司，微博大V说的话：&lt;/p>
&lt;blockquote>
&lt;p>法律是公平的，但是使用法律机会的权力是不公平的。&lt;/p>
&lt;/blockquote>
&lt;p>在这个场景下，互联网对每个人都是开放公平的，但是对于互联网使用的机会和权力是不公平的。包括最近的996，为什么互联网人的996声势浩大，但是传统劳动密集型企业，包括工地上的长期昼夜颠倒，从没有放大到这个层面呢，这就是对于互联网使用的不公平。我在这个场景下，是互联网优势的利用方。但是同样的，互联网人对实际世界的利用上，就是等同的劣势。所以不要盲目自信，我拥有的，只是公平互联网环境下的一点自以为是的优势。&lt;/p>
&lt;hr>
&lt;p>附图为苹果和Epic官司时，Epic描绘的苹果作为垄断科技公司的形象。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020116588.png" alt="">&lt;/p></description></item><item><title>1115 Dune Messiah</title><link>https://run.halfbit.top/post/1115-dune-messiah/</link><pubDate>Tue, 16 Nov 2021 00:51:37 +0000</pubDate><guid>https://run.halfbit.top/post/1115-dune-messiah/</guid><description>&lt;p>昨天听李如一的对谈节目聊到尼尔波兹曼：童年的消逝，谈到书籍在现代语义下意义的消解，我很钦佩这个思想的洞察力。时刻保留对自己思想举动的观察，是一件细思恐极的事情，这本书描绘的保罗的状态，让人绝望。&lt;/p>
&lt;p>不过想从一本科幻小说得到启示，是一件说来让人发笑的事情。&lt;/p>
&lt;p>不管怎样，这本书在阅读过程中带给人的沉浸感，是首屈一指的。&lt;/p>
&lt;p>宏大的创造力，想象力，是这个时代多么宝贵的东西。作者塑造的这个背景，让人感到如此的渺小。人的所作所为，不过是一个宏大叙事下的一个个注脚，尽管地位如保罗，最终也是被命运裹挟，淹没在沙漠的风暴中。&lt;/p>
&lt;p>保罗的无法挽回的消逝，过程中的绝望和无助状态，比无垠的沙丘，更攥紧读者的心，让人仿佛正在直面沙漠的风暴，无法呼吸。结尾新生生命的诞生，又悄然埋下一颗希望的火种，仿佛是明日辉煌的序章。&lt;/p>
&lt;p>背后的阴谋，包括圣战，更是超越了任何一个人，卷动这整个宇宙利益的分配。&lt;/p>
&lt;p>保罗啊保罗，明知爱人会因分娩死去，明知邓肯可能杀害自己，这份勇气和坚定，这份痛苦，终于解脱了。&lt;/p></description></item><item><title>抽象=思考，还原=看清真相</title><link>https://run.halfbit.top/post/1108-%E6%8A%BD%E8%B1%A1%E6%80%9D%E8%80%83%E8%BF%98%E5%8E%9F%E7%9C%8B%E6%B8%85%E7%9C%9F%E7%9B%B8/</link><pubDate>Sat, 13 Nov 2021 16:32:37 +0000</pubDate><guid>https://run.halfbit.top/post/1108-%E6%8A%BD%E8%B1%A1%E6%80%9D%E8%80%83%E8%BF%98%E5%8E%9F%E7%9C%8B%E6%B8%85%E7%9C%9F%E7%9B%B8/</guid><description>&lt;p>**不抽象就⽆法深⼊思考，不还原就⽆法看清真相 **&lt;/p>
&lt;p>今天听刘润的分享，这句话作为课后的回答提了⼀嘴，感觉发⼈深省。&lt;/p>
&lt;p>这段表述不同于：&lt;em>喝茶的买它因为他是茶，不喝茶的买它因为它不是茶&lt;/em>，这种纯粹玩⽂字游戏的表述。&lt;/p>
&lt;p>而是表达了思考的正向和逆向过程。&lt;/p>
&lt;p>**抽象是⼀种归纳的过程，把具象转为抽象。**一头水牛，是具象的，右边是毕加索画，是抽象的。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020113668.png" alt="">&lt;/p>
&lt;p>&lt;strong>还原是对思想的演绎，把思想还原到实际&lt;/strong>。⽜都是哺乳动物，所以奶⽜可以挤出奶来。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020113041.png" alt="">&lt;/p>
&lt;p>抽象有助于深化思考，演绎/还原有助于验证思想，加深理解。&lt;/p>
&lt;p>对于⾃⼰的理解，不断的在新的场景下还原，可以验证和提升⾃⼰的抽象能⼒。&lt;/p>
&lt;p>对于他⼈的知识，在⼯作和⽣活中还原，可以加深理解，⽽不⾄于：&lt;em>听了很多道理，依然过不好这⼀⽣&lt;/em>。&lt;/p>
&lt;p>近期给自己做的抽象的训练，就是画图，使用OmniGraffle，或者Xmind，来总结或者表达观点。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020113333.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020114195.png" alt="">&lt;/p>
&lt;p>除了抽象，还得莫忘还原，对技术方案，还得结合具体业务场景做推演，这个往往被忽视。如果有些场景考虑不足，也没关系，这就是对抽象能力的进一步提升。&lt;/p></description></item><item><title>《计算的本质》读后</title><link>https://run.halfbit.top/post/%E8%AE%A1%E7%AE%97%E7%9A%84%E6%9C%AC%E8%B4%A8%E8%AF%BB%E5%90%8E/</link><pubDate>Tue, 08 Jun 2021 10:15:37 +0000</pubDate><guid>https://run.halfbit.top/post/%E8%AE%A1%E7%AE%97%E7%9A%84%E6%9C%AC%E8%B4%A8%E8%AF%BB%E5%90%8E/</guid><description>&lt;p>“这些思想可能不会立即改变你工作的方式，但我希望它们已经满足了你的某种好奇心，并且能帮助你享受在宇宙中实现计算时所度过的时光”&lt;/p>
&lt;p>这本书在我刚选择编程作为毕业后的工作的第一年就买了，现在已经是第7个年头了，这本书也陪我从上海到杭州，终于今天把它读完了。在今天读到这本书既是不幸的又是幸运的，不幸的是相见恨晚，恨不得没有早点读到这本书，幸运的是在我有了多年的编程经验后，更能享受到对计算本质的探寻的纯粹的享受。&lt;/p>
&lt;p>对于非科班（或者像我一样荒废大学时光的伪科班），如果你读不动厚厚的龙书（《编译原理》），建议你翻开这本书，并且跳过后面部分较为晦涩的内容，享受纯粹的探求计算本质的精华。无Ruby编程经验也丝毫不妨碍你理解书中提供的示例程序（但是确实到了第7章后阅读程序会非常吃力，需要多费些功夫，但是这不是编程语言的问题，恐怕换成你常用的语言，依然一样烧脑）。读完后你会对编程语言的实现机制更有实感，也会对近期很火的PUA-LANG的实现方式有高屋建瓴的预判。&lt;/p>
&lt;p>推荐搭配这本书服用的（一样浅显易懂）是《穿越计算机的迷雾》，补足本书对硬件实现描述的缺失。&lt;/p>
&lt;p>不可否认的是读到最后，对于我们日常写的代码的正确性产生了本质上的怀疑，但是所谓的人类一思考，上帝就发笑，我们自行探求自己的意义这个行为，本身就是不可判定的。&lt;/p>
&lt;p>再去看看哥德尔第一不完备定理，Kleene第二递归定理这些前人留下来丰功伟绩，我们作为后来的平凡人能够享受在宇宙中实现计算时所度过的时光就好。&lt;/p>
&lt;p>这不就是一件最为幸福的事了么。&lt;/p></description></item><item><title>近期作为一个杠精的自我修养</title><link>https://run.halfbit.top/post/%E8%BF%91%E6%9C%9F%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%9D%A0%E7%B2%BE%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</link><pubDate>Thu, 22 Apr 2021 10:15:37 +0000</pubDate><guid>https://run.halfbit.top/post/%E8%BF%91%E6%9C%9F%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%9D%A0%E7%B2%BE%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</guid><description>&lt;blockquote>
&lt;p>杠精是一个网络流行词，指经常的通过抬杠获取快感的人、总是唱反调的人、争辩时故意持相反意见的人。&lt;/p>
&lt;/blockquote>
&lt;p>工作中会有很多争论的场合，产品方案，技术方案，流程方案，大家需要花很多的时间达成一致，在这些过程中，要警惕为了杠而杠，和为了达成目标而探讨。&lt;/p>
&lt;h3 id="典型的几个场景">典型的几个场景&lt;/h3>
&lt;h4 id="异常中心多货归还流程讨论">异常中心多货归还流程讨论&lt;/h4>
&lt;p>参与方：业务，流程，产品，现场，PO&lt;/p>
&lt;p>初始状态：&lt;/p>
&lt;p>流程同学持有观点：多货需要还货，需要录入效期，还货后需要盘点&lt;/p>
&lt;p>业务同学持有观点：不论怎么管，需要达成我的业务目标：降本，你要说服我这么管整体成本降低，而且没有引入额外业务风险&lt;/p>
&lt;p>现场同学持有观点：多货需要录入效期，繁琐，还货后需要盘点，繁琐，增加现场工作量，异常的直接工时增加&lt;/p>
&lt;p>PO同学持有观点：一期做了，没人用，二期能满足现场要求吗，现场能用起来吗？&lt;/p>
&lt;p>产品同学持有观点：不论哪种流程产品都可以支持&lt;/p>
&lt;p>讨论了两个小时，你觉得大家能够达成一致吗，达成一致的前提是什么？&lt;/p>
&lt;h4 id="实操业务平台的标准服务语义中是否应该有幂等键设计">实操业务平台的标准服务语义中，是否应该有幂等键设计&lt;/h4>
&lt;p>参与方：若干技术同学，分为正反两方&lt;/p>
&lt;p>初始状态：&lt;/p>
&lt;p>正方觉得应该设计幂等键&lt;/p>
&lt;p>反方觉得不应该设计幂等键&lt;/p>
&lt;p>讨论了两个小时，你觉得大家能够达成一致吗，达成一致的前提是什么？&lt;/p>
&lt;h3 id="认知理论">认知理论&lt;/h3>
&lt;h4 id="关于认知态度">关于认知态度&lt;/h4>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020110390.png" alt="">&lt;/p>
&lt;h4 id="关于认知沟通">关于认知沟通&lt;/h4>
&lt;p>乔哈里视窗&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020111053.png" alt="">&lt;/p>
&lt;h3 id="避免常见的误区">避免常见的误区&lt;/h3>
&lt;p>一个事情讨论最后演变成纯杠，往往是进入了认知，沟通的某个误区。&lt;/p>
&lt;h4 id="气势上">气势上&lt;/h4>
&lt;p>愚昧山峰的人往往比在开悟之坡的人气势更足，导致沟通姿态上的非对等。&lt;/p>
&lt;p>或者因为单纯职务上的高低，导致沟通从气势较弱一方到气势较足一方的信息传递质量很差。&lt;/p>
&lt;p>这时候，需要有人能够明确指出参与方在问题理解程度上的差异，所谓的把你拉到我的同一水平上开始平等沟通。&lt;/p>
&lt;h4 id="动机上">动机上&lt;/h4>
&lt;p>每次沟通要明确发起一次沟通的目标是什么？&lt;/p>
&lt;p>如果不确定沟通的主题，往往会导致争论陷入对于细节的杠上，对真正解决问题无益。&lt;/p>
&lt;h4 id="提对问题很重要">提对问题很重要&lt;/h4>
&lt;p>不要把问题的讨论聚焦在人/团队，态度，意识上，是最容易出现争端的，也最不可控。&lt;/p>
&lt;p>要把问题追溯到工具，流程，标准等确定性的话题上。&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020111812.png" alt="">&lt;/p>
&lt;h3 id="沟通的心态">沟通的心态&lt;/h3>
&lt;h4 id="空杯">空杯&lt;/h4>
&lt;p>常常对的人会主动寻求信息推翻自己的假设和结论，这是非常反人性的，人们对于证据收集往往是选择性的。&lt;/p>
&lt;p>对于立场的选择，要反省自己，是单纯对自己过往立场的惯性坚持，还是已经做了对过往问题解法的重新审视。&lt;/p>
&lt;h4 id="坚持">坚持&lt;/h4>
&lt;p>对于已有客观观察的判断，就要坚持立场，不聊清楚誓不罢休。&lt;/p>
&lt;h4 id="真诚">真诚&lt;/h4>
&lt;p>对事不对人，把话题引导到能解决问题的方向。&lt;/p>
&lt;p>互换立场，思考对立的原因是什么。&lt;/p></description></item><item><title>把事情做完 or 把事情做对</title><link>https://run.halfbit.top/post/%E6%8A%8A%E4%BA%8B%E6%83%85%E5%81%9A%E5%AE%8C-or-%E6%8A%8A%E4%BA%8B%E6%83%85%E5%81%9A%E5%AF%B9/</link><pubDate>Wed, 31 Mar 2021 03:10:37 +0000</pubDate><guid>https://run.halfbit.top/post/%E6%8A%8A%E4%BA%8B%E6%83%85%E5%81%9A%E5%AE%8C-or-%E6%8A%8A%E4%BA%8B%E6%83%85%E5%81%9A%E5%AF%B9/</guid><description>&lt;p>最近有几件事情，分享与大家。&lt;/p>
&lt;h3 id="故障">故障&lt;/h3>
&lt;p>第一件事情：背了一个故障，不大不小的P4资损故障，最终未追回金额约200块钱。&lt;/p>
&lt;h4 id="背景">背景&lt;/h4>
&lt;p>原因说来挺简单的，跨团队的人找来需要配合做一个技改，需要下线一个A Topic的metaq消息，迁移到B Topic上。本来自然的改法就是创建一个新的B Topic订阅，将原来的A Topic的消费逻辑迁移过来。但是因为：&lt;/p>
&lt;ol>
&lt;li>B Topic比较特殊（流量巨大），导致申请B Topic订阅需要审批后找中间件的人手动创建订阅关系。&lt;/li>
&lt;li>B Topic在现在代码中已有订阅。&lt;/li>
&lt;/ol>
&lt;p>很自然的，改法变成了复用原有的B Topic订阅关系，修改订阅关系指定的Filter SQL，将A Topic的订阅逻辑合并进来，免去了审批，减少了计算资源，完成了任务。&lt;/p>
&lt;h4 id="天时">天时&lt;/h4>
&lt;p>项目发布需要修改A Topic的消费逻辑。&lt;/p>
&lt;h4 id="地利">地“利”&lt;/h4>
&lt;p>B Topic不支持灰度环境消费，需要发布线上，才能满足项目灰度要求。&lt;/p>
&lt;p>所以考虑在项目发布前，单独开了一个前置发布窗口，准备代码发布上线&lt;/p>
&lt;h4 id="人和">人和&lt;/h4>
&lt;p>发布前，项目组成员一起review了这段改动，大家都觉得应该新增订阅关系，但是基于背景的几点考虑，大家都一起陷入了思维定势，觉得这个改OK，也忽略了老代码的防御缺失。&lt;/p>
&lt;p>第一批发布后，因为订阅关系的改变，导致未发布机器使用老代码消费了额外的消息，引发故障。&lt;/p>
&lt;p>想要把事情做完的是一个很自然的诉求，大家都追求把事情做完。&lt;/p>
&lt;p>上面这件事情是个很自然的把事情做完的过程，但是仅仅是把事情做完，往往会导致很严重的后果，比如上面的故障。如果第一步坚持走订阅审批，第二步走紧急发布审批，出现问题的几率会不小很多？&lt;/p>
&lt;p>把事情做对，无疑需要耗费成倍的精力。&lt;/p>
&lt;p>从组织层面，就需要思考怎么降低大家把事情做对的阻力，怎么引导大家从对的角度思考问题。&lt;/p>
&lt;h3 id="灰度问题">灰度问题&lt;/h3>
&lt;p>还是这个项目，发布后还在灰度验证阶段，需要依赖前台流量入口应用的灰度配置。今晚切了一个仓到灰度，找了该团队的同学帮忙配置灰度，他的做法是，直接修改一个已有的灰度规则，将里面的灰度规则替换成我们的灰度规则：&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020112853.png" alt="">&lt;/p>
&lt;p>尽管实现的效果是一样的，我也没有异议，但是过了一个小时就出现了意外。这个灰度规则被该团队的另一个同学误停用了。原因也很简单，他不知道那个规则的目的，处于发布后停止灰度的考量，就统一停用了一批灰度规则。&lt;/p>
&lt;p>导致的后果就是我又订了一个小时的数据。&lt;/p>
&lt;p>正确的方式是怎么去做呢？那个误停用我规则的小伙伴就做了一个正确的示范：专规则专用&lt;/p>
&lt;p>&lt;img src="https://halfbit.oss-cn-hangzhou.aliyuncs.com/202204020112393.png" alt="">&lt;/p>
&lt;p>用上面第一个方法当然更简单，少了非常多的操作，但是也给我带来了后续的麻烦，而第二个方法却是更正确的方法，如果直接这么做了，显然可以减少后续无谓的投入。&lt;/p>
&lt;p>因为是别人团队的灰度规则，我请别人代为配置，如果我要坚持别人做正确的配置，我和他都需要耗费额外的精力，但是我想了下，如果我坚持正确的方式，他应该不会表示反对，反而是如果我默许了，出了问题，反而他会觉得我没有好好把关，因为显然大家都更喜欢怪别人。&lt;/p>
&lt;p>所以一样的，要从系统的角度去避免这个问题，做正确示范，不要让大家想当然。&lt;/p>
&lt;h3 id="妥协的顽疾">妥协的顽疾&lt;/h3>
&lt;p>上面两件事情，显然出现问题后解决问题的投入要远远大于第一次把问题正确解决需要耗费的投入（从整个组织层面）。但是为什么第一时间都选择妥协于当下的投入？&lt;/p>
&lt;p>我发现这里存在的认知误区：&lt;/p>
&lt;ol>
&lt;li>把事情做完有明显的收益&lt;/li>
&lt;li>把事情做对而且做完的边际收益很低&lt;/li>
&lt;li>如果要麻烦别人，尽可能降低门槛才能打动别人&lt;/li>
&lt;/ol>
&lt;p>从代码工程师的角度思考，显然大家都想把事情做对，但是面临这三个普遍的误区，很容易步入“把事情做完”的误区。&lt;/p>
&lt;p>要解决这个问题，有两个思路：&lt;/p>
&lt;ol>
&lt;li>系统约束，而非制度约束：如代码规约扫描，自动化用例等&lt;/li>
&lt;li>工程师的文化，给予大家把事情做对的鼓励，减少功利的做完事情的浮躁&lt;/li>
&lt;/ol>
&lt;p>显然这两个思路在对组织的要求是非常高的，从我做起的话，就要避免上面几个认知误区，共勉。&lt;/p></description></item><item><title>浅看前解决方案时代的产品建设思路</title><link>https://run.halfbit.top/post/%E6%B5%85%E7%9C%8B%E5%89%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%97%B6%E4%BB%A3%E7%9A%84%E4%BA%A7%E5%93%81%E5%BB%BA%E8%AE%BE%E6%80%9D%E8%B7%AF/</link><pubDate>Mon, 15 Mar 2021 10:15:37 +0000</pubDate><guid>https://run.halfbit.top/post/%E6%B5%85%E7%9C%8B%E5%89%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%97%B6%E4%BB%A3%E7%9A%84%E4%BA%A7%E5%93%81%E5%BB%BA%E8%AE%BE%E6%80%9D%E8%B7%AF/</guid><description>&lt;p>这篇是&lt;a href="https://run.halfbit.top/">浅看后平台行业分离时代一线开发小二的困境&lt;/a>的续集，距离上篇文章已经过去了一年时间，期间整个仓储团队的组织架构发生了非常大的变化，这个期间随着集团NBF，TMF乃至星环的发展，解决方案的思想逐渐渗透到仓储的整个技术体系中，几乎所有团队目前都在做解决方案相关的工作，我姑且把当前这个时期唤做【前解决方案时代】。&lt;/p>
&lt;h3 id="这一年发生了什么">这一年发生了什么？&lt;/h3>
&lt;p>去年我的总结是平台一线小二距离行业太远，行业一线小二疲于奔命没有成长。&lt;/p>
&lt;p>今年我也先一句话总结：看到业务越来越多，方向感却越来越模糊。&lt;/p>
&lt;p>随着国内供应链团队的剥离，部分原有来自平台团队的团队开始重组逐渐接手行业一线的业务，带来的变化有二：1. 所有团队距离业务的距离拉近了；2. 一线行业的建设思路也开始朝着中台化发展。&lt;/p>
&lt;p>为什么方向模糊了？&lt;/p>
&lt;ol>
&lt;li>原来的平台团队，现在还是平台吗？在还未上升为中台系统的【中途岛平台】，成为了一个个行业平台后面的平台，平台未来发展的方向是什么？&lt;/li>
&lt;li>优秀的产品和业务大量流失。原来跟着产品和业务走，技术只要专注把系统建设好，稳定性建设好就够了。现在开发不得不站出来更多思考产品和业务上的合理性的时候，在一些评价体系的场合中被别人问到你到底是开发还是产品的时候如何回答？&lt;/li>
&lt;/ol>
&lt;h3 id="我们的方向到底是什么">我们的方向到底是什么？&lt;/h3>
&lt;p>我们想要建设北半球最强的WMS。最强 = 最有竞争力，这句话翻译过来，我们的WMS在整个北半球，是最有竞争力的仓储管理系统产品。&lt;/p>
&lt;p>我是怎么理解竞争力的：&lt;/p>
&lt;ol>
&lt;li>有产品专业度，这个是立身之本。如果没有足够对于仓储领域知识的沉淀，显然是做不出一个符合业界规范的专业领域产品的，更无法给客户带来最基本的可用价值。这一点在WMS行业我认为SAP可以算是标杆。&lt;/li>
&lt;li>有产品体验，这个是粘性之源。产品体验不仅在于交互的体感，更在于能洞察用户的操作路径，给用户减少冗余的操作，并提供足够的灵活性。之前跟一个产品聊天的时候提及她之前做的一个WMS系统，其实就是一个在线的Excel表格，足够灵活，随时编辑，有汇总和排序能力即可，但是反观我们的很多产品目前可能还无法做到基本的动态定制。这一点我认为可以把SalesForce作为标杆。&lt;/li>
&lt;li>高技术储备，低技术成本。高技术储备意味着可以承接诸如双十一的超高流量，低技术成本意味着可以低开发投入，低或者无技术运维，云化的部署方式带来技术的快速复制红利。&lt;/li>
&lt;/ol>
&lt;h3 id="在建设有竞争力的产品时候遇到了什么困难">在建设有竞争力的产品时候遇到了什么困难？&lt;/h3>
&lt;h4 id="专业性缺失">专业性缺失？&lt;/h4>
&lt;p>当前的仓储系统建设，更多的是建立在对既有系统/产品方案中沉淀的供应链知识的不断反刍，为什么是这样？能不能更好？敢不敢改？&lt;/p>
&lt;p>我们需要的是&lt;/p>
&lt;ol>
&lt;li>更多的对业务上突破的尝试：结构性创新&lt;/li>
&lt;li>更专业WMS知识带来的结构性的创新：专业性&lt;/li>
&lt;/ol>
&lt;p>以上各对应举个例子：&lt;/p>
&lt;ol>
&lt;li>前年年底，零售通行业的PD拉着我们做了一个需求，期望把仓内实操作业的多少货异常与实物库存的多少差异解耦，因为他们觉得XX%的作业异常都是拣选员工错误操作导致的。这个想法在去年我们听起来本是天方夜谭，过往的系统告诉我们，实操作业异常一定是域实物库存的差异绑定的，我们需要通过及时差异库存来减少后续的作业异常，所以我们的系统设计上，实操作业模型TASK是在作业差异时提供对等库存差异能力的。后来听信了他们的魅惑上线了项目，结果产品和业务告诉我们，他们发现了哦原来仓内的异常也不是作业员工导致的，本质上是仓库库存管理的一位多品，随意外挂导致的，好了，他们后来去优化库存去了，也能提升仓内的作业准确性。&lt;/li>
&lt;li>去年中旬，猫超的业务直接拉着开发同学聊一个需求，期望做一个异常中心，本质还是把仓内实操作业的多少货异常与实物库存的多少差异做绑定，并添加库存差异的缓冲区域用于存放错误操作导致货品漂移，而且还大幅度去优化错误操作后的修复包裹过程（复拣）的作业体验，并结合周期的库存盘点统一处理库存差异，号称一年能减少一千万人力成本。这个想法最早我们也是心里怀疑的，复拣和盘点功能一直都有，就这个就能成？好了项目做了，不仅做了一期，还做了二期，我们还希望继续一直把这个产品做下去。&lt;/li>
&lt;/ol>
&lt;p>你们会怎么评价这两个项目呢？第一个项目我们根本没拿到业务的预期结果，但是激发了我们对于仓内作业异常和库存异常关系的思考，而第二个，我们终于在专业的WMS知识的启发下，探索出了解决库存异常的最佳实践。&lt;/p>
&lt;p>这就是我认为的好项目，也是我们目前最缺的。数据指标不会告诉你那些不知道的事情，我们需要更多的专业性和结构创新。&lt;/p>
&lt;h4 id="如何力出一孔">如何力出一孔？&lt;/h4>
&lt;p>我们以前一直在抨击烟囱式的开发思路，你拉一个山头，我开一片荒地，最后是遍地狼藉。在今年团队结构拆分后，大家的分工更模糊了。以前行业和平台的分工很简单，行业使劲支撑业务，平台使劲支撑行业，内核使劲支撑平台，整体能算是力出一孔，从0到1。现在时期已经变了，我们不仅是支撑业务了。第一是因为新的业务没那么多了，第二是因为业务接的越多，不代表我们产品的竞争力越强，流量并不是我们的竞争力。&lt;/p>
&lt;p>从我们的产品建设经历来看，当前阶段做产品建设是一件非常磨人的事情。&lt;/p>
&lt;p>在初始的产品搭建时期，结构化的创新需要产品，流程设计，产品运营，产品实施，技术多方长期的碰撞，这个时期需要的精力，投入度，资源是非常巨大的。&lt;/p>
&lt;p>在第二个时期，产品从1到100的优化，在目前的评价体系下很难得到足够的资源倾斜，跨团队的协作，团队内，团队中的目标对焦是最为考验产品建设者的。&lt;/p>
&lt;p>我们未来的产品建设的思路，更多期望团队间的协作，应当柔性放权，在产品建设创新过程，必然有多方的利益冲突。我们不应该着眼一时的委屈和个人的失败，而要着眼团队的成功和整个大宝的竞争力突破。&lt;/p>
&lt;h3 id="如何应对不确定性为什么是前解决方案时代">如何应对不确定性？为什么是前解决方案时代？&lt;/h3>
&lt;p>产品的建设有不确定性。&lt;/p>
&lt;p>尽管我们通过各种形式提升确定性，如产品和项目建设引入BBB机制来保障，但是只能部分缓解，为什么呢？说个很现实的数据，每年通过BBB的降本立项共计给猫超降本XX亿，但是猫超每年的共计成本才YY亿（**YY亿&amp;lt;**&lt;strong>XX亿&lt;/strong>）,难道做完了所有的产品后，整个猫超业务都开始空手套白狼了？&lt;/p>
&lt;p>在不确定性的产品建设的现实面前，一个应对方式是两手准备，不仅支撑业务，而且做技术储备。&lt;/p>
&lt;p>解决方案建设是目前最亟待解决解决的问题吗？&lt;/p>
&lt;p>很多人在质疑是否解决方案仅仅是对各种产品配置的叫法的美化，但是更深入的设想是没有目前解决方案提供的技术储备，以现有的的技术架构是无法支撑未来的产品建设的。这是必须付出的成本和对未来的投资，好比仓储的稳定性建设底座，云原生的建设等等。&lt;/p>
&lt;p>但是显然的，在产品架构，产品本身不确定的情况下，解决方案是无法被准确定义的，技术设施的建设也正在进行中，所以我把现在叫做前解决方案时期。&lt;/p>
&lt;p>异常中心产品结合仓储的解决方案实践，定义了基础服务层、标准产品层、解决方案层三层标准架构，后面会单开文章详细介绍。&lt;/p>
&lt;h3 id="使命有了行动是什么如何量化结果">使命有了，行动是什么？如何量化结果？&lt;/h3>
&lt;p>有竞争力的产品建设的行动是可以有一套思考路径的，后面会后面会单开文章详细介绍。&lt;/p>
&lt;p>这里先推荐大家阅读《商业的本质》，正如从书中前文就开始介绍的：&lt;/p>
&lt;blockquote>
&lt;p>商业建设需要团队的力量&lt;/p>
&lt;/blockquote>
&lt;p>我们最需要的是人的力量，如何聚拢人心，除了目标/使命提供对个人的激励，还需要切实的目标对齐。&lt;/p>
&lt;p>这部分是最需要的是协同力，如何将使命传达给产品建设的成员非常重要。&lt;/p>
&lt;p>上面是最近一些想法的漫谈，只言片语不成体系还请看官见谅。&lt;/p></description></item><item><title>后平台行业分离时代面临的开发问题</title><link>https://run.halfbit.top/post/thoughs-2020-05/</link><pubDate>Sun, 14 Jun 2020 21:32:15 +0000</pubDate><guid>https://run.halfbit.top/post/thoughs-2020-05/</guid><description>&lt;p>我在18年年底入职，正值菜鸟仓储的平台行业分离时代战役启动。目前基本完成了平台化改造和内核升级，所有切换也基本进入长尾，计划近期会完成平台行业分离战役前的老应用/链路的物理下线。在当前这个【后平台行业分离时代】，作为一名亲历的一线开发小二，谈谈正在面临的一些技术困境。&lt;/p>
&lt;!-- more -->
&lt;h2 id="中途岛的初心和成果">&lt;img src="https://run.halfbit.top/image/2020-06-14/2020-06-14-21-35-52.jpg" alt="">
中途岛的初心和成果&lt;/h2>
&lt;p>平台化改造自不必说，即是秉承集团大中台，小前台的思想，也是在顺应仓储业务多垂直行业的前提下构建的。&lt;/p>
&lt;p>而内核改造，说白了，就是在做基础模型的标准化。&lt;/p>
&lt;p>为什么要做基础模型标准化，我认为主要有两个原因：&lt;/p>
&lt;ul>
&lt;li>通用语言定义，降低沟通成本。在仓储领域，Hu和Task的概念都由来已久，通过基础模型标准化可以统一术语，沉淀领域知识。&lt;/li>
&lt;li>仓储的作业核心模型是仓储所有业务的载体，模型的是否合理，对于仓储业务的可扩展性至关重要。&lt;/li>
&lt;/ul>
&lt;p>关于基础模型的改造过程可以看以下两篇内容：&lt;/p>
&lt;p>【HU】&lt;/p>
&lt;p>【TASK】&lt;/p>
&lt;p>中途岛战役成果是显著的，Hu模型已经贯穿了B2C链路上的出库、B2B链路的出入库，Task模型也已经普及到出库，库内，入库等多实操环节。&lt;/p>
&lt;p>基础模型改造的优点是显著的：&lt;/p>
&lt;ul>
&lt;li>分工明确，内核团队负责Hu模型的标准能力、事件提供，业务平台基于内核的标准能力构建业务抽象，垂直行业将平台的标准能力落在实际的业务场景下。&lt;/li>
&lt;li>数据&amp;amp;算法团队的解放，可以基于统一的模型ETL&amp;amp;训练算法。&lt;/li>
&lt;/ul>
&lt;p>等等不胜枚举，可以到上面提及的ATA中查看详情。&lt;/p>
&lt;h2 id="困境其一我们现在在服务哪些业务">困境其一：我们现在在服务哪些业务？&lt;/h2>
&lt;p>&lt;img src="https://run.halfbit.top/image/2020-06-14/2020-06-14-21-36-00.jpg" alt="">
归根到底，技术的价值必须在实际的业务中得到体现。&lt;/p>
&lt;p>我们做技术改造，降低开发成本，固然是技术价值的体现，但是做着做着，是不是不知不觉偏离了初心：&lt;strong>搞业务。&lt;/strong>&lt;/p>
&lt;p>作为业务平台的技术小二都总被人问说，平台行业分离之后，平台是不是就没什么事情可做了。&lt;/p>
&lt;p>那内核团队的同学岂不是更甚。&lt;/p>
&lt;p>我在当时参与Hu内核改造的时候就被问到了，是不是在闭门造车臆想了一个Hu内核标准，没有站在使用方的视角去看抽象是否合理。&lt;/p>
&lt;p>所以这条链路上的所有技术小二，总要时不时的扪心自问，到底对业务创造了什么价值。&lt;/p>
&lt;p>这个需要不断自驱的拷问和思考，就是第一个考验，如果没了这点，就会迷失在技术的幻觉中，越走越远。&lt;/p>
&lt;p>在管理上，更暴露了KPI制度的一大缺陷：没有OKR从上而下的目标拆解。&lt;/p>
&lt;h2 id="困境其二垂直行业同学的成就感在哪里">困境其二：垂直行业同学的成就感在哪里？&lt;/h2>
&lt;p>据我的浅见，仓储垂直行业的同学面临两大难题：&lt;/p>
&lt;ul>
&lt;li>如何Push平台同学完善平台能力，实现本行业的业务诉求？&lt;/li>
&lt;li>基于一个牛逼平台能力之上构建出来的行业能力，我的成就感和价值在哪里？&lt;/li>
&lt;/ul>
&lt;p>从17年年初开始做平台化改造之后，各个垂直行业如同雨后春笋一般一时无比繁荣，猫超标准版（含4PL），魅力惠（奢品），零售通等等，但是这每一个垂直行业，都像一团又一团绚烂的烟花，一个又一个行业发布后，带来的维护成本，实施成本，标准化的定制成本，都像是烟花炸开后的一地鸡毛。不仅如此，在平台能力缺失时的灌进标准行业的众多兜底逻辑，在后续的维护过程中又是不停的阵痛。&lt;/p>
&lt;p>但是不慌，所谓近水楼台先得月，垂直行业开发同学有个先天的优势，最贴近业务。直播，大农业，阿里健康，都是行业同学先进来一探究竟，这时候的机遇和挑战，跟随新业务成长的激情澎湃，都是无与伦比的体验。&lt;/p>
&lt;p>这时候，垂直行业同学需要做的是什么？&lt;/p>
&lt;ul>
&lt;li>能够有挑战平台系统开放性设计的魄力，前提就是对于业务的深度洞察&lt;/li>
&lt;li>组件化的技术能力的提炼&lt;/li>
&lt;li>业务需求的咀嚼和深度思考，商业价值思维能力的锻炼&lt;/li>
&lt;/ul>
&lt;h2 id="困境其三行业成长缓慢时平台扩展能力的投入roi在哪">困境其三：行业成长缓慢时，平台扩展能力的投入ROI在哪？&lt;/h2>
&lt;p>当垂直行业一个又一个涌现，带来一个又一个新的输入时候，中台/平台的成长也是顺水推舟的。&lt;/p>
&lt;p>但是所谓厚积才能薄发，当有诉求的行业数量是不尴不尬的个位数的时候，平台的业务流程抽象化该怎么做？投入的ROI在哪里？&lt;/p>
&lt;p>如果平台没有扩展能力支持，就把更多的鸡毛，撒在了上一节的垂直行业同学面前。可惜这些鸡毛并不能成为说服平台和内核ROI看板上的令箭。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2020-06-14/2020-06-14-21-36-10.jpg" alt="">&lt;/p>
&lt;p>平台能力在往高峰攀登时候，突然燃油不够了，这时候急需的是：&lt;/p>
&lt;ul>
&lt;li>对平台发展的预判（技术能力的储备）&lt;/li>
&lt;li>对业务的贴近（托令箭的福）&lt;/li>
&lt;/ul>
&lt;p>典型的例子就如我们团队孵化的WPT。这个概念为什么在提出两年后才真正落地，首先是需要对平台发展时期的正确判断（什么时候才需要WPT），其次是依托一个实际的业务场景（2B调拨）。&lt;/p>
&lt;h2 id="困境其四开发要当做自己的产品经理">困境其四：开发要当做自己的产品经理&lt;/h2>
&lt;p>有一个看似奇怪实则必然的现象：业务平台&amp;amp;内核团队很长时间内是没有产品经理的。&lt;/p>
&lt;p>原因有两个：&lt;/p>
&lt;ul>
&lt;li>业务的需求往往只透传到行业层面&lt;/li>
&lt;li>平台的产品经理往往是要拒绝行业的需求的，所以存在感不高&lt;/li>
&lt;li>平台产品发起的方案难以在BBB中胜出，无法得到多行业业务方认可&lt;/li>
&lt;/ul>
&lt;p>所以逐渐的，产品经理都投入到离业务更近的具体业务项目中了，没有能够专职打磨平台&amp;amp;内核能力的人。&lt;/p>
&lt;p>这个时候，技术开发要承担的工作，就不仅仅是技术的编码，更是产品能力的思考。&lt;/p>
&lt;p>还记得有一次问一个前辈，那我们从技术的角度去思考这个问题，边界在哪呢，到某个产品形态还是业务场景？&lt;/p>
&lt;p>答曰：没有边界啊！&lt;/p>
&lt;p>在这个时候破局的思路就是：&lt;/p>
&lt;ul>
&lt;li>没有边界的思考，主动发现平台上所承载的业务中存在的问题&lt;/li>
&lt;li>推动想法落地的软实力，巧妙依托业务项目将自己的想法落地&lt;/li>
&lt;/ul>
&lt;p>这一点的挑战是最难的，意味着开发身份的转变和思考路径的拓展。&lt;/p>
&lt;p>关于这个命题，后续会继续展开探讨。&lt;/p></description></item><item><title>UNIX网络编程学习笔记（三）</title><link>https://run.halfbit.top/post/unix-network-program-3/</link><pubDate>Sun, 17 May 2020 10:30:31 +0000</pubDate><guid>https://run.halfbit.top/post/unix-network-program-3/</guid><description>&lt;p>UNIX网络编程学习笔记（三）&lt;/p>
&lt;!-- more -->
&lt;h2 id="大纲">大纲&lt;/h2>
&lt;p>![](/image/2020-05-17/UNIX网络编程 第三章.png)&lt;/p>
&lt;h2 id="习题">习题&lt;/h2>
&lt;h3 id="31为什么诸如套接字地址结构的长度之类的值-结果参数要用指针来传递">“3.1　为什么诸如套接字地址结构的长度之类的值-结果参数要用指针来传递？”&lt;/h3>
&lt;p>之所以需要通过指针来传递，是因为这个参数同时扮演了两个角色：入参和出参。
作为入参，应用程序告诉内核需要操作的空间大小，避免写越界。
作为出参，内核高速应用程序实际写入的空间大小，从而控制应用程序行为。&lt;/p>
&lt;blockquote>
&lt;p>关于值-结果的解释可以再参考： &lt;a href="https://blog.csdn.net/chuanglan/article/details/80679709">网络编程中为什么使用“值-结果”参数_chuanglan的专栏-CSDN博客&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="32为什么readn和writen函数都将void-型指针转换为char-型指针">“3.2　为什么readn和writen函数都将void *型指针转换为char *型指针？”&lt;/h3>
&lt;p>首先需要思考，指针仅仅是地址而已，为什么需要有类型？这里主要有两个考虑：&lt;/p>
&lt;ol>
&lt;li>不同的数据占用的内存单元数十不一样的！也就是int&lt;em>指向的数据和float&lt;/em>指向的数据占用的内存单元不一样，那么我们通过指针来取数据的时候，需要能知道读取地址后的几个单元&lt;/li>
&lt;li>当指针在移动的时候我们通过类型就知道一步移动要涉及几个内存单元
如果不转换为&lt;code>char*&lt;/code>指针，是无法进行上述的相关运算的。&lt;/li>
&lt;/ol>
&lt;p>那为什么不直接在函数声明中定义为&lt;code>char *&lt;/code>型？
个人理解这个是接口声明的艺术。如果直接定义为&lt;code>char *&lt;/code>型，就提高了函数使用和理解的成本。具体使用什么指针交由运算时再确认是最优雅的。&lt;/p>
&lt;blockquote>
&lt;p>关于这段解释可以再参考：&lt;a href="https://blog.csdn.net/shanshanpt/article/details/8543955?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">指针和指针强制转换( 回忆版 )&amp;mdash;&amp;mdash;-让初学者理解_c/c++_shanshanpt的专栏-CSDN博客&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>UNIX网络编程学习笔记（二）</title><link>https://run.halfbit.top/post/unix-network-program-2/</link><pubDate>Mon, 11 May 2020 03:45:52 +0000</pubDate><guid>https://run.halfbit.top/post/unix-network-program-2/</guid><description>&lt;p>UNIX网络编程学习笔记（二）&lt;/p>
&lt;!-- more -->
&lt;h2 id="大纲">大纲&lt;/h2>
&lt;p>&lt;img src="https://run.halfbit.top/image/2020-05-11/%E7%AC%AC%E4%BA%8C%E7%AB%A0.png" alt="">&lt;/p>
&lt;h2 id="习题">习题&lt;/h2>
&lt;h3 id="21我们已经提到ipv4ip版本4和ipv6版本6ip版本5情况如何ip版本012和3又是什么">“2.1　我们已经提到IPv4（IP版本4）和IPv6（版本6）。IP版本5情况如何，IP版本0、1、2和3又是什么？”&lt;/h3>
&lt;p>参考：
&lt;a href="https://www.heficed.com/blog/ip-address-evolution-ipv4-vs-ipv6-has-ipv5-gone-missing">https://www.heficed.com/blog/ip-address-evolution-ipv4-vs-ipv6-has-ipv5-gone-missing&lt;/a>
&lt;a href="https://blog.alertlogic.com/blog/where-is-ipv1,-2,-3,and-5/">https://blog.alertlogic.com/blog/where-is-ipv1,-2,-3,and-5/&lt;/a>&lt;/p>
&lt;p>其余都是实验的或者被证明失败的版本，并未被正式推广&lt;/p>
&lt;h3 id="22-你从哪里可以找到有关ip版本5的信息">“2.2 你从哪里可以找到有关IP版本5的信息？”&lt;/h3>
&lt;p>IP版本5从未正式发布。参考：https://en.wikipedia.org/wiki/Internet_Stream_Protocol&lt;/p>
&lt;h3 id="23在讲解图2-15时我们说过如果没收到来自对端的mss选项本端tcp就采用536这个mss值为什么使用这个值">“2.3　在讲解图2-15时我们说过，如果没收到来自对端的MSS选项，本端TCP就采用536这个MSS值。为什么使用这个值？”&lt;/h3>
&lt;p>536 = （最小重组缓冲区大小576）- （TCP标准头 20）- （TCP标准头选项20）&lt;/p>
&lt;h3 id="24给在第1章中讲解的时间获取客户服务器应用画出类似于图2-5的分组交换过程假设服务器在单个tcp分节中返回26个字节的完整数据">“2.4　给在第1章中讲解的时间获取客户/服务器应用画出类似于图2-5的分组交换过程，假设服务器在单个TCP分节中返回26个字节的完整数据。”&lt;/h3>
&lt;p>本地通过第一章中的程序访问：128.138.140.44 交互报文如下：
&lt;img src="https://run.halfbit.top/image/2020-05-11/2020-05-13-01-47-29.jpg" alt="">
可以得出交互图如下
![](/image/2020-05-11/TCP-Based DateTime.png)
同时DayTime协议也支持UDP，这里就略过了。&lt;/p>
&lt;h3 id="25在一个以太网上的主机和一个令牌环网上的主机之间建立一个连接其中以太网上主机的tcp通告的mss为1460令牌环网上主机的tcp通告的mss为4096两个主机都没有实现路径mtu发现功能观察分组我们在两个相反方向上都找不到大于1460字节的数据为什么">“2.5　在一个以太网上的主机和一个令牌环网上的主机之间建立一个连接，其中以太网上主机的TCP通告的MSS为1460，令牌环网上主机的TCP通告的MSS为4096。两个主机都没有实现路径MTU发现功能。观察分组，我们在两个相反方向上都找不到大于1460字节的数据，为什么？”&lt;/h3>
&lt;p>我的理解是，若观察分组是从TCP报文分组的视角，是因为TCP报文需要基于IP报文的上限MSU拆分成不大于1460的数据报文段，才支持基于IP协议向下传递。&lt;/p>
&lt;h3 id="26在讲解图2-19时我们说过ospf直接使用ip承载ospf数据报的ipv4首部见图a-1的协议字段是什么值">“2.6　在讲解图2-19时我们说过OSPF直接使用IP。承载OSPF数据报的IPv4首部（见图A-1）的协议字段是什么值？”&lt;/h3>
&lt;p>可以参考IINA或者&lt;a href="https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers">维基页面&lt;/a>
给OSPF分配的协议号为89。
附OSPF报文的结构：
&lt;img src="https://run.halfbit.top/image/2020-05-11/2020-05-13-02-18-05.jpg" alt="">&lt;/p>
&lt;h3 id="27在讨论sctp输出时我们说过sctp发送端必须等待累积确认点超过已发送的数据才可以从套接字缓冲区中释放该数据假设某个选择性确认sack表明累积确认点之后的数据也得到了确认这样的数据为什么却不能被释放呢">“2.7　在讨论SCTP输出时我们说过，SCTP发送端必须等待累积确认点超过已发送的数据，才可以从套接字缓冲区中释放该数据。假设某个选择性确认（SACK）表明累积确认点之后的数据也得到了确认，这样的数据为什么却不能被释放呢？”&lt;/h3>
&lt;p>SCTP内容暂时忽略。&lt;/p></description></item><item><title>UNIX网络编程学习笔记（一）</title><link>https://run.halfbit.top/post/unix-network-program-1/</link><pubDate>Sun, 10 May 2020 18:41:48 +0000</pubDate><guid>https://run.halfbit.top/post/unix-network-program-1/</guid><description>&lt;p>UNIX网络编程学习笔记（一）&lt;/p>
&lt;!-- more -->
&lt;h2 id="大纲">大纲&lt;/h2>
&lt;p>&lt;img src="https://run.halfbit.top/image/2020-05-10/%E7%AC%AC%E4%B8%80%E7%AB%A0.png" alt="">&lt;/p>
&lt;h2 id="习题">习题&lt;/h2>
&lt;h3 id="11-按19节未尾的步骤找出你自己的网络拓扑的信息">1.1 “按1.9节未尾的步骤找出你自己的网络拓扑的信息”&lt;/h3>
&lt;p>主要包含两个基本命令：netstat和ifconfig
netstat -i提供网络接口的信息。我们还指定-n标志以输出数值地址，而不是试图把它们反向解析成名字。
可以看到本机是支持IPV6协议的。
&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-18-52-06.jpg" alt="">&lt;/p>
&lt;p>netstat –r展示路由表：
&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-18-52-35.jpg" alt="">&lt;/p>
&lt;p>执行ifconfig就可获得每个接口的详细信息
&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-18-54-31.jpg" alt="">&lt;/p>
&lt;p>通过Ping命令找出本地网络中众多主机的IP地址，ping -b在mac环境下是不被支持的&lt;/p>
&lt;blockquote>
&lt;p>Flood pinging is not recommended in general, and flood pinging the broadcast address should only be done under very controlled conditions.&lt;/p>
&lt;/blockquote>
&lt;h3 id="12-获取本书示例的源代码见前言编译并测试图1-5所示的tcp时间获取客户程序运行这个程序若干次每次以不同ip地址作为命令行参数">1.2 “获取本书示例的源代码（见前言），编译并测试图1-5所示的TCP时间获取客户程序。运行这个程序若干次，每次以不同IP地址作为命令行参数。”&lt;/h3>
&lt;p>首先要找到一个支持DAYTIME协议的服务器地址：
&lt;a href="https://zh.wikipedia.org/wiki/DAYTIME%E5%8D%94%E5%AE%9A">WIKI DAYTIME协议&lt;/a>
&lt;a href="https://tf.nist.gov/tf-cgi/servers.cgi#">服务器列表&lt;/a>
随机选择一个进行访问：
&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-19-25-28.jpg" alt="">&lt;/p>
&lt;h3 id="13把图1-5中的socket的第一参数改为9999编译并运行这个程序结果如何找出对应于所输出出错的errno值你如何可以找到关于这个错误的更多信息">“1.3　把图1-5中的socket的第一参数改为9999。编译并运行这个程序。结果如何？找出对应于所输出出错的errno值。你如何可以找到关于这个错误的更多信息？”&lt;/h3>
&lt;p>在Mac环境下编译是成功的，因为在Mac的c语言SDK中，第一个参数是整形。
&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-19-29-27.jpg" alt="">&lt;/p>
&lt;h3 id="14修改图1-5中的while循环加入一个计数器累计read返回大于零值的次数在终止前输出这个计数器值编译并运行你的新客户程序">“1.4　修改图1-5中的while循环，加入一个计数器，累计read返回大于零值的次数。在终止前输出这个计数器值。编译并运行你的新客户程序。”&lt;/h3>
&lt;p>&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-19-36-58.jpg" alt="">&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-19-37-12.jpg" alt="">&lt;/p>
&lt;p>这里需要深入思考的是，为什么可以一次就得到返回。
字符串：&lt;code>58979 20-05-10 11:36:16 50 0 0 857.5 UTC(NIST) *&lt;/code>共计包含50个字符（算上末尾的换行符&lt;code>\r\n&lt;/code>）
在ASCII规范中，一个字符包含一个字节。
结合一下MTU和MSS的定义，单次TCP传输可以容纳50个字符，所以一次就可以得到返回。当然这不是必定的。&lt;/p>
&lt;h4 id="mtu最大传输单元">MTU（最大传输单元）&lt;/h4>
&lt;p>MTU前面已经说过了，是链路层中的网络对数据帧的一个限制，依然以以太网为例，MTU为1500个字节。一个IP数据报在以太网中传输，如果它的长度大于该MTU值，就要进行分片传输，使得每片数据报的长度小于MTU。分片传输的IP数据报不一定按序到达，但IP首部中的信息能让这些数据报片按序组装。IP数据报的分片与重组是在网络层进完成的。&lt;/p>
&lt;h4 id="mss最大分段大小">MSS（最大分段大小）&lt;/h4>
&lt;p>MSS是TCP里的一个概念（首部的选项字段中）。MSS是TCP数据包每次能够传输的最大数据分段，TCP报文段的长度大于MSS时，要进行分段传输。TCP协议在建立连接的时候通常要协商双方的MSS值，每一方都有用于通告它期望接收的MSS选项（MSS选项只出现在SYN报文段中，即TCP三次握手的前两次）。MSS的值一般为MTU值减去两个首部大小（需要减去IP数据包包头的大小20Bytes和TCP数据段的包头20Bytes）所以如果用链路层以太网，MSS的值往往为1460。&lt;/p>
&lt;h3 id="15按下述步骤修改图1-9中的程序首先把赋于sin_port的端口号从13改为9999然后把write的单一调用改为循环调用每次写出结果字符串的一个字节编译修改后的服务器程序并在后台启动执行接着修改前一道习题中的客户程序它在终止前输出计数器值把赋于sin_port的端口号从13改为9999启动这个客户程序指定运行修改后的服务器程序的主机的ip地址作为命令行参数客户程序计数器的输出值是多少如果可能在不同主机上运行这个客户与服务器程序">“1.5　按下述步骤修改图1-9中的程序。首先，把赋于sin_port的端口号从13改为9999。然后，把write的单一调用改为循环调用，每次写出结果字符串的一个字节。编译修改后的服务器程序并在后台启动执行。接着修改前一道习题中的客户程序（它在终止前输出计数器值），把赋于sin_port的端口号从13改为9999。启动这个客户程序，指定运行修改后的服务器程序的主机的IP地址作为命令行参数。客户程序计数器的输出值是多少？如果可能，在不同主机上运行这个客户与服务器程序。”&lt;/h3>
&lt;p>这道题目的意义不明，9999端口并非规范，链接得到超时异常提示：
&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-19-54-37.jpg" alt="">
&lt;img src="https://run.halfbit.top/image/2020-05-10/2020-05-10-19-54-46.jpg" alt="">&lt;/p></description></item><item><title>归来吧，少年</title><link>https://run.halfbit.top/post/took-me-four-years-to-find/</link><pubDate>Fri, 14 Sep 2018 21:33:36 +0000</pubDate><guid>https://run.halfbit.top/post/took-me-four-years-to-find/</guid><description>&lt;p>写在离开卖好车，进入菜鸟，工作满4周年，刚过完27岁生日之际。&lt;/p>
&lt;!-- more -->
&lt;p>最近的两年时间里面，时常感觉到迷茫和恐慌。&lt;/p>
&lt;p>V站上，公众号的软文中，随处可见的是&lt;strong>焦虑&lt;/strong>。大家在焦虑些什么，我在焦虑些什么。&lt;/p>
&lt;p>思来想去，总也想不明白，所以总有一种发自内心的恐惧。对于未知的恐惧。&lt;/p>
&lt;p>因而就有了种种逃避恐惧的方法。&lt;/p>
&lt;p>会买很多书，堆在书柜上，可能新鲜的时候翻开两页，然后就一直放着。仿佛买书这个举动填充了什么。&lt;/p>
&lt;p>常常参加很多线下聚会，技术交流，融入在人群中，听着别人精心准备的PPT，不需要我来发言，让我感觉很安全。&lt;/p>
&lt;p>工作的时候，总是渴望别人来告诉我，我要做什么，越详细越好，让我感觉到安全。&lt;/p>
&lt;p>了解很多科技资讯，追逐着社区最热，最新的产出，点下start，读完readme，或者跑完quickstart，仿佛给自己注入了生机。&lt;/p>
&lt;p>我花了这么长时间，究竟在追寻什么？&lt;/p>
&lt;p>花了四年时间写代码，练就了什么，失去了什么。&lt;/p>
&lt;p>我学会了最快地搭建出一个网站，一眼看出代码运作的轨迹，热门的开发框架如数家珍。&lt;/p>
&lt;p>但是现在的我，却依然如何不知道定义一个问题的复杂度，以怎样的时间空间效率来解决问题。&lt;/p>
&lt;p>然后我会回想起我的求学时光。
小的时候，我家里的是开书店的，我爸给我买了很多作文书。小学，初中，高中，我的作文作业都是从各个文章里面拼凑出来的，所以我的作文总是班级上最好的，每次都被老师当众朗读，然后张贴在墙壁上。这种轻而易举的胜利，塑就了我至今以来的学习模型。而这个模型，在我漫长的应试教育生.涯中，屡战屡胜，高歌猛进。然而滑铁卢也如期而至，在大学一次又一次的考前突击中溃不成军。我的数学和物理，总是在考试中取得很好的成绩，但是在各类竞赛中铩羽而归。考题总是有规律可循，可以被练习，但是竞赛却最考验真正的理解。现在回头看去，我曾经取得过的成绩，都那样肤浅。勤能补拙，然而我的勤奋却用错了地方。&lt;/p>
&lt;p>我如此热衷于对已经熟悉的内容反复发挥，却往往逃避从构成的原理去理解这个世界。&lt;/p>
&lt;p>术？道？&lt;/p>
&lt;p>从最功利的角度做到熟练很简单，但是一旦看透了本质，想必一定是另外一个层次。&lt;/p>
&lt;p>这就是我过去27年犯下的最致命的错误。&lt;/p>
&lt;p>我即将用剩下的72年，甚至更多，来修正这个错误。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-09-14/2018-09-15-01-39-58.jpg" alt="">&lt;/p></description></item><item><title>初识区块链</title><link>https://run.halfbit.top/post/beginning-blockchain/</link><pubDate>Wed, 15 Aug 2018 10:31:31 +0000</pubDate><guid>https://run.halfbit.top/post/beginning-blockchain/</guid><description>&lt;p>初识区块链。&lt;/p>
&lt;!-- more -->
&lt;h2 id="为何关注区块链">为何关注区块链？&lt;/h2>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/X38YbpdMGF5svtghwwBI0Q">我是怎么入坑的 朱赟&lt;/a>
&lt;a href="https://time.geekbang.org/column/article/12458">区块链技术人才现状：供给严重不足&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>我对区块链的评价是这样的，一场乌托邦实验，从最终来看，所谓革命不过是一厢情愿。
但是，但是即便是乌托邦实验，时间窗口也可以维持足够长，想想德国人的某某主义都一百多年了还有人信不是吗，所以，至少十年，甚至更长，这个产业的饭碗是有的。 &amp;ndash; CaoZ&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>正经的笼统介绍：&lt;/p>
&lt;ol>
&lt;li>区块链实现了了无需依赖可信第三方的点对点价值交换。&lt;/li>
&lt;li>分布式，去中心化和开放的账本，账本的数据同时分布在多个节点上。&lt;/li>
&lt;li>账本数据只能添加，不能修改。每个交易一旦发生即被持久地保存到所有节点上。&lt;/li>
&lt;li>无需可信的第三方来保障交易的有效性，安全性以及最终交易的最终确认。&lt;/li>
&lt;li>与其他以太网应用共存。&lt;/li>
&lt;li>正如TCP/IP协议被设计为创造开放的互联网环境，区块链被设计为创造去中心化的信任环境。&lt;/li>
&lt;/ol>
&lt;p>一个典型的区块链如图：
&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-22-11-26.jpg" alt="">&lt;/p>
&lt;p>一个极简的区块链实现：&lt;a href="https://github.com/Jeiwan/blockchain_go">blockchain_go&lt;/a>&lt;/p>
&lt;h2 id="区块链核心技术">区块链核心技术&lt;/h2>
&lt;p>&lt;strong>区块链并非是一种颠覆式技术，而是多种技术的集成式创新&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-22-43-47.jpg" alt="">&lt;/p>
&lt;p>类比TCP/IP协议的分层架构设计，不同区块链的设计一般也包含以下层次：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-22-26-15.jpg" alt="">&lt;/p>
&lt;hr>
&lt;p>一个中心化的系统：&lt;/p>
&lt;p>![](/image/2018-08-15/Beginning Blockchain 2018-08-15 22-23-53.png)&lt;/p>
&lt;p>一个去中心化的系统：
&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-22-24-47.jpg" alt="">&lt;/p>
&lt;h3 id="密码学">密码学&lt;/h3>
&lt;p>区块链主要借助密码学提供的几个特性：&lt;/p>
&lt;ul>
&lt;li>保密性（Confidentiality）&lt;/li>
&lt;li>完整性（Data Integrity）&lt;/li>
&lt;li>身份认证（Authentication）&lt;/li>
&lt;li>不可否认性（Non-repudiation）&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>想象一个场景，我给文拓寄出了一个顺丰快递，我如何保障这个快递没有被别人获知内容，而且内容没有被掉包？文拓又如何确认这是我寄出的包裹？如果我否认寄出过这个包裹，他如何举证？&lt;/p>
&lt;/blockquote>
&lt;h4 id="对称加密可靠信道">对称加密：可靠信道&lt;/h4>
&lt;p>常用实现：AES&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-09-03.jpg" alt="">&lt;/p>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>密钥需要通过可靠信道预先协商&lt;/li>
&lt;li>发送方和接收方必须都是诚实可信的&lt;/li>
&lt;li>在一个多节点网络中，实现安全通信需要n(n–1)/2数量的密钥&lt;/li>
&lt;/ul>
&lt;h4 id="非对称加密公钥公开">非对称加密：公钥公开&lt;/h4>
&lt;p>常用实现：RSA&lt;/p>
&lt;ul>
&lt;li>公钥公开，所有人都可以获取，用于内容加密或者验签&lt;/li>
&lt;li>私钥需要妥善保管，用于内容解密或者创建签名&lt;/li>
&lt;/ul>
&lt;h5 id="公钥加密的场景加密通信">公钥加密的场景：加密通信&lt;/h5>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-05-12.jpg" alt="">&lt;/p>
&lt;h5 id="私钥加密的场景身份认证">私钥加密的场景：身份认证&lt;/h5>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-05-23.jpg" alt="">&lt;/p>
&lt;p>在多节点加密通信中需要的密钥数量对比：
&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-15-42.jpg" alt="">&lt;/p>
&lt;h4 id="hash">HASH&lt;/h4>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-17-57.jpg" alt="">
常用实现：HMACs，SHA512&lt;/p>
&lt;ul>
&lt;li>校验数据完整性&lt;/li>
&lt;li>建立索引&lt;/li>
&lt;li>可重放&lt;/li>
&lt;li>不可逆&lt;/li>
&lt;/ul>
&lt;h4 id="应用计算机通信领域的https加密通道设计">应用：计算机通信领域的HTTPS加密通道设计&lt;/h4>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-00-20.jpg" alt="">&lt;/p>
&lt;h4 id="区块链应用">区块链应用&lt;/h4>
&lt;h5 id="身份认证">身份认证&lt;/h5>
&lt;p>Bitcoin通过独有的一对非对称密钥来表明身份。公钥用于收款，私钥用于花钱。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-28-16.jpg" alt="">&lt;/p>
&lt;p>Bitcoin钱包地址生成策略：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-24-05.jpg" alt="">&lt;/p>
&lt;p>一个典型的以太坊发起交易的代码示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">tx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">from&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;0xb31FCEF59493cd3f39a41A311Df42AaDd7a5079e&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">gasPricde&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;2000000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">gas&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;42000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 使用公钥作为目标地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">to&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;0x8D08b0bBE8B3Aab4aE4B00eB15fE53C442f9DE47&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;500000000000000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// 使用私钥签署交易
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">web3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">eth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">accounts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">signTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;0x81adb7a5b3df9eb15221610954cb3c8e626556afd0fb466b8a6335aa561bbdbe&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">signedTx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">web3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">eth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendSignedTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">signedTx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rawTransaction&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="数据校验交易查找">数据校验，交易查找&lt;/h5>
&lt;p>UTXO的HASH作为交易的起点：（transaction input中）
&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-36-42.jpg" alt="">&lt;/p>
&lt;p>一个Bitcoin上的交易如：&lt;a href="https://blockchain.info/tx/b657e22827039461a9493ede7bdf55b01579254c1630b0bfc9185ec564fc05ab?format=json">举个栗子&lt;/a>&lt;/p>
&lt;p>Block的HASH指向上一个Block：（block header中）
&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-45-25.jpg" alt="">&lt;/p>
&lt;p>Merkle Trees通过HASH确保Block中的每个交易都不可被篡改：
&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-15-23-50-19.jpg" alt="">&lt;/p>
&lt;h3 id="分布式共识">分布式共识&lt;/h3>
&lt;p>之前写过两篇相关的文章：&lt;a href="https://suclogger.me/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D">分布式系统设计迷思&lt;/a> 和 &lt;a href="https://suclogger.me/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D%EF%BC%88%E4%BA%8C%EF%BC%89">分布式系统设计迷思（二）&lt;/a> ，感兴趣的童鞋可以看看。&lt;/p>
&lt;p>Paxos协议可以完美的解决在一个&lt;strong>可信环境&lt;/strong>中的共识问题。
然而区块链技术本身就是要实现一个分布式的信任机制，显然采用Paxos是个循环证明。如何达成&lt;code>共识&lt;/code>的命题在这样一个分布式的，缺乏信任（相对于有可信第三方做中间人）的环境中显得尤为重要，因为随时有敌人或者竞争对手试图篡改你的数据，因而我们每当要将一个区块持久化之前，必须要一个适当的机制来进行校验。&lt;strong>共识是商定确定性交易顺序和过滤无效交易的过程。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>在古代，一些拜占庭的将军率领他们的部队要攻占敌人的一个城池, 每个将军只能控制他们自己的部队并且通过信使传递消息给其他的将军(这条消息只有参与的两个将军知道，其他的将军可以打听，但是不能验证消息的正确性)。如果这些将军中有些是来自敌方的奸细，那么如何使忠诚的将军仍然可以达成行动协议而不受奸细的挑拨，就是拜占庭将军问题。分布式系统的每一个节点可以类比成将军，服务器之间的消息传递可以类比成信使，服务器可能会发生错误而产生错误的信息传达给其他服务器。因此拜占庭容错系统是指：在一个拥有n台服务器的系统中，整个系统对于每一个请求需满足以下两个条件：&lt;/p>
&lt;ol>
&lt;li>所有非拜占庭服务器使用相同的输入信息，产生一致的结果；&lt;/li>
&lt;li>如果输入的信息正确，那么所有非拜占庭服务器必须接受这个信息，并计算相应的结果。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>在一个拜占庭容错系统下达成共识一般有以下方法：&lt;/p>
&lt;ol>
&lt;li>PBFT（the practical byzantine fault tolerance algorithm）&lt;/li>
&lt;li>PoW（the proof-of-work algorithm）&lt;/li>
&lt;li>PoS（the proof-of-stake algorithm）&lt;/li>
&lt;li>DPoS（the delegated proof-of-stake algorithm）&lt;/li>
&lt;/ol>
&lt;h4 id="pbft">PBFT&lt;/h4>
&lt;p>采用PBFT作为共识机制的区块链实现有：Ripple，Hyperledger，Stellar等。
简而言之，PBFT在每一轮中，每个将军基于自己的判断做出决定，收到别的将军的决定后，与自己的决定做某些比较和计算，两两交互之后可以在一定数量叛徒的情况下得出正确共识（3f+1个节点可以容忍拜占庭服务器不超过f个）&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-16-01-19-04.jpg" alt="">&lt;/p>
&lt;p>这是几种方法中代价最小的一种方法 ，但是他要求每个参与者对他的表决签名，因而牺牲了参与者的匿名性。&lt;/p>
&lt;h4 id="pow">PoW&lt;/h4>
&lt;p>这个恐怕是最有名的共识方法了，也是Bitcoin采用的共识方法。工作量证明的关键特点就是，分布式系统中的请求服务的节点必须解决一个一般难度但是可行（feasible）的问题，但是验证问题答案的过程对于服务提供者来说却非常容易，也就是一个不容易解答但是容易验证的问题。
PoW基于Hash的不可逆特性（想要通过 SHA-256 函数的输出推断出输入在目前来看可能性是可以忽略不计的），允许参与者提交自己的计算结果（Nonce），成功提交正确计算结果（Nonce）的节点会得到奖励，因为他确实付出了相应的计算资源。由于Hash函数的特性，获取Nonce除了遍历别无他法，这个遍历Nonce计算满足难度目标的过程就被成为挖矿。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-16-01-32-58.jpg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>为什么可以避免成果被窃取？&lt;/p>
&lt;/blockquote>
&lt;p>由于工作量证明需要消耗大量的算力，同时比特币大约 10min 才会产生一个区块，区块的大小也只有 1MB，仅仅能够包含 3、4000 笔交易，平均下来每秒只能够处理 5~7（个位数）笔交易，所以比特币网络的拥堵状况非常严重，也催生了Off-Chain计算和Lightning Network等概念。&lt;/p>
&lt;h4 id="pos">PoS&lt;/h4>
&lt;p>PoS用一个数字签名代替了PoW中的hash函数，这个数字签名代表对应的担保资产。即用已有的币挖矿。
简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明POS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个POS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0.05个币的利息(假定利息可理解为年利率5%)，那么在这个案例中，利息 = 3000 * 5% / 365 = 0.41个币。
与工作量证明相比，权益证明不需要消耗大量的电力就能够保证区块链网络的安全性，同时也不需要在每个区块中创建新的货币来激励矿工参与当前网络的运行，这也就在一定程度上缩短了达成共识所需要的时间。
由于整个网络只会奖励创建区块的节点，不存在任何惩罚，即便是诚实节点，如果它足够理性，那么它也会在所有它收到的链上同时挖矿。POW里，没人挖的分支很快就会变成孤块被丢弃，但在POS里，如果整个网络足够理性，会出现的情况反而是每条分支都会永远存在因为理性的矿工会同时在所有分支上挖矿。如果只用最长链共识的话，POS本身是没法应对分叉的，必须通过惩罚。总而言之就是通过算法之外的事情解决这个问题，引入激励和惩罚。&lt;/p>
&lt;p>更多资料参考：&lt;a href="https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQs">Proof of Stake FAQs&lt;/a>&lt;/p>
&lt;h4 id="dpos">DPoS&lt;/h4>
&lt;p>在DPoS中，每个节点都可以投票选出自己的代理节点参与生成新区块的争夺，得票最多的前 N 个节点会被选择成为区块的创建者，下一个区块的创建者就会从这样一组当选者中随机选取。这就避免了PoS中拥有少数资产的节点没有话语权的问题，而且网络中进行新区块创建争夺的节点越少，网络的处理能力就会越强，性能就会越快。使用委托权益证明的 EOS 能够每秒处理几十万笔交易。缺乏严谨的数学证明。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-16-02-17-49.jpg" alt="">&lt;/p>
&lt;p>更多资料参考：&lt;a href="https://steemit.com/dpos/@legendx/dpos">DPOS共识算法 &amp;ndash; 缺失的白皮书&lt;/a>&lt;/p>
&lt;h2 id="不仅仅是加密货币智能合约">不仅仅是加密货币：智能合约&lt;/h2>
&lt;p>智能合约：在区块链中，正如所有账本数据是分布式，公开且不可篡改，部署在区块链上的代码片段也有同样的特性，称之为智能合约。区别于传统应用，基于智能合约的DApps无需托管在服务器上，而是以交易Payload的形式存在于区块链网络的所有节点上。&lt;/p>
&lt;p>Bitcoin区块中的&lt;code>ScriptSig&lt;/code>和&lt;code>ScriptPubKey&lt;/code>是一个初始形态的智能合约，不提供图灵完备的实现。
而以太坊的Ethereum Virtual Machine（EVM）提供的图灵完备的实现使得我们可以在智能合约中做几乎任何事情。
&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-16-13-44-27.jpg" alt="">&lt;/p>
&lt;p>以太坊为驱动区块链链的矿工执行智能合约并防御拒绝服务攻击设计了gas Price机制，而且不同于Bitcoin的一切皆交易，以太坊的账户是有状态的（stateful）。不论是发布合约还是执行合约，都需要付出相应的Ether作为代价。&lt;/p>
&lt;h2 id="基于以太坊开发一个简单的dapp选举">基于以太坊开发一个简单的DApp：选举&lt;/h2>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-16-13-53-51.jpg" alt="">&lt;/p>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;ol>
&lt;li>准备node环境&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">brew install node
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>安装Truffle&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">npm install -g truffle
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>安装Ganache&lt;/li>
&lt;/ol>
&lt;p>从&lt;a href="https://truffleframework.com/ganache">ganache官网&lt;/a>下载安装包安装&lt;/p>
&lt;ol start="4">
&lt;li>安装chrome扩展：Meta-Mask&lt;/li>
&lt;/ol>
&lt;h3 id="coding">Coding&lt;/h3>
&lt;h4 id="1-初始化示例项目pet-shop">1. 初始化示例项目pet-shop&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">truffle unbox pet-shop
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>初始化后包含以下目录结构：
&lt;code>contracts/&lt;/code> 智能合约的文件夹，所有的智能合约文件都放置在这里，里面包含一个重要的合约Migrations.sol
&lt;code>migrations/&lt;/code> 用来处理部署（迁移）智能合约 ，迁移是一个额外特别的合约用来保存合约的变化。
&lt;code>test/&lt;/code> 智能合约测试用例文件夹
&lt;code>truffle.js/&lt;/code> 配置文件&lt;/p>
&lt;h4 id="2-编写智能合约">2. 编写智能合约&lt;/h4>
&lt;p>在&lt;code>contracts&lt;/code>目录下添加&lt;code>Election.sol&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-solidity" data-lang="solidity">&lt;span class="k">pragma solidity&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">contract&lt;/span> &lt;span class="nc">Election&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Model a Candidate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="nc">Candidate&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">uint&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">string&lt;/span> &lt;span class="nb">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">uint&lt;/span> &lt;span class="n">voteCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Store accounts that have voted
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">mapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">address&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">voters&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Store Candidates
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Fetch Candidate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">mapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">Candidate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">candidates&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Store Candidates Count
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">uint&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">candidatesCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nf">Election&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">addCandidate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Candidate 1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">addCandidate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Candidate 2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nf">addCandidate&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span> &lt;span class="n">_name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">private&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">candidatesCount&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">candidates&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">candidatesCount&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Candidate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">candidatesCount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nf">vote&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">uint&lt;/span> &lt;span class="n">_candidateId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// require that they haven&amp;#39;t voted before
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">voters&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nb">sender&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="c1">// require a valid candidate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_candidateId&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">_candidateId&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">candidatesCount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// record that voter has voted
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">voters&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nb">sender&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// update candidate vote Count
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">candidates&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">_candidateId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">voteCount&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="3-编译和准备部署脚本">3. 编译和准备部署脚本&lt;/h4>
&lt;p>通过以下命令编译：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">truffle compile
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;code>migrations&lt;/code>目录下添加migrate脚本&lt;code>2_deploy_contracts.js&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">Election&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">artifacts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./Election.sol&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">deployer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">deployer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deploy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Election&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="4-创建用户接口和智能合约交互">4. 创建用户接口和智能合约交互&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">App&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">web3Provider&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">contracts&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nx">account&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;0x0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">hasVoted&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">init&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">initWeb3&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">initWeb3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// TODO: refactor conditional
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">web3&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;undefined&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// If a web3 instance is already provided by Meta Mask.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">web3Provider&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">web3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">currentProvider&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">web3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Web3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">web3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">currentProvider&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Specify default instance if no web3 instance provided
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">web3Provider&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Web3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">providers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HttpProvider&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:7545&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">web3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Web3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">web3Provider&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">initContract&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">initContract&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getJSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Election.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">election&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Instantiate a new truffle contract from the artifact
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">contracts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Election&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">TruffleContract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">election&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Connect provider to interact with contract
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">contracts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Election&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setProvider&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">web3Provider&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">electionInstance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#loader&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#content&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">loader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">show&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hide&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Load account data
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">web3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">eth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getCoinbase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">account&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">account&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#accountAddress&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">html&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Your Account: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">account&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// Load contract data
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">contracts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Election&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deployed&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">electionInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">electionInstance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">candidatesCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">candidatesCount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">candidatesResults&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#candidatesResults&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">candidatesResults&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">empty&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">candidatesSelect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#candidatesSelect&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">candidatesSelect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">empty&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">candidatesCount&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">electionInstance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">candidates&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">candidate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">candidate&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">candidate&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">voteCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">candidate&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Render candidate Result
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">candidateTemplate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">voteCount&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">candidatesResults&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">candidateTemplate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Render candidate ballot option
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">candidateOption&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;option value=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39; &amp;gt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/ option&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">candidatesSelect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">candidateOption&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">electionInstance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">voters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">account&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hasVoted&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Do not allow a user to vote
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hasVoted&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;form&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">hide&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">loader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hide&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">show&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}).&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">castVote&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">candidateId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#candidatesSelect&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">contracts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Election&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deployed&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">candidateId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">from&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">account&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">}).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Wait for votes to update
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#content&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">hide&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#loader&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">show&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}).&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;IE=edge&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Election Results&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Bootstrap --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;css/bootstrap.min.css&amp;#34;&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- WARNING: Respond.js doesn&amp;#39;t work if you view the page via file:// --&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!--[if lt IE 9]&amp;gt;
&lt;/span>&lt;span class="c"> &amp;lt;script src=&amp;#34;https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span>&lt;span class="c"> &amp;lt;script src=&amp;#34;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span>&lt;span class="c"> &amp;lt;![endif]--&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width: 650px;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col-lg-12&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text-center&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Election Results&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">hr&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;loader&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text-center&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Loading...&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;content&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;display: none;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">table&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;table&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">thead&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>#&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Name&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Votes&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">thead&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tbody&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;candidatesResults&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tbody&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">table&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">hr&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">onSubmit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;App.castVote(); return false;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-group&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">label&lt;/span> &lt;span class="na">for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;candidatesSelect&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Select Candidate&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">select&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;candidatesSelect&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">select&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;submit&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;btn btn-primary&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Vote&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">hr&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;accountAddress&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text-center&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- jQuery (necessary for Bootstrap&amp;#39;s JavaScript plugins) --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Include all compiled plugins (below), or include individual files as needed --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;js/bootstrap.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;js/web3.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;js/truffle-contract.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;js/app.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="5-部署合约运行用户界面">5. 部署合约，运行用户界面&lt;/h4>
&lt;p>通过truffle提供的migrate 命令部署合约：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">truffle migrate
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行node server：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">npm run dev
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://git.dawanju.net/pufang/election">election&lt;/a>&lt;/p>
&lt;h2 id="推荐阅读">推荐阅读&lt;/h2>
&lt;p>&lt;a href="https://github.com/bitcoinbook/bitcoinbook">Mastering Bitcoin&lt;/a>
&lt;a href="https://bitcoin.org/bitcoin.pdf">Bitcoin 白皮书&lt;/a>
&lt;a href="https://trustsql.qq.com/chain_oss/TrustSQL_WhitePaper.html">腾讯区块链方案白皮书&lt;/a>
区块链核心技术与应用&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;blockquote>
&lt;p>原则没变啊，不支持发币，不给发币的站台，坚决不碰ico。 &amp;ndash;CaoZ&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://medium.com/@sbmeunier/when-do-you-need-blockchain-decision-models-a5c40e7c9ba1">When do you need blockchain&lt;/a>
&lt;img src="https://run.halfbit.top/image/2018-08-15/2018-08-16-14-03-52.jpg" alt="">&lt;/p></description></item><item><title>从锁死的RUNNABLE线程谈UNIX的I/O模型</title><link>https://run.halfbit.top/post/a-not-running-runnable/</link><pubDate>Wed, 13 Jun 2018 09:48:16 +0000</pubDate><guid>https://run.halfbit.top/post/a-not-running-runnable/</guid><description>&lt;p>记录一下JAVA IO库（java version &amp;ldquo;1.8.0_131&amp;rdquo;）的一个坑。&lt;/p>
&lt;!-- more -->
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>背景是一个爬虫，实际执行网络请求是通过共用一个固定核心线程数的线程池（FixedThreadPool）做下载操作，但是每次运行一段时间后，线程池就被僵尸进程塞满了，表现为新提交到线程池的下载操作都无法被执行。&lt;/p>
&lt;h2 id="排查">排查&lt;/h2>
&lt;p>问题是线程池中的线程僵死，很明显要dump出应用的栈信息来分析一下，一般通过jdk的&lt;code>jstack&lt;/code>工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">jstack -l &amp;lt;应用进程号&amp;gt; &amp;gt;&amp;gt; /path/jstack.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>jstack输出内容的分析可以参考&lt;a href="https://blog.csdn.net/fred_lzy/article/details/53064673">
怎么分析线程栈&lt;/a>，这里就不赘述。&lt;/p>
&lt;p>机械化的操作可以通过高效的工具来完成，直接将输出文件提交到在线堆栈分析的&lt;a href="http://fastthread.io/">fastthread&lt;/a>&lt;/p>
&lt;p>各个线程的状态如下：&lt;/p>
&lt;p>&lt;img src="./image/2018-06-13/2018-06-13-23-59-53.jpg" alt="">&lt;/p>
&lt;p>其中&lt;code>download&lt;/code>ThreadGroup即为我的下载线程池，可以看到其中8个核心线程都是&lt;code>RUNNABLE&lt;/code>状态。&lt;/p>
&lt;blockquote>
&lt;p>Runnable：一般指该线程正在执行状态中，该线程占用了资源，正在处理某个请求&lt;/p>
&lt;/blockquote>
&lt;p>一个HTTP请求，要么请求成功，要么请求失败，要么超时，为什么会停留在&lt;code>RUNNABLE&lt;/code>状态僵死呢？
查看堆栈详情如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">download-thread - priority:5 - threadId:0x00007fa7bc003800 - nativeId:0x42c4 - state:RUNNABLE
stackTrace:
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
at java.net.SocketInputStream.read(SocketInputStream.java:171)
at java.net.SocketInputStream.read(SocketInputStream.java:141)
at sun.security.ssl.InputRecord.readFully(InputRecord.java:465)
at sun.security.ssl.InputRecord.read(InputRecord.java:503)
at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:983)
- locked &amp;lt;0x00000000c81da728&amp;gt; (a java.lang.Object)
at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:940)
at sun.security.ssl.AppInputStream.read(AppInputStream.java:105)
- locked &amp;lt;0x00000000c81f73c8&amp;gt; (a sun.security.ssl.AppInputStream)
at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:137)
at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:153)
at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:282)
at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:138)
at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)
at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)
at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:163)
at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:165)
at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)
at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)
at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:272)
at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:111)
at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
...
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
Locked ownable synchronizers:
- &amp;lt;0x00000000c6e6fb08&amp;gt; (a java.util.concurrent.ThreadPoolExecutor$Worker)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到这8个线程都是阻塞在了&lt;code>socketRead0&lt;/code>方法上。
&lt;code>socketRead0&lt;/code>是jdk提供的native方法，方法签名为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Reads into an array of bytes at the specified offset using
&lt;/span>&lt;span class="cm"> * the received socket primitive.
&lt;/span>&lt;span class="cm"> * @param fd the FileDescriptor
&lt;/span>&lt;span class="cm"> * @param b the buffer into which the data is read
&lt;/span>&lt;span class="cm"> * @param off the start offset of the data
&lt;/span>&lt;span class="cm"> * @param len the maximum number of bytes read
&lt;/span>&lt;span class="cm"> * @param timeout the read timeout in ms
&lt;/span>&lt;span class="cm"> * @return the actual number of bytes read, -1 is
&lt;/span>&lt;span class="cm"> * returned when the end of the stream is reached.
&lt;/span>&lt;span class="cm"> * @exception IOException If an I/O error has occurred.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">native&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">socketRead0&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FileDescriptor&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">byte&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">off&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>具体查看jdk中的实现细节（SocketInputStream.c）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">JNIEXPORT&lt;/span> &lt;span class="n">jint&lt;/span> &lt;span class="n">JNICALL&lt;/span>
&lt;span class="nf">Java_java_net_SocketInputStream_socketRead0&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JNIEnv&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jobject&lt;/span> &lt;span class="n">this&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">jobject&lt;/span> &lt;span class="n">fdObj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">jint&lt;/span> &lt;span class="n">off&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jint&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jint&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="p">..&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">nread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NET_Timeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="n">nread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NET_Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bufP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果设置了超时时间，具体调用的是&lt;code>NET_Timeout&lt;/code>方法，位于&lt;code>aix_close.c&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">NET_Timeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="n">rv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">poll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>直接调用了&lt;code>poll&lt;/code>函数。&lt;/p>
&lt;blockquote>
&lt;p>poll提供的功能与select类似，不过在处理流设备时，它能够提供额外的信息。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>poll&lt;/code>函数在&lt;code>POLLIN&lt;/code>和&lt;code>POLLERR&lt;/code>时返回，分别指代&lt;code>普通或优先级带数据可读&lt;/code>和&lt;code>发生错误&lt;/code>的情况。
如果是可读，调用&lt;code>NET_Read&lt;/code>方法阻塞读取：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">NET_Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">BLOCKING_IO_RETURN_INT&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cm">/************** Basic I/O operations here ***************/&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * Macro to perform a blocking IO operation. Restarts
&lt;/span>&lt;span class="cm"> * automatically if interrupted by signal (other than
&lt;/span>&lt;span class="cm"> * our wakeup signal)
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="cp">#define BLOCKING_IO_RETURN_INT(FD, FUNC) { \
&lt;/span>&lt;span class="cp"> int ret; \
&lt;/span>&lt;span class="cp"> threadEntry_t self; \
&lt;/span>&lt;span class="cp"> fdEntry_t *fdEntry = getFdEntry(FD); \
&lt;/span>&lt;span class="cp"> if (fdEntry == NULL) { \
&lt;/span>&lt;span class="cp"> errno = EBADF; \
&lt;/span>&lt;span class="cp"> return -1; \
&lt;/span>&lt;span class="cp"> } \
&lt;/span>&lt;span class="cp"> do { \
&lt;/span>&lt;span class="cp"> startOp(fdEntry, &amp;amp;self); \
&lt;/span>&lt;span class="cp"> ret = FUNC; \
&lt;/span>&lt;span class="cp"> endOp(fdEntry, &amp;amp;self); \
&lt;/span>&lt;span class="cp"> } while (ret == -1 &amp;amp;&amp;amp; errno == EINTR); \
&lt;/span>&lt;span class="cp"> return ret; \
&lt;/span>&lt;span class="cp">}
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好了，代码都看完了，所以为什么&lt;code>poll&lt;/code>函数返回可读之后，阻塞的读取操作会永远阻塞下去呢？
参考man page中关于&lt;code>poll&lt;/code>的bug描述：&lt;/p>
&lt;blockquote>
&lt;p>See the discussion of spurious readiness notifications under the BUGS section of select(2).&lt;/p>
&lt;/blockquote>
&lt;p>再看man page中关于&lt;code>select(2)&lt;/code>的bug描述：&lt;/p>
&lt;blockquote>
&lt;p>Under Linux, select() may report a socket file descriptor as &amp;ldquo;ready for reading&amp;rdquo;, while nevertheless a subsequent read blocks. This could for example happen when data has arrived but upon examination has wrong checksum and is discarded. There may be other circumstances in which a file descriptor is spuriously reported as ready. Thus it may be safer to use O_NONBLOCK on sockets that should not block.&lt;/p>
&lt;/blockquote>
&lt;p>大致意思是在某些极端情况下，poll/select返回可读标识不代表真的有数据处于可读状态，一种典型场景就是数据包到达，但是由于checksum校验没有通过而被抛弃（这是由TCP的可靠机制决定的）。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>由于某些请求的TCP包传输过程中出现异常导致&lt;code>poll&lt;/code>在没有真实可读数据情况下返回可读标识，使得阻塞的&lt;code>recv&lt;/code>方法永远阻塞下去，从而使得当前线程一直处于&lt;code>RUNNABLE&lt;/code>，当线程池的核心线程都被这种线程占据之后，就再也无法处理新提交的任务了。&lt;/p>
&lt;h2 id="解决">解决&lt;/h2>
&lt;p>在不更新JDK而且继续使用HttpClient的前提下，可以参考apache提供的&lt;a href="https://hc.apache.org/httpcomponents-client-4.3.x/tutorial/html/connmgmt.html#d5e405">文档&lt;/a>实现某种&lt;code>Connection eviction&lt;/code>机制，新启一个守护进程定时移除idle长达一定时间的连接。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">ThreadPoolFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getThreadpoll&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;idle-evict-thread&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Close expired connections
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">poolingHttpClientConnectionManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">closeExpiredConnections&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// Optionally, close connections
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// that have been idle longer than 30 sec
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">poolingHttpClientConnectionManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">closeIdleConnections&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">30&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// terminate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另一种方式，就是用异步IO取代现有的阻塞IO，也是JDK修复这个bug的方式，具体代码可以参考&lt;a href="https://bugs.openjdk.java.net/browse/JDK-8075484">openJDK&lt;/a>&lt;/p>
&lt;h2 id="扩展">扩展&lt;/h2>
&lt;h3 id="io模型">I/O模型&lt;/h3>
&lt;p>Unix下共有5中可用的I/O模型：&lt;/p>
&lt;ul>
&lt;li>阻塞I/O&lt;/li>
&lt;li>非阻塞I/O&lt;/li>
&lt;li>I/O复用（select和poll）&lt;/li>
&lt;li>信号驱动式I/O（SIGIO）&lt;/li>
&lt;li>异步I/O（POSIX的aio_系列函数）&lt;/li>
&lt;/ul>
&lt;p>主要介绍下常见的几种I/O。&lt;/p>
&lt;h4 id="阻塞io">阻塞I/O&lt;/h4>
&lt;p>即blocking I/O，体现在JDK的源码中的&lt;code>NET_RecvFrom&lt;/code>方法，进程调用&lt;code>recvfrom&lt;/code>函数，其系统调用知道数据报到达且被复制到应用进程的缓冲区中或者发生错误才返回。进程在从调用&lt;code>recvfrom&lt;/code>函数开始到它返回的整段时间内饰被阻塞的。&lt;/p>
&lt;p>&lt;img src="./image/2018-06-13/2018-06-14-00-51-55.jpg" alt="">&lt;/p>
&lt;h4 id="非阻塞io">非阻塞I/O&lt;/h4>
&lt;p>即nonblocking I/O，应用进程持续轮询（polling）内核，即对一个非阻塞描述符循环调用上述的&lt;code>recvfrom&lt;/code>方法，以查看某个操作是否就绪。这么做往往耗费大量的CPU时间。&lt;/p>
&lt;p>&lt;img src="./image/2018-06-13/2018-06-14-01-03-29.jpg" alt="">&lt;/p>
&lt;h4 id="io复用模型">I/O复用模型&lt;/h4>
&lt;p>即I/O multiplexing，上述介绍的select/poll采用了这一模型。这一模型相对以上，阻塞发生在这两个系统调用之上，而不是真正的I/O系统调用上。看起来由于需要使用select+recvfrom两组命令，这一模型还稍有劣势，而优势就体现在，&lt;strong>使用select/poll可以等待多个描述符就绪&lt;/strong>，这样就可以做到用单个线程管理监听多个I/O操作的事件。与其密切相关的阻塞的变种是在多线程中使用阻塞I/O。&lt;/p>
&lt;p>&lt;img src="./image/2018-06-13/2018-06-14-01-23-26.jpg" alt="">&lt;/p>
&lt;h4 id="异步io">异步I/O&lt;/h4>
&lt;p>即asynchronous I/O，由POSIX规范定义。告知内核启动某个操作，并在&lt;strong>整个操作&lt;/strong>（包括将数据从内核复制到用户空间）完成后调用回调函数。&lt;/p>
&lt;p>&lt;img src="./image/2018-06-13/2018-06-14-01-32-48.jpg" alt="">&lt;/p>
&lt;h3 id="io模型对应的设计模式">I/O模型对应的设计模式&lt;/h3>
&lt;h4 id="reactor">Reactor&lt;/h4>
&lt;p>&lt;code>select/poll&lt;/code> 实现的I/O复用技术归纳起来有两个关键实现点：&lt;/p>
&lt;ul>
&lt;li>当多条连接共用一个阻塞对象后，进程只需要在一个阻塞对象上等待，而无须再轮询所有连接。&lt;/li>
&lt;li>当某条连接有新的数据可以处理时，操作系统会通知进程，进程从阻塞状态返回，开始进行业务处理。&lt;/li>
&lt;/ul>
&lt;p>I/O复用结合线程池使用，就是俗称的&lt;code>Reactor&lt;/code>模式，中文是“反应堆”。有的地方也称为&lt;code>Dispatcher&lt;/code>模式（在很多开源的系统里面会看到这个名称的类，其实就是实现 Reactor 模式的），更加贴近模式本身的含义，即 I/O 多路复用统一监听事件，收到事件后分配（Dispatch）给某个进程。&lt;/p>
&lt;p>Reactor 模式的核心组成部分包括 Reactor 和处理资源池（进程池或线程池），其中 Reactor 负责监听和分配事件，处理资源池负责处理事件。根据Reactor和资源池的数量可以引申出多种组合，以多 Reactor 多进程为例：&lt;/p>
&lt;p>&lt;img src="./image/2018-06-13/2018-06-14-14-43-23.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>父进程中 mainReactor 对象通过 select 监控连接建立事件，收到事件后通过 Acceptor 接收，将新的连接分配给某个子进程。&lt;/li>
&lt;li>子进程的 subReactor 将 mainReactor 分配的连接加入连接队列进行监听，并创建一个 Handler 用于处理连接的各种事件。&lt;/li>
&lt;li>当有新的事件发生时，subReactor 会调用连接对应的 Handler（即第 2 步中创建的 Handler）来进行响应。&lt;/li>
&lt;li>Handler 完成 read→业务处理→send 的完整业务流程。&lt;/li>
&lt;/ol>
&lt;p>目前著名的开源系统 Nginx 采用的是多 Reactor 多进程，采用多 Reactor 多线程的实现有 Memcache 和 Netty&lt;/p>
&lt;h4 id="proactor">Proactor&lt;/h4>
&lt;p>Reactor 是非阻塞同步网络模型，因为真正的 read 和 send 操作都需要用户进程同步操作。这里的“同步”指用户进程在执行 read 和 send 这类 I/O 操作的时候是同步的，如果把 I/O 操作改为异步就能够进一步提升性能，这就是异步网络模型 Proactor。&lt;/p>
&lt;p>Proactor 称为“前摄器”或者“主动器”。Reactor 可以理解为“来了事件我通知你，你来处理”，而 Proactor 可以理解为“来了事件我来处理，处理完了我通知你”。这里的“我”就是操作系统内核，“事件”就是有新连接、有数据可读、有数据可写的这些 I/O 事件，“你”就是我们的程序代码。&lt;/p>
&lt;p>&lt;img src="./image/2018-06-13/2018-06-14-14-47-28.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>Proactor Initiator 负责创建 Proactor 和 Handler，并将 Proactor 和 Handler 都通过 Asynchronous Operation Processor 注册到内核。&lt;/li>
&lt;li>Asynchronous Operation Processor 负责处理注册请求，并完成 I/O 操作。&lt;/li>
&lt;li>Asynchronous Operation Processor 完成 I/O 操作后通知 Proactor。&lt;/li>
&lt;li>Proactor 根据不同的事件类型回调不同的 Handler 进行业务处理。&lt;/li>
&lt;li>Handler 完成业务处理，Handler 也可以注册新的 Handler 到内核进程。&lt;/li>
&lt;/ol>
&lt;p>Windows 下通过 IOCP 实现了真正的异步 I/O，而在 Linux 系统下的 AIO 并不完善，因此在 Linux 下实现高并发网络编程时都是以 Reactor 模式为主。所以即使 Boost.Asio 号称实现了 Proactor 模型，其实它在 Windows 下采用 IOCP，而在 Linux 下是用 Reactor 模式（采用 epoll）模拟出来的异步模型。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;blockquote>
&lt;p>UNIX环境高级编程
单服务器高性能模式：Reactor与Proactor 李运华&lt;/p>
&lt;/blockquote></description></item><item><title>Micrometer使用小记：对象弱引用的一种使用场景</title><link>https://run.halfbit.top/post/weak-reference/</link><pubDate>Tue, 29 May 2018 13:50:24 +0000</pubDate><guid>https://run.halfbit.top/post/weak-reference/</guid><description>&lt;p>结合Micrometer使用过程中的一个场景谈谈Java当中的几种引用。&lt;/p>
&lt;!-- more -->
&lt;h2 id="场景">场景&lt;/h2>
&lt;p>最近尝试通过SpringBoot集成Micrometer来观测应用状态，注册自定义Meter的时候出现了一个问题，先看原先的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CapturMetrics&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MeterBinder&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RedissonClient&lt;/span> &lt;span class="n">redisson&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">bindTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MeterRegistry&lt;/span> &lt;span class="n">meterRegistry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">crawlers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">redisson&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Crawlers&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Gauge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;crawlers_count&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">crawlers&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RSet&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">description&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;total crawlers&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">meterRegistry&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码的目的是观察redisson集合中的元素数量，但是实际通过&lt;code>actuator/prometheus&lt;/code>观察这个值一直是NaN，&lt;code>crawlers.size&lt;/code>打上断点也无法跳转。
翻阅&lt;a href="https://micrometer.io/docs/concepts#_why_is_my_gauge_reporting_nan_or_disappearing">官方文档&lt;/a>发现解释：&lt;/p>
&lt;blockquote>
&lt;p>It is your responsibility to hold a strong reference to the state object that you are measuring with a Gauge. Micrometer is careful to not create strong references to objects that would otherwise be garbage collected. Once the object being gauged is de-referenced and is garbage collected, Micrometer will start reporting a NaN or nothing for a gauge, depending on the registry implementation.
If you see your gauge reporting for a few minutes and then disappearing or reporting NaN, it almost certainly suggests that the underlying object being gauged has been garbage collected.&lt;/p>
&lt;/blockquote>
&lt;p>大致意思是说这里声明的&lt;code>crawlers&lt;/code>局部变量已经被垃圾回收了。通过以下代码即可修复：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">...&lt;/span>
&lt;span class="n">Gauge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;crawlers_count&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">redisson&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Crawlers&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">description&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;total crawlers&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">meterRegistry&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>redisson通过spring容器来保持强引用确保未被回收，所以这里再去观测就有值了。&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>Gauge的创建遵循了builder的设计模式，实际创建位置在&lt;code>register&lt;/code>方法中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public Gauge register(MeterRegistry registry) {
return registry.gauge(new Meter.Id(name, tags, baseUnit, description, Type.GAUGE), obj, f);
}
// 跳转到MeterRegistry中的gauge方法
&amp;lt;T&amp;gt; Gauge gauge(Meter.Id id, @Nullable T obj, ToDoubleFunction&amp;lt;T&amp;gt; valueFunction) {
return registerMeterIfNecessary(Gauge.class, id, id2 -&amp;gt; newGauge(id2, obj, valueFunction), NoopGauge::new);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由DefaultGauge提供了newGauge接口的默认实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public class DefaultGauge&amp;lt;T&amp;gt; extends AbstractMeter implements Gauge {
private final WeakReference&amp;lt;T&amp;gt; ref;
private final ToDoubleFunction&amp;lt;T&amp;gt; value;
public DefaultGauge(Meter.Id id, @Nullable T obj, ToDoubleFunction&amp;lt;T&amp;gt; value) {
super(id);
this.ref = new WeakReference&amp;lt;&amp;gt;(obj);
this.value = value;
}
@Override
public double value() {
T obj = ref.get();
return obj != null ? value.applyAsDouble(ref.get()) : Double.NaN;
}
...
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到类定义中将&lt;code>ref&lt;/code>声明为了一个弱引用&lt;code>WeakReference&lt;/code>，在获取对象时若对象已经被回收，则返回默认&lt;code>Double.NaN&lt;/code>。&lt;/p>
&lt;h2 id="设计">设计&lt;/h2>
&lt;p>结合上一篇博文：[一次线上Memory Leak的排查](&lt;a href="https://suclogger.me/">https://suclogger.me/&lt;/a>一次线上Memory Leak的排查)&lt;/p>
&lt;p>在开发过程中，如果我们错误的保持了强引用（比如，static变量全局变量），那么对象可能就没有机会变回类似弱引用的可达性状态了，就会产生内存泄漏。Micrometer通过弱h引用保证不干预应用的内存回收。&lt;/p>
&lt;p>所以，检查各种引用对象的回收状态也是诊断是否有特定内存泄漏的一个思路，如果我们的框架使用到弱引用又怀疑有内存泄漏，就可以从这个角度检查。&lt;/p>
&lt;h2 id="延伸">延伸&lt;/h2>
&lt;p>Java定义了一系列可达性级别（reachability level）：&lt;/p>
&lt;ul>
&lt;li>强可达（Strongly Reachable），就是当一个对象可以有一个或多个线程可以不通过各种引用访问到的情况。比如，我们新创建一个对象，那么创建它的线程对它就是强可达。&lt;/li>
&lt;li>软可达（Softly Reachable），就是当我们只能通过软引用才能访问到对象的状态。&lt;/li>
&lt;li>弱可达（Weakly Reachable），无法通过强引用或者软引用访问，只能通过弱引用访问时的状态。这是十分临近finalize状态的时机，当弱引用被清除的时候，就符合finalize的条件了。&lt;/li>
&lt;li>幻象可达（Phantom Reachable），没有强、软、弱引用关联，并且finalize过了，只有幻象引用指向这个对象的时候。&lt;/li>
&lt;li>不可达（unreachable），意味着对象可以被清除了。&lt;/li>
&lt;/ul>
&lt;p>各个状态流转如下：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2018-05-29/%E5%8F%AF%E8%BE%BE%E6%80%A7%E7%BA%A7%E5%88%AB.png" alt="">&lt;/p>
&lt;p>判断对象可达性，是JVM垃圾收集器决定如何处理对象的一部分考虑。&lt;/p>
&lt;p>软引用通常会在最后一次引用后，还能保持一段时间，默认值是根据堆剩余空间计算的（以M bytes为单位）。从Java 1.3.1开始，提供了-XX:SoftRefLRUPolicyMSPerMB参数，我们可以以毫秒（milliseconds）为单位设置。比如，下面这个示例就是设置为3秒（3000毫秒）。
-XX:SoftRefLRUPolicyMSPerMB=3000
这个剩余空间，其实会受不同JVM模式影响，对于Client模式，比如通常的Windows 32 bit JDK，剩余空间是计算当前堆里空闲的大小，所以更加倾向于回收；而对于server模式JVM，则是根据-Xmx指定的最大值来计算。&lt;/p>
&lt;h2 id="诊断">诊断&lt;/h2>
&lt;p>在jdk8中通过添加jvm参数&lt;code>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintReferenceGC&lt;/code> 可以看到各种引用数量：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">4.702: [GC (Allocation Failure) 4.712: [SoftReference, 0 refs, 0.0000379 secs]4.712: [WeakReference, 1699 refs, 0.0002041 secs]4.713: [FinalReference, 1186 refs, 0.0027208 secs]4.715: [PhantomReference, 0 refs, 1 refs, 0.0000132 secs]4.715: [JNI Weak Reference, 0.0000507 secs][PSYoungGen: 162458K-&amp;gt;18158K(229376K)] 184711K-&amp;gt;40418K(400896K), 0.0149849 secs] [Times: user=0.05 sys=0.02, real=0.02 secs]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以通过内存dump来观察存活对象来分析，参考 [一次线上Memory Leak的排查](&lt;a href="https://suclogger.me/">https://suclogger.me/&lt;/a>一次线上Memory Leak的排查)&lt;/p></description></item><item><title>关于近期的面试情况-续</title><link>https://run.halfbit.top/post/job-interview-2018-2/</link><pubDate>Fri, 11 May 2018 15:30:41 +0000</pubDate><guid>https://run.halfbit.top/post/job-interview-2018-2/</guid><description>&lt;p>续上篇。&lt;/p>
&lt;!-- more -->
&lt;p>现场面试考察的侧重点就更脱离场景，深入到底层。&lt;/p>
&lt;h1 id="tcp和udp的区别">TCP和UDP的区别&lt;/h1>
&lt;p>考察基础通信原理，为什么tcp可以做到传输完整有序。&lt;/p>
&lt;h1 id="gc-root有哪些">GC Root有哪些&lt;/h1>
&lt;p>当时有一个争论的点在于虚拟机栈上的变量是否属于GC Root。&lt;/p>
&lt;blockquote>
&lt;p>虚拟机栈中的引用对象
方法区中类静态属性引用的对象
方法区中常量引用对象
本地方法栈中JNI引用对象
&amp;ndash; 《深入理解Java虚拟机》&lt;/p>
&lt;/blockquote>
&lt;h1 id="两个-classloader-去load同一个class使用这个class创建出来的对象相同吗">两个 ClassLoader 去Load同一个Class，使用这个Class创建出来的对象相同吗&lt;/h1>
&lt;p>我的回答是二进制流或者说class的metadate是一致的，但是因为依赖的其他类可能不一样所以行为可能不一致。
还引申到如何做到隔离依赖，回答支付宝刚开源的sofa boot，但是没有答出原理。&lt;/p>
&lt;h1 id="一致性hash为什么一个机器节点需要分布在hash环的多个位置">一致性hash为什么一个机器节点需要分布在hash环的多个位置&lt;/h1>
&lt;h1 id="强引用和弱引用有什么区别">强引用和弱引用有什么区别&lt;/h1>
&lt;h1 id="谈谈做过的项目有什么难点">谈谈做过的项目，有什么难点&lt;/h1>
&lt;h1 id="算法阶乘的实现">算法：阶乘的实现&lt;/h1>
&lt;p>递归和循环有何优劣&lt;/p>
&lt;h1 id="jdk8的新特性">jdk8的新特性&lt;/h1></description></item><item><title>关于近期的面试情况</title><link>https://run.halfbit.top/post/job-interview-2018/</link><pubDate>Fri, 04 May 2018 15:07:26 +0000</pubDate><guid>https://run.halfbit.top/post/job-interview-2018/</guid><description>&lt;p>记录一下最近面试遇到的一些问题。&lt;/p>
&lt;!-- more -->
&lt;h1 id="duboo的默认线程池大小">Duboo的默认线程池大小&lt;/h1>
&lt;p>阅读代码的时候没有注意到这一点，瞎猜了一下是CPU核数的2倍。答案是默认线程池核心线程数是200 。&lt;/p>
&lt;p>认真探究了一下，具体参考：&lt;a href="http://ifeve.com/how-to-calculate-threadpool-size/">如何合理地估算线程池大小&lt;/a>&lt;/p>
&lt;p>跟小马哥（桃谷）探讨这个问题，他的看法是：&lt;/p>
&lt;blockquote>
&lt;p>主要是因为如果 RPC 的设置为 处理器个数 x2 或 x4 的话，当并发请求非常高的时候，会出现线程池堵塞，换言之，大量的线程处于等待状态。所以 RPC 的并发数量很大，也就是另可让 CPU 时间片轮替，也不希望堵塞。不同框架的设值也不一定都一样，比如 HSF 就是 700。&lt;/p>
&lt;/blockquote>
&lt;p>Dubbo是一个RPC框架，所以是IO密集型的任务，线程等待时间相对于CPU时间长很多，所以线程数可以设置较高，不过也是支持配置项定义的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FixedThreadPool&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Executor&lt;/span> &lt;span class="nf">getExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">URL&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getParameter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">THREAD_NAME_KEY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DEFAULT_THREAD_NAME&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getParameter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">THREADS_KEY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DEFAULT_THREADS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">queues&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getParameter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">QUEUES_KEY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DEFAULT_QUEUES&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">threads&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">queues&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SynchronousQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;()&lt;/span> &lt;span class="o">:&lt;/span>
&lt;span class="o">(&lt;/span>&lt;span class="n">queues&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedBlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;()&lt;/span>
&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedBlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">queues&lt;/span>&lt;span class="o">)),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">NamedThreadFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AbortPolicyWithReport&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="如何判断链表相交">如何判断链表相交&lt;/h1>
&lt;p>面试官问的是判断链表正交，当时一脸懵逼，反问正交是什么意思，结果这个问题就被跳过了。
判断链表正交可以通过将两个链表首尾相连后转为判断链表是否有环的问题。&lt;/p>
&lt;p>常用的思路是通过快慢指针来实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LoopDetect&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">getValue&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Integer&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">getNext&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setNext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Node&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Integer&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">getClass&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Node&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashCode&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">detect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Node&lt;/span> &lt;span class="n">oriStart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Node&lt;/span> &lt;span class="n">fast&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Node&lt;/span> &lt;span class="n">slow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">slow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">oriStart&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">fast&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">slow&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">slow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">fast&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fast&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">slow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">slow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fast&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">slow&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34; loop detected !!!&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fast&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">detectLoopStart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fast&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">oriStart&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">fast&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">detectLoopStart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">meet&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">meet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">meet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">meet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;found loop start : &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">meet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">meet&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="如何在垂直分表环境下对某个字段做top">如何在垂直分表环境下对某个字段做top&lt;/h1>
&lt;p>思路分两步，第一是map-reduce的思想，分10个表就开10个线程分别处理，每个线程中使用一个小根堆，小根堆在java里面的一个例子就是&lt;code>TreeMap&lt;/code>，底层通过红黑树来实现。&lt;/p>
&lt;p>数据过来的时候先判断堆是否满了，没满的话就直接添加到堆中。如果堆满了，与堆顶比较，如果比堆顶小则丢弃，如果比堆顶大就用这个值替换堆顶。
大概的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">TreeMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">treeMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TreeMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">treeMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">treeMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Integer&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">treeMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">firstKey&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">treeMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">treeMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当时问我时间复杂度是多少，紧张了一下没好好想，其实最差情况就是 n/10&lt;em>log10 + 100&lt;/em>log10 。
主要是考察思路。&lt;/p>
&lt;h1 id="还问了关于java异常处理的看法">还问了关于java异常处理的看法&lt;/h1>
&lt;p>当时自己对异常的看法没有好好整理过，所以回答的比较粗糙，后来自己认真想了想，主要有几个点：&lt;/p>
&lt;ul>
&lt;li>具体明确：比如抛出的异常的信息应该包含可以追溯的详细堆栈，再比如对同一try块定义多个catch块，从而对每种异常分别进行恰当的处理&lt;/li>
&lt;li>提早抛出：即迅速失败，可以有效避免不必要的对象构造或资源占用，比如文件或网络连接&lt;/li>
&lt;li>延迟捕获：不要在还无能力处理这个异常的时候就捕获异常，你的程序要么可以从异常中有意义地恢复并继续下去，而不导致更 深入的错误；要么能够为用户提供明确的信息，包括引导他们从错误中恢复过来。如果你的方法无法胜任，那么就不要处理异常，把它留到后面捕获和在恰当的层面处理&lt;/li>
&lt;/ul>
&lt;h1 id="mysql多栏索引的实现">mysql多栏索引的实现&lt;/h1>
&lt;p>我只了解过单栏索引是通过B+树来实现的，猜测多栏索引也是通过B+树来做的，也没引发面试官后续可能的问题，有点遗憾。
网上搜到的多栏索引的资料比较少，稍微列举一下：&lt;/p>
&lt;p>&lt;a href="https://draveness.me/mysql-innodb">『浅入浅出』MySQL 和 InnoDB&lt;/a>
&lt;img src="https://run.halfbit.top/image/2018-05-04/2018-05-07-16-41-40.png" alt="">&lt;/p>
&lt;p>&lt;a href="https://www.zhihu.com/question/36996520">mysql索引最左匹配原则的理解?&lt;/a>
&lt;img src="https://run.halfbit.top/image/2018-05-04/2018-05-04-16-22-32.jpg" alt="">&lt;/p>
&lt;h1 id="关于分布式应用数据库记录锁竞争的问题">关于分布式应用数据库记录锁竞争的问题&lt;/h1>
&lt;p>我回答的思路是根据场景来选择，如果大概率有竞争，可以通过&lt;code>select ... for update&lt;/code>来加锁，如果小概率有竞争，可以通过添加乐观锁字段。面试官追问能否在不用redis等外部依赖的情况跨jvm实现，我回答不可以。希望大家有想法的可以指点一下。&lt;/p>
&lt;p>目前大致就是这些，其他一些常规的问题就没有记录了。&lt;/p></description></item><item><title>有关“架构师”之二</title><link>https://run.halfbit.top/post/qcon-beijing-2018/</link><pubDate>Mon, 23 Apr 2018 22:05:25 +0000</pubDate><guid>https://run.halfbit.top/post/qcon-beijing-2018/</guid><description>&lt;p>谈谈这几天参加QCon后的感想。&lt;/p>
&lt;!-- more -->
&lt;h2 id="稍作总结">稍作总结&lt;/h2>
&lt;p>从&lt;a href="http://suclogger.me/categories/%E6%9E%B6%E6%9E%84/">架构&lt;/a>分组的上一篇文章：&lt;a href="http://suclogger.me/%E6%9C%89%E5%85%B3%E2%80%9C%E6%9E%B6%E6%9E%84%E5%B8%88%E2%80%9D/">有关“架构师”&lt;/a>到现在已经一年有余，这一年写的文章很少。固然有一些客观的不可抗力原因，但是还有一些需要反思。&lt;/p>
&lt;p>为什么写的文章变少？&lt;/p>
&lt;ol>
&lt;li>没有时间写&lt;/li>
&lt;li>没有内容可写 -&amp;gt; 没有投入更多的时间钻研技术&lt;/li>
&lt;/ol>
&lt;p>时间投入到哪里了？&lt;/p>
&lt;ol>
&lt;li>与编程无关的其他低投入，高刺激的事情上&lt;/li>
&lt;li>陪伴身边的人&lt;/li>
&lt;/ol>
&lt;p>为什么编程对自己的刺激感下降 -&amp;gt; &lt;strong>缺乏成就感&lt;/strong>&lt;/p>
&lt;p>归功于最近的QCon上受到的启发，终于愿意坐下来，回顾这一年多的经历，谈谈自己的感想。&lt;/p>
&lt;h2 id="从技术开发转型架构师的误区">从技术开发转型架构师的误区&lt;/h2>
&lt;h3 id="过于追求技术的深度">过于追求技术的深度&lt;/h3>
&lt;p>之前那篇&lt;a href="http://suclogger.me/%E6%9C%89%E5%85%B3%E2%80%9C%E6%9E%B6%E6%9E%84%E5%B8%88%E2%80%9D/">有关“架构师”&lt;/a>隐隐有些危险的趋势。
架构师在大家的印象中是技术上很有深度的，所以我从转型架构师之后，陷入的第一个误区就是过于追求技术的深度。时时抱着Dubbo，RocketMQ，Spring甚至JDK的源码硬啃。时时有所收获，但是投入的大量时间和精力让我在大量的未知中渐渐迷失。&lt;/p>
&lt;h3 id="追逐潮流">追逐潮流&lt;/h3>
&lt;p>2017年是Spring Boot和Spring Cloud相关技术飞速发展的一年，我投入了大量的时间调研和使用相关的产品，跟踪最新的发布进展和新增特性，试图推行并取代以往的Dubbo，并且遇到了重重困难。等我终于意识到，&lt;strong>工具/框架是手段而不是目的&lt;/strong>，那些沉没成本已经找不回来了。&lt;/p>
&lt;h3 id="脱离业务">脱离业务&lt;/h3>
&lt;p>也许与我们公司重线下的业务场景有关，有很多时候，开发要直面一线的业务员，解答他们使用过程中遇到的各种问题。因为保受打扰的工作环境十分让人不适，所以自然而然，借着架构师这个与业务听起来没有瓜葛的岗位，我在很长的时间里面，都不再与业务方有业务实现上的沟通，沉浸在上面两点中。脱离业务方也直接导致自己的工作在业务方没有任何直接的体现，看不到自己打造的东西得到别人的期盼或者认可，乐趣自然而然的缺失了。&lt;/p>
&lt;h3 id="脱离团队">脱离团队&lt;/h3>
&lt;p>因为从业务的脱离，自然而然的，与各个业务团队也慢慢脱离。当自己是业务开发的时候，业务跟各方都有接触，所以大家都相互了解和认识，有问题大家都会坐一起讨论，有疑问别人会来寻求解答，这种愉快的协作氛围，随着团队成员的更迭慢慢淡去。&lt;/p>
&lt;h3 id="无法推动">无法推动&lt;/h3>
&lt;p>各个业务团队在项目DeadLine第一的业务氛围下，对于架构组尝试推动的一些新的技术或者标准都反响冷淡，让我在跟众多团队中的协作也开始身心俱疲。&lt;/p>
&lt;h2 id="破局">破局&lt;/h2>
&lt;p>让我醍醐灌顶的，在QCon上的众多大牛演讲中提到的优良的经过工程实践的架构理念功不可没， 更归功于安姐和她的书。&lt;/p>
&lt;h3 id="团队目标的制定">团队目标的制定&lt;/h3>
&lt;p>相对于我们采用的KPI体系，硅谷普遍采用OKR的方式更显科学。整个公司的利益是最先需要被考虑的，然后逐步分发到各个业务团队。架构组的目标不应该是从自身的角度出发，产出多少的中间件，得到多少的技术提升，而是在对整个公司业务的推动力。&lt;/p>
&lt;h3 id="标准化的重要">标准化的重要&lt;/h3>
&lt;p>在以往推送的各个标准中，我总是最嗤之以鼻的，认为多样性和灵活才是最酷的。但是在QCon上各大团队的工程实践和安姐的切身经历，都说明了标准的重要性。在敏捷开发和持续交付，质量跟踪，运维难度上，标准的开发和项目体系能够带来数不清的好处。&lt;/p>
&lt;h3 id="沟通和协作">沟通和协作&lt;/h3>
&lt;p>一个人能实现的东西是很有限的，一个团队总要依托于其他多个团队。
沟通力此时显得尤为重要。将当前做的事，需要得到的配合准确地传达给整个团队，不管对自己还是对整个团队都是有益的。&lt;/p></description></item><item><title>一次线上Memory Leak的排查</title><link>https://run.halfbit.top/post/%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8Amemory-leak%E7%9A%84%E6%8E%92%E6%9F%A5/</link><pubDate>Fri, 24 Nov 2017 13:16:37 +0000</pubDate><guid>https://run.halfbit.top/post/%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8Amemory-leak%E7%9A%84%E6%8E%92%E6%9F%A5/</guid><description>&lt;p>很久很久没有更新博客了，最近遇到了一个线上内存泄露问题，简单记录一下排查的过程。&lt;/p>
&lt;!-- more -->
&lt;p>很早前就有小伙伴反馈调用我们的一个应用响应非常慢，往往更新到最新的部署代码之后就恢复正常了，所以一直没有重视这个问题。这次出现用户反馈，严重影响了正常业务。
现象是：&lt;/p>
&lt;ol>
&lt;li>应用响应时间非常长（17s）：
&lt;img src="https://run.halfbit.top/image/2017-11-24-13-28-41.jpg" alt="">&lt;/li>
&lt;li>CPU使用率非常高，JAVA进程的CPU占用在200%以上；&lt;/li>
&lt;li>应用日志正常，没有任何报错信息。&lt;/li>
&lt;/ol>
&lt;p>怀疑是GC导致的问题，先快速通过&lt;code>jstat&lt;/code>查看GC的情况：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">jstat -gc java进程号 时间间隔
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT GCT
52416.0 52416.0 0.0 52415.9 419456.0 419456.0 1572864.0 1572864.0 99968.0 95473.0 12416.0 11054.0 29362 325.140 111793 193663.344 193988.484
52416.0 52416.0 0.0 18537.7 419456.0 414557.4 1572864.0 1572864.0 99968.0 95473.0 12416.0 11054.0 29362 325.140 111794 193673.405 193998.545
52416.0 52416.0 0.0 52416.0 419456.0 419456.0 1572864.0 1572864.0 99968.0 95473.0 12416.0 11054.0 29362 325.140 111795 193673.888 193999.028
52416.0 52416.0 0.0 52416.0 419456.0 419456.0 1572864.0 1572864.0 99968.0 95473.0 12416.0 11054.0 29362 325.140 111795 193673.888 193999.028
52416.0 52416.0 0.0 52416.0 419456.0 419456.0 1572864.0 1572864.0 99968.0 95473.0 12416.0 11054.0 29362 325.140 111795 193673.888 193999.028
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>老年代空间已经打满，一直在做FULL GC，但是没有空间得到回收。&lt;/p>
&lt;p>各个属性分别指：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>k&lt;/th>
&lt;th>v&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>S0C&lt;/td>
&lt;td>年轻代中第一个survivor（幸存区）的容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S1C&lt;/td>
&lt;td>年轻代中第二个survivor（幸存区）的容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S0U&lt;/td>
&lt;td>年轻代中第一个survivor（幸存区）目前已使用空间 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S1U&lt;/td>
&lt;td>年轻代中第二个survivor（幸存区）目前已使用空间 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EC&lt;/td>
&lt;td>年轻代中Eden（伊甸园）的容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EU&lt;/td>
&lt;td>年轻代中Eden（伊甸园）目前已使用空间 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OC&lt;/td>
&lt;td>Old代的容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OU&lt;/td>
&lt;td>Old代目前已使用空间 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PC&lt;/td>
&lt;td>Perm(持久代)的容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PU&lt;/td>
&lt;td>Perm(持久代)目前已使用空间 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YGC&lt;/td>
&lt;td>从应用程序启动到采样时年轻代中gc次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YGCT&lt;/td>
&lt;td>从应用程序启动到采样时年轻代中gc所用时间(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FGC&lt;/td>
&lt;td>从应用程序启动到采样时old代(全gc)gc次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FGCT&lt;/td>
&lt;td>从应用程序启动到采样时old代(全gc)gc所用时间(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GCT&lt;/td>
&lt;td>从应用程序启动到采样时gc用的总时间(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NGCMN&lt;/td>
&lt;td>年轻代(young)中初始化(最小)的大小 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NGCMX&lt;/td>
&lt;td>年轻代(young)的最大容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NGC&lt;/td>
&lt;td>年轻代(young)中当前的容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OGCMN&lt;/td>
&lt;td>old代中初始化(最小)的大小 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OGCMX&lt;/td>
&lt;td>old代的最大容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OGC&lt;/td>
&lt;td>old代当前新生成的容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PGCMN&lt;/td>
&lt;td>perm代中初始化(最小)的大小 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PGCMX&lt;/td>
&lt;td>perm代的最大容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PGC&lt;/td>
&lt;td>perm代当前新生成的容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S0&lt;/td>
&lt;td>年轻代中第一个survivor（幸存区）已使用的占当前容量百分比&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S1&lt;/td>
&lt;td>年轻代中第二个survivor（幸存区）已使用的占当前容量百分比&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>E&lt;/td>
&lt;td>年轻代中Eden（伊甸园）已使用的占当前容量百分比&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>O&lt;/td>
&lt;td>old代已使用的占当前容量百分比&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P&lt;/td>
&lt;td>perm代已使用的占当前容量百分比&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S0CMX&lt;/td>
&lt;td>年轻代中第一个survivor（幸存区）的最大容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S1CMX&lt;/td>
&lt;td>年轻代中第二个survivor（幸存区）的最大容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ECMX&lt;/td>
&lt;td>年轻代中Eden（伊甸园）的最大容量 (字节)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DSS&lt;/td>
&lt;td>当前需要survivor（幸存区）的容量 (字节)（Eden区已满）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TT&lt;/td>
&lt;td>持有次数限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MTT&lt;/td>
&lt;td>最大持有次数限制&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>进一步拉了GC日志下来，通过GCEasy分析了一下：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-11-24-13-33-17.jpg" alt="">&lt;/p>
&lt;p>可以看到Full GC后的堆空间一直在持续增长(理想情况下，这个值应该是稳定的)，到了Nov 19之后，一直在持续进行Full GC，却无法回收足够的堆空间，导致应用吞吐量急剧下降，CPU资源都在做GC操作。
内存无法被垃圾回收，显然存在内存泄露，内存泄露大致有两种情况：&lt;/p>
&lt;ol>
&lt;li>新生代内存泄露导致频繁触发Young GC&lt;/li>
&lt;li>老年代内存泄露导致频繁触发Full GC&lt;/li>
&lt;/ol>
&lt;p>内存泄露一般通过分析内存dump中的对象占用空间来判断，由于内存dump的同时会自动触发一次Full GC，内存泄漏体现在Full GC无法回收的内存对象中，所以可以直接通过内存dump进行分析。
内存dump的一般方式是通过&lt;code>jmp&lt;/code>命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">jmap -dump:live,file=/tmp/heapdump.bin JAVA进程号
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>一般要传递&lt;code>live&lt;/code>参数来指定只捕获存活的对象&lt;/li>
&lt;li>获取进程号可以通过jdk中的&lt;code>jps&lt;/code>或者系统&lt;code>ps&lt;/code>命令&lt;/li>
&lt;li>如果应用是docker应用，要进入docker容器中（docker exec -it docker镜像id bash）操作，直接在宿主机中执行&lt;code>jmap&lt;/code>命令会返回&lt;code>Error attaching to core file: cannot open binary file&lt;/code>异常&lt;/li>
&lt;/ul>
&lt;p>获取到dump文件之后通过Eclipse的&lt;code>Memory Analyzer&lt;/code>打开（如果dump文件较大，记得先编辑配置文件中的启动jvm参数&lt;code>mat.app/Contents/Eclipse/MemoryAnalyzer.ini&lt;/code>），选择分析可能的内存泄露（Leak Suspects Report），会将占用的空间最多的对象列举出来：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-11-24-13-56-01.jpg" alt="">&lt;/p>
&lt;p>可以看到&lt;code>CommonMessageConsumer&lt;/code>持有的&lt;code>ConcurrentSkipListMap&lt;/code>占用了69.37%的堆空间。
下面是代码片段：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">
private final Set&amp;lt;String&amp;gt; messageKeys = new ConcurrentSkipListSet&amp;lt;&amp;gt;();
...
public void b(Message message) {
String hashed = MD5.sum(message.getBody());
if (!messageKeys.contains(hashed)) {
messageKeys.add(hashed);
...
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码维护了一个去重Set，Set又是通过Map实现的，所以随着Set中内容增长，堆空间会被逐渐耗尽。&lt;/p>
&lt;h3 id="jvm参数配置">jvm参数配置&lt;/h3>
&lt;h4 id="concurrent-mode-failure">Concurrent Mode Failure&lt;/h4>
&lt;p>由于内存在4G以上，所以一般采用CMS回收机制，CMS有一个特有的GC原因：&lt;code>Concurrent Mode Failure&lt;/code>，如果这个原因触发的GC占很大比重，就需要通过启用&lt;code>UseCMSInitiatingOccupancyOnly&lt;/code>并调低&lt;code>CMSInitiatingOccupancyFraction&lt;/code>提前触发GC来避免Full GC。&lt;/p>
&lt;h4 id="promotion-failure">Promotion Failure&lt;/h4>
&lt;p>在CMS中，老年代采用的是标记-清除算法，会导致老年代空间逐渐碎片化，新生代晋升的时候如果老年代没有足够的连续空间来存放，就会触发Full GC。为了缓解这个问题，可以通过启用&lt;code>UseCMSCompactAtFullCollection&lt;/code>并定义&lt;code>CMSFullGCBeforeCompaction&lt;/code>来指定若干次的清除之后进行一次整理操作。&lt;/p>
&lt;h4 id="gc-日志配置">GC 日志配置&lt;/h4>
&lt;p>一般要配置&lt;code>UseGCLogFileRotation&lt;/code>来滚动GC日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">-XX:+PrintGCDetails
-XX:+PrintGCTimeStamps
-XX:+PrintGCDateStamps
-Xloggc:/usr/local/share/elasticsearch/logs/gc.log
# gc file rotate
-XX:+UseGCLogFileRotation
-XX:NumberOfGCLogFiles=10
-XX:GCLogFileSize=10M
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>ES搜索分桶的一种思路</title><link>https://run.halfbit.top/post/es%E6%90%9C%E7%B4%A2%E5%88%86%E6%A1%B6%E7%9A%84%E4%B8%80%E7%A7%8D%E6%80%9D%E8%B7%AF/</link><pubDate>Sat, 16 Sep 2017 22:16:33 +0000</pubDate><guid>https://run.halfbit.top/post/es%E6%90%9C%E7%B4%A2%E5%88%86%E6%A1%B6%E7%9A%84%E4%B8%80%E7%A7%8D%E6%80%9D%E8%B7%AF/</guid><description>&lt;p>一个简化版的有赞搜索实践。&lt;/p>
&lt;!-- more -->
&lt;p>感谢@有赞 提供的思路，可以去看这篇文章：&lt;a href="http://tech.youzan.com/you_zan_searchengine2/">有赞搜索引擎实践&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>实际上想达到店铺去重的效果通过分桶搜索是很容易做的事情. 我们假设每页搜索20个结果, 我们把索引库分成4个桶, 每个商品对桶数取模得到所在桶的编号. 这样可以保证同一店铺的商品仅在一个桶里面.&lt;/p>
&lt;/blockquote>
&lt;p>刚好我们也想做一件类似的事情，优化之前同一个优质商家的多个相关商品就是霸占搜索结果的前几页，分桶可以做到每个商家固定的出几个商品。&lt;/p>
&lt;h2 id="索引数据进入不同分桶">索引数据进入不同分桶&lt;/h2>
&lt;p>之前的文章有谈到我们还在用logstash将数据从mysql同步到es，具体可以参见：&lt;a href="http://suclogger.me/MySQL%E5%88%B0Elasticsearch%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%B7%AF/">MySQL到Elasticsearch的同步之路&lt;/a>&lt;/p>
&lt;p>而logstash恰恰提供了很多强大的插件功能，这里主要用到了其中的&lt;a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-ruby.html">&lt;code>ruby&lt;/code>插件&lt;/a>，这个插件logstash自带，不需要额外安装。&lt;/p>
&lt;p>数据流是： MySQL -&amp;gt; Ruby Filter -&amp;gt; ES&lt;/p>
&lt;p>在&lt;code>Ruby Filter&lt;/code>这一层我们可以根据数据的属性做不同的路由，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">filter
{
ruby
{
code =&amp;gt; &amp;#39;\&amp;#39;&amp;#39;event.set(&amp;#34;bulk_no&amp;#34;, (event.get(&amp;#34;[hash_key]&amp;#34;) % 10)&amp;#39;\&amp;#39;&amp;#39;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个filter根据索引的&lt;code>hash_key&lt;/code>对10取模，而10就是总的分桶数，得到的&lt;code>bulk_no&lt;/code>可以用于后续&lt;code>output&lt;/code>中用于指定桶编号，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">output {
elasticsearch {
index =&amp;gt; &amp;#34;sku_bulk_%{[bulk_no]}&amp;#34;
document_type =&amp;gt; &amp;#34;sku&amp;#34;
document_id =&amp;gt; &amp;#34;%{sku_id}&amp;#34;
hosts =&amp;gt; [&amp;#34;127.0.0.1:9200&amp;#34;]
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="从各分桶获取数据">从各分桶获取数据&lt;/h2>
&lt;blockquote>
&lt;p>搜索的过程每个桶平均分摊搜索任务的25%, 并根据静态分合并成一页的结果. 这样同一保证结果的相对顺序, 又达到了店铺去重的目的.&lt;/p>
&lt;/blockquote>
&lt;p>以10个桶为例，分桶之后一次搜索请求分割为了10个到分桶的搜索请求，而且为了保证聚合结果，需要额外在全量桶中搜索一次，等于一次请求分裂为11次。
为了保证响应速度不会显著下降，可以考虑并发请求各个分桶。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">CountDownLatch count = new CountDownLatch(10);
for (int i = 0; i &amp;lt; 10; i++) {
searchCondition.setIndexName(&amp;#34;sku_bulk_&amp;#34; + i);
res.add(ThreadPoolFactory.getThreadPool().submit(new RequestBulk(builder(searchCondition), count)));
}
count.await(1000, TimeUnit.MILLISECONDS);
res.foreach(fu-&amp;gt;fu.get(1000, TimeUnit.MILLISECONDS));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="没解决的问题">没解决的问题&lt;/h2>
&lt;p>通过这种简易的方式，从各个分桶取出的结果条数不可控，就导致了每次搜索结果条数的不可控。&lt;/p></description></item><item><title>一个打杂架构师的爬虫日常</title><link>https://run.halfbit.top/post/%E4%B8%80%E4%B8%AA%E6%89%93%E6%9D%82%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9A%84%E7%88%AC%E8%99%AB%E6%97%A5%E5%B8%B8/</link><pubDate>Fri, 11 Aug 2017 22:40:15 +0000</pubDate><guid>https://run.halfbit.top/post/%E4%B8%80%E4%B8%AA%E6%89%93%E6%9D%82%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9A%84%E7%88%AC%E8%99%AB%E6%97%A5%E5%B8%B8/</guid><description>&lt;p>最近又双叒叕开始写起了爬虫。&lt;/p>
&lt;!-- more -->
&lt;h2 id="写一个爬虫的思路">写一个爬虫的思路&lt;/h2>
&lt;h3 id="链接发现">链接发现&lt;/h3>
&lt;ul>
&lt;li>有序/规则 -&amp;gt; 生成：链接的规则是规则有序的，适用于一个有序的列表，例如：https://example.com/some_content?page=1&lt;/li>
&lt;li>无序/规则 -&amp;gt; 发现：从上一次请求的响应中抽取链接，例如详情页的链接可以从列表页抽取。&lt;/li>
&lt;/ul>
&lt;h3 id="认证">认证&lt;/h3>
&lt;ul>
&lt;li>账号获取 -&amp;gt; 自动注册：通过接收验证码的平台，识别验证码的平台做自动的账号处理&lt;/li>
&lt;/ul>
&lt;h3 id="加解密">加解密&lt;/h3>
&lt;ul>
&lt;li>密钥获取 -&amp;gt; 客户端反编译&lt;/li>
&lt;/ul>
&lt;h3 id="内容抽取">内容抽取&lt;/h3>
&lt;ul>
&lt;li>html页面 -&amp;gt; JsoupXpath&lt;/li>
&lt;li>json响应 -&amp;gt; JsonXpath&lt;/li>
&lt;/ul>
&lt;h3 id="应对反爬">应对反爬&lt;/h3>
&lt;ul>
&lt;li>切换请求IP -&amp;gt; 拨号vps&lt;/li>
&lt;li>切换User-Agent&lt;/li>
&lt;li>切换账号&lt;/li>
&lt;li>控制请求频率&lt;/li>
&lt;/ul>
&lt;h2 id="一个好的爬虫">一个好的爬虫&lt;/h2>
&lt;p>我心目中一个好的爬虫：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB.png" alt="">&lt;/p>
&lt;h3 id="服务发现">服务发现&lt;/h3>
&lt;p>使用etcd来记录slave的动态IP&lt;/p>
&lt;h3 id="日志整合">日志整合&lt;/h3>
&lt;p>slave使用rsyslog投递消息到日志中心，日志中心使用logstash提交到es，master通过es获取日志&lt;/p>
&lt;h3 id="请求分发">请求分发&lt;/h3>
&lt;p>master统一生成链接投递到mq或者redis queue，slave从对应的位置获取任务，根据执行结果修改链接状态&lt;/p>
&lt;h3 id="json数据库">JSON数据库&lt;/h3>
&lt;p>slave统一将响应写入mongoDB，不做业务逻辑处理，更轻量&lt;/p>
&lt;h3 id="jekins持续集成">jekins持续集成&lt;/h3>
&lt;p>通过etcd发现爬虫实例，推送最新代码并部署&lt;/p></description></item><item><title>基于RocketMQ的JAVA消息服务</title><link>https://run.halfbit.top/post/%E5%9F%BA%E4%BA%8Erocketmq%E7%9A%84java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 10 Aug 2017 11:07:33 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%9F%BA%E4%BA%8Erocketmq%E7%9A%84java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1/</guid><description>&lt;p>基于RocketMQ的JAVA消息服务&lt;/p>
&lt;!-- more -->
&lt;h2 id="java消息服务-jms基础">Java消息服务（ JMS）基础&lt;/h2>
&lt;blockquote>
&lt;p>Java消息服务（Java Message Service，JMS）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。 Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。
Java消息服务- 维基百科，自由的百科全书
&lt;a href="https://zh.wikipedia.org/zh-hans/Java">https://zh.wikipedia.org/zh-hans/Java&lt;/a>消息服务&lt;/p>
&lt;/blockquote>
&lt;h3 id="异构平台的通信和集成">异构平台的通信和集成&lt;/h3>
&lt;p>使用消息传送机制，可以向在完全不同的平台上实现的应用程序和系统请求调用服务。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-08-10-11-34-18.jpg" alt="">&lt;/p>
&lt;h3 id="提升吞吐量缓解系统瓶颈">提升吞吐量，缓解系统瓶颈&lt;/h3>
&lt;p>与一个同步组件处理众多请求时，众多请求一个接一个地积聚阻塞不同，这时候请求会发送到一个消息传送系统， 该系统将该请求分发给多个消息侦听器组件。如此一来，就缓解了单独采用点对点同步连接带来的系统瓶颈，在某些情况下，甚至可以完全消除这些瓶颈。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-08-10-11-38-27.jpg" alt="">&lt;/p>
&lt;h3 id="异步">异步&lt;/h3>
&lt;p>当执行长时间运行请求时，最终用户可以在系统上继续做其他工作。一旦该请求处理完毕，就立即告知最终用户，并将处理结果回传给最终用户。通过使用消息传送机制，最终用户就能够以更短的等待时间来完成更多的工作，使得最终用户拥有更高的生产率。&lt;/p>
&lt;h3 id="敏捷和解耦">敏捷和解耦&lt;/h3>
&lt;p>体系结构敏捷性是对不断变化的环境快速响应的能力。通过使用消息传送机制来抽象和去 耦组件，就能够快速地响应软件、硬件，甚至是业务的变化。&lt;/p>
&lt;h2 id="术语">术语&lt;/h2>
&lt;h3 id="通用术语">通用术语&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Message&lt;/strong>： 消息，包含消息头和消息体。&lt;code>A message basically has two parts: a header and a payload. The header is comprised of special fields that are used to identify the message, declare attributes of the message, and provide information for routing.&lt;/code>&lt;/li>
&lt;li>&lt;strong>MessageProducer&lt;/strong> ： 生产者，&lt;code>The MessageProducer is the base interface for the TopicPublisher and the QueueSender.&lt;/code>&lt;/li>
&lt;li>&lt;strong>MessageConsumer&lt;/strong>： 消费者， &lt;code>The MessageConsumer is the base interface for the TopicSubscriber and the QueueReceiver.&lt;/code>&lt;/li>
&lt;li>&lt;strong>Topic&lt;/strong>： Topic用于标识消息服务上的一个物理主题，主题是消息发布和订阅的通道，&lt;code>The Topic is an administered object that acts as a handle or identifier for an actual topic, called a physical topic, on the messaging server. A physical topic is a channel to which many clients can subscribe and publish. When a JMS client delivers a Message object to a topic, all the clients subscribed to that topic receive the Message.&lt;/code>&lt;/li>
&lt;li>&lt;strong>Queue&lt;/strong>：Queue用于标识消息服务上的一个物理队列，物理队列是消息发送和接收的通道，&lt;code>The Queue is an administered object that acts as a handle or identifier for an actual queue, called a physical queue , on the messaging server. A physical queue is a channel through which many clients can receive and send messages.&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="rocketmq概念术语">RocketMQ概念术语&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Producer Group&lt;/strong>：标识发送同一类消息的Producer，通常发送逻辑一致。发送普通消息的时候，仅标识使用，并无特别用处&lt;/li>
&lt;li>&lt;strong>Consumer Group&lt;/strong>：标识一类Consumer的集合名称，这类Consumer通常消费一类消息，且消费逻辑一致。同一个Consumer Group下的各个实例将共同消费topic的消息，起到负载均衡的作用。RocketMQ要求同一个Consumer Group的消费者必须要拥有相同的注册信息，即必须要听一样的topic(并且tag也一样)。&lt;/li>
&lt;li>&lt;strong>Tag&lt;/strong>：消息的二级分类，同一个topic的消息虽然逻辑管理是一样的。但是消费topic1的时候，如果你订阅的时候指定的是tagA，那么tagB的消息将不会投递。&lt;/li>
&lt;li>&lt;strong>Offset&lt;/strong>：消息的消费进度。RocketMQ中，有很多offset的概念。但通常我们只关心暴露到客户端的offset。一般我们不特指的话，就是指逻辑Message Queue下面的offset。消费进度以Consumer Group为粒度管理，不同Consumer Group之间消费进度彼此不受影响，即消息A被Consumer Group1消费过，也会再给Consumer Group2消费。每次消息消费成功后，这个offset在会先更新到内存，而后定时持久化。在集群消费模式下，会同步持久化到broker，而在广播模式下，则会持久化到本地文件。&lt;/li>
&lt;/ul>
&lt;h3 id="结构术语">结构术语&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Broker&lt;/strong>：消息中转角色，负责存储消息，转发消息，一般也称为 Server。在 JMS 规范中称为 Provider。&lt;code>A message server, also called a message router or broker, is responsible for delivering messages from one messaging client to other messaging clients.&lt;/code>&lt;/li>
&lt;li>&lt;strong>NameServer&lt;/strong>：寻址服务。用于把Broker的路由信息做聚合。客户端依靠Name Server决定去获取对应topic的路由信息，从而决定对哪些Broker做连接。&lt;/li>
&lt;/ul>
&lt;p>逻辑结构：
&lt;img src="https://run.halfbit.top/image/2017-08-10-12-53-31.jpg" alt="">&lt;/p>
&lt;p>物理部署结构：
&lt;img src="https://run.halfbit.top/image/2017-08-10-12-54-59.jpg" alt="">&lt;/p>
&lt;h3 id="消费模式">消费模式&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>集群消费CLUSTERING&lt;/strong>：一个Consumer Group中的各个Consumer实例分摊去消费消息，即一条消息只会投递到一个Consumer Group下面的一个实例，每个Consumer是平均分摊Message Queue的去做拉取消费。&lt;/li>
&lt;li>&lt;strong>广播消费BROADCASTING&lt;/strong>：消息将对一个Consumer Group下的各个Consumer实例都投递一遍。即即使这些 Consumer 属于同一个Consumer Group，消息也会被Consumer Group 中的每个Consumer都消费一次，一个消费组下的每个消费者实例都获取到了topic下面的每个Message Queue去拉取消费。&lt;/li>
&lt;/ul>
&lt;h3 id="消息发送模式">消息发送模式&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>同步阻塞&lt;/strong>：消息到达broker之后才返回，对应&lt;code>synSend&lt;/code>。&lt;/li>
&lt;li>&lt;strong>异步回调&lt;/strong>：消息发送结束后触发回调，对应&lt;code>asynSend&lt;/code>。&lt;/li>
&lt;li>&lt;strong>发送即忘&lt;/strong>：只管发送，不管是否到达broker，对应&lt;code>sendOneWay&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="使用场景">使用场景&lt;/h2>
&lt;h3 id="普通消息">普通消息&lt;/h3>
&lt;p>Producer：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">val message = DemoMessage(&amp;#34;suclogger&amp;#34;, &amp;#34;plain_message&amp;#34;, &amp;#34;syncSend&amp;#34;)
demoProducer.synSend(&amp;#34;suclogger&amp;#34;, &amp;#34;&amp;#34;, message)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Consumer:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@MQConsumer(consumerGroup = &amp;#34;camaro.mq.consumer&amp;#34;, topic = &amp;#34;suclogger&amp;#34;)
class DemoConsumer : AbstractMQPushConsumer&amp;lt;DemoMessage&amp;gt;() {
override fun process(message:DemoMessage) : Boolean {
println(message)
return true
}
}
@MQConsumer(consumerGroup = &amp;#34;consumer_withtag_suclogger_local&amp;#34;, topic = &amp;#34;suclogger&amp;#34;, tag = arrayOf(&amp;#34;tagA&amp;#34;, &amp;#34;tagB&amp;#34;))
class DemoConsumerWithTag : AbstractMQPushConsumer&amp;lt;DemoMessage&amp;gt;() {
override fun process(message:DemoMessage) : Boolean {
println(message)
return true
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="消息消费失败后重试">消息消费失败后重试&lt;/h4>
&lt;p>消息消费返回false触发重试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@MQConsumer(consumerGroup = &amp;#34;camaro.mq.consumer&amp;#34;, topic = &amp;#34;suclogger&amp;#34;)
class DemoConsumer : AbstractMQPushConsumer&amp;lt;DemoMessage&amp;gt;() {
override fun process(message:DemoMessage) : Boolean {
println(message)
return false
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="广播消息">广播消息&lt;/h3>
&lt;p>Producer：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> @Bean
fun broadcastMessage() = CommandLineRunner {
val message = DemoMessage(&amp;#34;suclogger&amp;#34;, &amp;#34;broadcast_message&amp;#34;, &amp;#34;oneway&amp;#34;)
demoProducer.sendOneWay(&amp;#34;suclogger-broadcast&amp;#34;, &amp;#34;&amp;#34;, message)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Consumer：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@MQConsumer(topic = &amp;#34;suclogger-broadcast&amp;#34;, consumerGroup = &amp;#34;consumer_broadcast_suclogger_local_b1&amp;#34;, messageMode = &amp;#34;BROADCASTING&amp;#34;)
class AnonmouseMessageConsumer : AbstractMQPushConsumer&amp;lt;Any&amp;gt;() {
override fun process(message: Any?): Boolean {
println(message.toString())
return true
}
}
@MQConsumer(topic = &amp;#34;suclogger-broadcast&amp;#34;, consumerGroup = &amp;#34;consumer_broadcast_suclogger_local_b2&amp;#34;, messageMode = &amp;#34;BROADCASTING&amp;#34;)
class AnonmouseMessageConsumerOther : AbstractMQPushConsumer&amp;lt;Any&amp;gt;() {
override fun process(message: Any?): Boolean {
println(message.toString())
return true
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="有序消息">有序消息&lt;/h3>
&lt;p>最简单的方式：创建Topic的时候只选择包含一个queue。
如果要增加吞吐量：发送消息的时候选择queue来实现部分有序。&lt;/p>
&lt;p>Producer:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> @Bean
fun orderMessage() = CommandLineRunner {
demoProducer.sendOneWayOrderly(&amp;#34;suclogger&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;this is for 1&amp;#34;, &amp;#34;1&amp;#34;)
demoProducer.sendOneWayOrderly(&amp;#34;suclogger&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;this is for 2&amp;#34;, &amp;#34;2&amp;#34;)
demoProducer.sendOneWayOrderly(&amp;#34;suclogger&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;this is for 3&amp;#34;, &amp;#34;3&amp;#34;)
demoProducer.sendOneWayOrderly(&amp;#34;suclogger&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;this is for 4&amp;#34;, &amp;#34;4&amp;#34;)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Consumer:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@MQConsumer(consumerGroup = &amp;#34;consumer_order_suclogger_local&amp;#34;, topic = &amp;#34;suclogger&amp;#34;, consumeMode = &amp;#34;ORDERLY&amp;#34;)
class DemoConsumerOther : AbstractMQPushConsumer&amp;lt;Any&amp;gt;() {
override fun process(message:Any) : Boolean {
println(message)
return true
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="事务消息">事务消息&lt;/h3>
&lt;p>基于两阶段提交的思想：&lt;a href="http://suclogger.me/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D/">分布式系统设计迷思&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-08-10-14-23-21.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>事务回查逻辑不完整&lt;/li>
&lt;li>下游事务不能失败&lt;/li>
&lt;/ul>
&lt;p>预期发布：&lt;a href="https://issues.apache.org/jira/browse/ROCKETMQ-123">issur&lt;/a>&lt;/p>
&lt;h2 id="部署和推荐姿势">部署和推荐姿势&lt;/h2>
&lt;p>&lt;a href="http://suclogger.me/RocketMQ/">部署和推荐姿势&lt;/a>&lt;/p></description></item><item><title>逆向之Funnel内购破解</title><link>https://run.halfbit.top/post/%E9%80%86%E5%90%91%E4%B9%8Bfunnel%E5%86%85%E8%B4%AD%E7%A0%B4%E8%A7%A3/</link><pubDate>Wed, 05 Jul 2017 01:02:23 +0000</pubDate><guid>https://run.halfbit.top/post/%E9%80%86%E5%90%91%E4%B9%8Bfunnel%E5%86%85%E8%B4%AD%E7%A0%B4%E8%A7%A3/</guid><description>&lt;p>记Funnel的内购破解。&lt;/p>
&lt;!-- more -->
&lt;p>最近学英语用&lt;a href="https://itunes.apple.com/cn/app/funnel/id964666344">Funnel&lt;/a>听国外新闻。
Funnel 包含一个 25 元的内购，解锁后可以开启自动播放和连播功能。
IAP的通用破解此处不表，Funnel多做了一步二次校验：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/IMG_2265.JPG" alt="">
提示：&lt;code>Receipt verification failed&lt;/code>
直接搜索字符串定位代码位置：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-07-05-01-13-34.jpg" alt="">&lt;/p>
&lt;p>显然要绕过校验逻辑需要在两个红框处处理。
第一处汇编代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">0000000100027c4c ldrb w25, [x0, #0x18]
0000000100027c50 tbnz w25, 0x4, loc_100027c74
0000000100027c54 bl imp___stubs___TMaC14SwiftyStoreKit14SwiftyStoreKit
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>tbnz的定义（ARM.Reference_Manual）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">TBNZ Xn|Wn, #uimm6, label
Test and Branch Not Zero: conditionally jumps to label if bit number uimm6 in register Xn is not zero. The bit number implies the width of the register, which may be written and should be disassembled as Wn if uimm is less than 32. Limited to a branch offset range of ±32KiB.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>w25&lt;/code>寄存器不为0时会触发跳转到校验逻辑块。
在偏移&lt;code>0000000100027c50&lt;/code>处添加断点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) image list -o -f | grep QUICK\ iOS\ App
[ 0] 0x000000000006c000 /var/containers/Bundle/Application/2A6E51E2-ADC9-4B32-9F4E-178C0BD2E8A3/QUICK iOS App.app/QUICK iOS App(0x000000010006c000)
(lldb) br set -a 0x000000000006c000+0x0000000100027c50
Breakpoint 1: where = QUICK iOS App`_mh_execute_header + 137840, address = 0x0000000100093c50
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第二处汇编代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">0000000100027cf0 bl imp___stubs___TZFC14SwiftyStoreKit14SwiftyStoreKit14verifyPurchasefT9productIdSS9inReceiptGVs10DictionarySSPs9AnyObject___OS_20VerifyPurchaseResult ; static SwiftyStoreKit.SwiftyStoreKit.verifyPurchase (productId : Swift.String, inReceipt : [Swift.String : Swift.AnyObject]) -&amp;gt; SwiftyStoreKit.VerifyPurchaseResult
0000000100027cf4 tbz w0, 0x0, loc_100027edc
0000000100027cf8 adrp x8, #0x100071000
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据&lt;code>SwiftyStoreKit.SwiftyStoreKit.verifyPurchase&lt;/code>的值决定是否校验。
添加正则断点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) rb SwiftyStoreKit.SwiftyStoreKit.verifyPurchase
Breakpoint 2: where = SwiftyStoreKit`static SwiftyStoreKit.SwiftyStoreKit.verifyPurchase (productId : Swift.String, inReceipt : Swift.Dictionary&amp;lt;Swift.String, Swift.AnyObject&amp;gt;) -&amp;gt; SwiftyStoreKit.VerifyPurchaseResult, address = 0x0000000100396dac
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在Funnel中点击开启AutoPlay，触发第一个断点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Process 6338 stopped
* thread #1, queue = &amp;#39;com.apple.main-thread&amp;#39;, stop reason = breakpoint 1.1
frame #0: 0x0000000100093c50 QUICK iOS App`_mh_execute_header + 162896
QUICK iOS App`_mh_execute_header:
-&amp;gt; 0x100093c50 &amp;lt;+162896&amp;gt;: tbnz w25, #0x4, 0x100093c74 ; QUICK iOS App.__TEXT.__text + 137876
0x100093c54 &amp;lt;+162900&amp;gt;: bl 0x1000b9de0 ; symbol stub for: type metadata accessor for SwiftyStoreKit.SwiftyStoreKit
0x100093c58 &amp;lt;+162904&amp;gt;: mov x25, x0
0x100093c5c &amp;lt;+162908&amp;gt;: mov x0, x22
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看现有寄存器的值：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) p $w25
(unsigned int) $0 = 112
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置寄存器值为0，禁止跳转：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) po $w25 = 0
&amp;lt;nil&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>resume线程，触发第二个断点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Process 6338 stopped
* thread #1, queue = &amp;#39;com.apple.main-thread&amp;#39;, stop reason = breakpoint 2.1
frame #0: 0x0000000100396dac SwiftyStoreKit`static SwiftyStoreKit.SwiftyStoreKit.verifyPurchase (productId : Swift.String, inReceipt : Swift.Dictionary&amp;lt;Swift.String, Swift.AnyObject&amp;gt;) -&amp;gt; SwiftyStoreKit.VerifyPurchaseResult
SwiftyStoreKit`static SwiftyStoreKit.SwiftyStoreKit.verifyPurchase (productId : Swift.String, inReceipt : Swift.Dictionary&amp;lt;Swift.String, Swift.AnyObject&amp;gt;) -&amp;gt; SwiftyStoreKit.VerifyPurchaseResult:
-&amp;gt; 0x100396dac &amp;lt;+0&amp;gt;: stp x22, x21, [sp, #-0x30]!
0x100396db0 &amp;lt;+4&amp;gt;: stp x20, x19, [sp, #0x10]
0x100396db4 &amp;lt;+8&amp;gt;: stp x29, x30, [sp, #0x20]
0x100396db8 &amp;lt;+12&amp;gt;: add x29, sp, #0x20 ; =0x20
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>直接让线程返回0 ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) thread return 0
* thread #1, queue = &amp;#39;com.apple.main-thread&amp;#39;, stop reason = breakpoint 2.1
frame #0: 0x00000001000921cc QUICK iOS App`_mh_execute_header + 156108
QUICK iOS App`_mh_execute_header:
-&amp;gt; 0x1000921cc &amp;lt;+156108&amp;gt;: mov x0, x21
0x1000921d0 &amp;lt;+156112&amp;gt;: bl 0x100073910 ; QUICK iOS App.__TEXT.__text + 5936
0x1000921d4 &amp;lt;+156116&amp;gt;: mov x0, x22
0x1000921d8 &amp;lt;+156120&amp;gt;: bl 0x1000ba368 ; symbol stub for: swift_unknownRelease
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功绕过IAP校验：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/IMG_2266.PNG" alt="">&lt;/p>
&lt;p>特别感谢：&lt;strong>《Advanced Apple Debugging &amp;amp; Reverse Engineering》 By Derek Selander&lt;/strong>&lt;/p></description></item><item><title>RocketMQ</title><link>https://run.halfbit.top/post/rocketmq/</link><pubDate>Mon, 03 Jul 2017 22:10:45 +0000</pubDate><guid>https://run.halfbit.top/post/rocketmq/</guid><description>&lt;p>介绍一下近期做的RocketMQ接入的工作。&lt;/p>
&lt;!-- more -->
&lt;h2 id="docker">docker&lt;/h2>
&lt;p>官方在external中提供了namesrv和brokr的标准镜像：&lt;a href="http://https://github.com/apache/incubator-rocketmq-externals/tree/master/rocketmq-docker">rocketmq-docker&lt;/a>
但是标准镜像的jvm启动参数是写死在&lt;code>runserver.sh&lt;/code>和&lt;code>runbroker.sh&lt;/code>中的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">JAVA_OPT=&amp;#34;${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:PermSize=128m -XX:MaxPermSize=320m&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义在&lt;code>JAVA_OPT&lt;/code>中会被后续的&lt;code>-Xms4g -Xmx4g -Xmn2g&lt;/code>覆盖。所以需要修改一下Dockfile，使用&lt;code>sed&lt;/code>命令替换：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sed -i &amp;#39;s/-Xm[sxn]..//g&amp;#39; runbroker.sh \
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为是集群部署，还需要写入相关配置并将brokerId和brokerName透到参数中，以下为双主集群配置，其他配置同理：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> &amp;amp;&amp;amp; echo -e &amp;#34;brokerClusddrName=camaro\nbrokerId=0\ndeleddWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH&amp;#34; &amp;gt; broker.properties \
&amp;amp;&amp;amp; echo -e &amp;#34;\nbrokerName=$BROKER_NAME&amp;#34; &amp;gt;&amp;gt; broker.properties \
&amp;amp;&amp;amp; echo -e &amp;#34;\nbrokerIP1=$BROKER_IP&amp;#34; &amp;gt;&amp;gt; broker.properties \
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果需要自动创建Topic，还需要添加启动参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">autoCreateTopicEnable=true
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以使用compose组装nameserver和broker：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">version: &amp;#39;2&amp;#39;
services:
rocketmq-namesrv:
image: daocloud.io/maihaoche/rocketmq-namesrv:4.0.1
restart: always
network_mode: host
ports:
- 9876:9876
volumes:
- /root/logs:/opt/logs
- /root/store:/opt/store
rocketmq-broker:
image: daocloud.io/maihaoche/rocketmq-broker:4.0.1
restart: always
network_mode: host
ports:
- 10911:10911
- 10909:10909
volumes:
- /root/logs:/opt/logs
- /root/store:/opt/store
environment:
- BROKER_IP=172.21.10.101
- NAMESRV_ADDR=172.21.10.101:9876
- BROKER_NAME=broker-101
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不同的机器可以通过修改compose文件中的&lt;code>environment&lt;/code>参数进行部署。
务必配置网络类型为host，否则会导致nameserver返回broker的docker0对应IP使客户端无法连接。&lt;/p>
&lt;h2 id="benchmark">benchmark&lt;/h2>
&lt;p>Broker和namesrv的jvm参数配置为&lt;code>-Xms2g -Xmx2g -Xmn1g&lt;/code>，两台双主集群下跑benchmark。
benchmark使用consumer和provider的jvm参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">-server -Xms1g -Xmx1g -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:SurvivorRatio=8 -XX:+DisableExplicitGC -verbose:gc -Xloggc:/dev/shm/rmq_srv_gc.log -XX:+PrintGCDetails -XX:-OmitStackTraceInFastThrow -XX:-UseLargePages -XX:+PerfDisableSharedMem
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>producer 64线程，消息体10K，TPS峰值为5,000左右：
&lt;img src="https://run.halfbit.top/image/benchmark-producer.png" alt="">&lt;/p>
&lt;p>consumer 64 线程，消息体10K，TPS峰值为28,000：
&lt;img src="https://run.halfbit.top/image/benchmark-consumer.png" alt="">&lt;/p>
&lt;h2 id="starter">starter&lt;/h2>
&lt;p>代码已经开源：&lt;a href="https://github.com/maihaoche/rocketmq-spring-boot-starter">github&lt;/a>
推荐姿势：&lt;/p>
&lt;h3 id="producer">producer&lt;/h3>
&lt;h4 id="pruducer">pruducer&lt;/h4>
&lt;p>我们将producer设计成了单例，你可以全局只继承一次AbstractMQProducer，然后用这个producer发送不同topic消息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">AbstractMQProducer.synSend(String topic, Object msgObj)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，你可以定义多个类继承&lt;code>AbstractMQProducer&lt;/code>，每个类都重写父类中的&lt;code>getTopic()&lt;/code>方法，这样注入对应的bean就可以省去topic直接发送：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">AbstractMQProducer.sendMessage(Object msgObj)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="pruducergroup">pruducerGroup&lt;/h4>
&lt;p>因为producer的单例设计，我们推荐同一个应用所有消息采用同一个pruducerGroup，放在配置文件中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">camaro:
mq:
name-server-address: 172.21.10.101:9876;172.21.10.111:9876
producer-group: local_pufang_producer
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="consumer">consumer&lt;/h3>
&lt;p>不同consumerGroup都有自己的topic消费位点记录，所以同一条消息在不同consumerGroup中都可以被消费一次，相应的，同一条消息在同一个consumerGroup中只能消费一次。&lt;/p>
&lt;p>在某些极端情况下，同一条消息在同一个consumerGroup中会被多次消费，所以消费代码要做到幂等。&lt;/p>
&lt;h2 id="console">console&lt;/h2>
&lt;p>我们还基于开源的 &lt;a href="https://github.com/apache/incubator-rocketmq-externals/tree/master/rocketmq-console">console&lt;/a> 项目做了一层kotlin封装，展示效果采用&lt;a href="https://github.com/maihaoche/muu">muu&lt;/a>：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-07-04-00-24-34.jpg" alt="">&lt;/p>
&lt;h2 id="why">why&lt;/h2>
&lt;p>到最后说几句为什么做这件事情。&lt;/p>
&lt;h3 id="why-not-ons">why not ONS&lt;/h3>
&lt;p>平时在用ONS的过程中都遇到过难以调试的困扰，消息不知道发了没有，消息不知道被谁消费了等等问题，归根结底主要有以下原因：&lt;/p>
&lt;ol>
&lt;li>由于我们采用的都是公网的ons，消息服务之间无法做到物理隔离;&lt;/li>
&lt;li>问题排查，topic维护需要繁琐的子账号授权，大量的人肉运维；&lt;/li>
&lt;li>ons是根据topic来计费，我们单topic的消息量是很少的，使用ons非常的不经济。&lt;/li>
&lt;/ol>
&lt;h3 id="why-rocketmq">why RocketMQ&lt;/h3>
&lt;p>直接促成我们使用RocketMQ的是上上周的OSC上RocketMQ的宣讲，主要有以下优点：&lt;/p>
&lt;ol>
&lt;li>国产&lt;/li>
&lt;li>支持消息追溯&lt;/li>
&lt;li>支持广播&lt;/li>
&lt;li>有较好的console和运维终端&lt;/li>
&lt;li>可以比较好的保留我们现有的ons使用习惯&lt;/li>
&lt;/ol></description></item><item><title>Kotlin:初恋的感觉</title><link>https://run.halfbit.top/post/kotlin-%E5%88%9D%E6%81%8B%E7%9A%84%E6%84%9F%E8%A7%89/</link><pubDate>Fri, 30 Jun 2017 02:09:07 +0000</pubDate><guid>https://run.halfbit.top/post/kotlin-%E5%88%9D%E6%81%8B%E7%9A%84%E6%84%9F%E8%A7%89/</guid><description>&lt;p>很久没有这么喜欢写代码了😄。&lt;/p>
&lt;!-- more --></description></item><item><title>代码重构之：Mybatis批量写入</title><link>https://run.halfbit.top/post/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84%E4%B9%8Bmybatis%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5/</link><pubDate>Thu, 22 Jun 2017 23:28:28 +0000</pubDate><guid>https://run.halfbit.top/post/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84%E4%B9%8Bmybatis%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5/</guid><description>&lt;p>今天做了一点代码重构，以此为记。&lt;/p>
&lt;!-- more -->
&lt;p>业务场景是作为dubbo服务提供方，先到一张表写入数据后取出主键，以此主键为外键到另一张表写入数据。
因为处理时间过长，导致一系列的dubbo，nginx超时。&lt;/p>
&lt;p>遍历记录列表，2张表每次各写入一条记录，写入2000条耗时约100s，日志输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">2017-06-22 22:34:13:2017-06-22 22:34:44.849 INFO 177 --- [:23889-thread-9] c.c.c.s.impl.OOXXServiceImpl :...
2017-06-22 22:35:51:2017-06-22 22:36:22.261 INFO 177 --- [:23889-thread-9] c.c.c.s.impl.OOXXServiceImpl : finish insert
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>要支持批量写入并且回传ID，需要Mybatis版本大于3.3.1，详情见：&lt;a href="https://github.com/mybatis/mybatis-3/pull/547">github issue&lt;/a>&lt;/strong>&lt;/p>
&lt;p>重构代码添加mapper层方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;insert id=&amp;#34;batchInsert&amp;#34; useGeneratedKeys=&amp;#34;true&amp;#34; keyProperty=&amp;#34;someId&amp;#34;&amp;gt;
INSERT INTO some_table
&amp;lt;trim prefix=&amp;#34;(&amp;#34; suffix=&amp;#34;)&amp;#34; suffixOverrides=&amp;#34;,&amp;#34;&amp;gt;
&amp;lt;if test=&amp;#34;list[0].otherId != null&amp;#34;&amp;gt;
otherId,
&amp;lt;/if&amp;gt;
&amp;lt;/trim&amp;gt;
values
&amp;lt;foreach collection=&amp;#34;list&amp;#34; item=&amp;#34;someDO&amp;#34; index=&amp;#34;index&amp;#34; separator=&amp;#34;,&amp;#34; &amp;gt;
&amp;lt;trim prefix=&amp;#34;(&amp;#34; suffix=&amp;#34;)&amp;#34; suffixOverrides=&amp;#34;,&amp;#34;&amp;gt;
&amp;lt;if test=&amp;#34;someDO.otherId != null&amp;#34;&amp;gt;
#{someDO.otherId,jdbcType=BIGINT},
&amp;lt;/if&amp;gt;
&amp;lt;/trim&amp;gt;
&amp;lt;/foreach&amp;gt;
&amp;lt;/insert&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主键会回写到传入的DO中。
两张表各写入2000，共计耗时1s，提升100倍，日志输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">2017-06-22 22:57:13:2017-06-22 22:57:29.377 INFO 178 --- [23889-thread-51] c.c.c.s.impl.OOXXServiceImpl : ...)
2017-06-22 22:57:13:2017-06-22 22:57:30.283 INFO 178 --- [23889-thread-51] com.ooxx.core.ao.impl... : batch insert OO count : 2000
2017-06-22 22:57:13:2017-06-22 22:57:30.786 INFO 178 --- [23889-thread-51] c.c.core.ao.impl.... : batch insert XX , count 2000
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>逆向之钉钉消息和Ding已读反馈的拦截</title><link>https://run.halfbit.top/post/%E9%80%86%E5%90%91%E4%B9%8B%E9%92%89%E9%92%89%E6%B6%88%E6%81%AF%E5%92%8Cding%E5%B7%B2%E8%AF%BB%E5%8F%8D%E9%A6%88%E7%9A%84%E6%8B%A6%E6%88%AA/</link><pubDate>Wed, 14 Jun 2017 23:29:29 +0000</pubDate><guid>https://run.halfbit.top/post/%E9%80%86%E5%90%91%E4%B9%8B%E9%92%89%E9%92%89%E6%B6%88%E6%81%AF%E5%92%8Cding%E5%B7%B2%E8%AF%BB%E5%8F%8D%E9%A6%88%E7%9A%84%E6%8B%A6%E6%88%AA/</guid><description>&lt;p>有没有那么些时候，你就想假装在别处。&lt;/p>
&lt;!-- more -->
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>依照用到的顺序如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tool&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Clutch&lt;/td>
&lt;td>砸壳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hopper Disassembler v4&lt;/td>
&lt;td>反编译，静态分析&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flipboard FLEX Loader&lt;/td>
&lt;td>视图分析&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lldb + debugserver&lt;/td>
&lt;td>断点， 调试&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flex 3&lt;/td>
&lt;td>Tweak&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>首先是砸壳，细节不表，有个trick就是先使用mac端itunes下载应用同步到手机后砸壳，这样可以同时得到&lt;code>arm v7&lt;/code>和&lt;code>AArch64&lt;/code>版本，32位反编译后的代码可读性高，64位用于读取偏移量设置断点。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-06-14-23-42-45.jpg" alt="">&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-06-14-23-43-10.jpg" alt="">&lt;/p>
&lt;h2 id="拦截ding已读反馈">拦截Ding已读反馈&lt;/h2>
&lt;p>从Ding列表点击一条未读的Ding进入这条Ding的详情，这条Ding就被标为已读，同时发送方收到已读的反馈：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/UNADJUSTEDNONRAW_thumb_1bbd.jpg?r=47" alt="">&lt;/p>
&lt;p>猜测已读逻辑是放在详情页中处理，视图加载完成即执行已读相关逻辑。
通过&lt;code>Flipboard FLEX Loader&lt;/code>查看Ding详情对应的视图：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/UNADJUSTEDNONRAW_thumb_1bbf.jpg?r=54" alt="">&lt;/p>
&lt;p>可以看到对应的视图是&lt;code>DTDingDetailViewControllerV2&lt;/code>，打开&lt;code>Hopper Disassemble&lt;/code>中查看对应代码逻辑：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-06-15-00-06-04.png" alt="">
延续之前的猜测，自然先看&lt;code>viewDidAppear&lt;/code>方法，反编译后的代码也是一目了然：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">void -[DTDingDetailViewControllerV2 viewDidAppear:](void * self, void * _cmd, char arg2) {
sp = sp - 0x1c;
r4 = self;
loc_1c0a398(sp, @selector(viewDidAppear:), arg2);
loc_1c0a38c(r4, @selector(dingModel));
r6 = loc_1c0a38c(loc_1c0a390(), @selector(confirmStatus));
sub_1c0a388();
if (r6 == 0x0) {
loc_1c0a38c(r4, @selector(confirmDing));
}
return;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>大致是先判断用户的登陆状态，然后调用&lt;code>confirmDing&lt;/code>来执行已读逻辑：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">void -[DTDingDetailViewControllerV2 confirmDing](void * self, void * _cmd) {
...
loc_1c0a38c(stack[2009], @selector(confirmDing:successBlock:failureBlock:), r8, r10, sp + 0x34, sp + 0x1c);
...
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>猜测关键逻辑在这个&lt;code>confirmDing&lt;/code>的调用处。
&lt;code>Hopper Disassemble&lt;/code>帮我们解析出了方法名字符串：&lt;code>confirmDing&lt;/code>，但是没有打印出对象名，打个断点确认一下：
先回到64位确认偏移量：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-06-15-13-16-40.jpg" alt="">&lt;/p>
&lt;p>获取ASLR (地址空间配置随机加载) 偏移量：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) image list -o -f | grep DingTalk
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>[ 0] 0x0000000000084000 /var/containers/Bundle/Application/E1551D09-5D65-485B-A283-A8E6393C4345/DingTalk.app/DingTalk(0x0000000100084000)&lt;/p>
&lt;/blockquote>
&lt;p>根据相对地址+偏移量设置断点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) br set -a 0x0000000000084000+0x00000001011cb348
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Breakpoint 1: where = DingTalk`_mh_execute_header + 18632932, address = 0x000000010124f348&lt;/p>
&lt;/blockquote>
&lt;p>点击Ding消息进入详情，断点触发：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2017-06-15-13-17-58.jpg" alt="">
messageSend的第一个参数就是对象了，我们通过&lt;code>po&lt;/code>命令打印对象的类名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) po [$arg1 class]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>DTDingServiceIMP&lt;/p>
&lt;/blockquote>
&lt;p>或者直接&lt;code>po&lt;/code>打印实例的对象和地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(lldb) po $arg1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>DTDingServiceIMP: 0x174449a50&lt;/p>
&lt;/blockquote>
&lt;p>这样我们就确认了关键逻辑在&lt;code>DTDingServiceIMP confirmDing&lt;/code>中，简单起见我们直接hook这个方法返回即可。&lt;/p>
&lt;h2 id="拦截消息已读反馈">拦截消息已读反馈&lt;/h2>
&lt;p>跟上述大同小异，大致分析路径为：
&lt;code>DTMessageOTOViewcontroller reivedMessageNotification&lt;/code> -&amp;gt; &lt;code>DTMessageBaseViewController receivedMessageNotification&lt;/code>
-&amp;gt; &lt;code>DTMessageControllerDataSource sendMessageReadStatusWithMessage&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/UNADJUSTEDNONRAW_thumb_1bc2.jpg?r=47" alt="">&lt;/p>
&lt;h2 id="tweak">Tweak&lt;/h2>
&lt;p>定位到对应方法之后，当然你可以通过theos环境来写一个tweak，但是有两个不好，一个是麻烦，要dump头文件，然后写xm，打包，传到手机上安装，再是不好控制开关（除非写一个开关到设置中），不然只能卸载插件才能停止hook。
更方便快捷的方式是通过&lt;code>Flex 3&lt;/code> ：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/UNADJUSTEDNONRAW_thumb_1bc8.jpg" alt="">&lt;/p>
&lt;p>我已经把Patch提交到市场，欢迎下载体验。&lt;/p></description></item><item><title>ES使用filebeat收集nginx日志</title><link>https://run.halfbit.top/post/es%E4%BD%BF%E7%94%A8filebeat%E6%94%B6%E9%9B%86nginx%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 12 Jun 2017 10:15:37 +0000</pubDate><guid>https://run.halfbit.top/post/es%E4%BD%BF%E7%94%A8filebeat%E6%94%B6%E9%9B%86nginx%E6%97%A5%E5%BF%97/</guid><description>&lt;p>传统方案都是通过logstash模版解析nginx日志，现在使用filebeat自带的nginx模块就可以省去logstash。&lt;/p>
&lt;!-- more -->
&lt;h2 id="根据nginx日志配置调整设置">根据nginx日志配置调整设置&lt;/h2>
&lt;p>首先要看nginx的配置，如果nginx使用的是默认的日志配置，则忽略这一步。
否则需要根据nginx日志配置来配置filebeat的模版。&lt;/p>
&lt;p>比如我们的日志中添加了请求体的记录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">log_format main &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39;
&amp;#39;$status $body_bytes_sent $request_body &amp;#34;$http_referer&amp;#34; &amp;#39;
&amp;#39;&amp;#34;$http_user_agent&amp;#34; $http_x_forwarded_for&amp;#39;;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先修改template定义，添加&lt;code>request_body&lt;/code>字段，对应文件为&lt;code>filebeat.template.json&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;#34;request_body&amp;#34;: {
&amp;#34;ignore_above&amp;#34;: 1024,
&amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再到pipeline定义中解析设置， 修改pattern，对应文件为&lt;code>module/nginx/access/ingest/default.json&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> &amp;#34;%{IPORHOST:nginx.access.remote_ip} - %{DATA:nginx.access.user_name} \\[%{HTTPDATE:nginx.access.time}\\] \&amp;#34;%{WORD:nginx.access.method} %{DATA:nginx.access.url} HTTP/%{NUMBER:nginx.access.http_version}\&amp;#34; %{NUMBER:nginx.access.response_code} %{NUMBER:nginx.access.body_sent.bytes} %{DATA:nginx.access.request_body} \&amp;#34;%{DATA:nginx.access.referrer}\&amp;#34; \&amp;#34;%{DATA:nginx.access.agent}\&amp;#34; %{DATA:nginx.access.forwarded}&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="启动">启动&lt;/h2>
&lt;p>首先需要在ES添加两个插件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">bin/elasticsearch-plugin install ingest-user-agent
bin/elasticsearch-plugin install ingest-user-agent
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑&lt;code>filebeat.yml&lt;/code>：&lt;/p>
&lt;ol>
&lt;li>添加默认的prospector，配置log的路径&lt;/li>
&lt;li>修改output.elasticsearch的地址，端口，密码等&lt;/li>
&lt;/ol>
&lt;p>启动客户端，加载nginx模块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">nohup ./filebeat -e -modules=nginx -M &amp;#34;nginx.access.var.paths=[/data/logs/access*]&amp;#34; -M &amp;#34;nginx.error.var.paths=[/data/logs/error.log]&amp;#34; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="调整nginx日志配置后的变更">调整nginx日志配置后的变更&lt;/h2>
&lt;h3 id="ingest">Ingest&lt;/h3>
&lt;p>删除已经创建的pipeline&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">GET _ingest/pipeline
DELETE _ingest/pipeline/filebeat-5.4.1-nginx-access-default
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="index-templates">Index templates&lt;/h3>
&lt;p>因为默认不会覆盖已有的templates，所以要删除已经创建的templates：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">GET /_template/
DELETE /_template/filebeat
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者在配置文件中将overwrite设为true:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">output.elasticsearch:
template.overwrite: true
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="kibana查看图表">kibana查看图表&lt;/h2>
&lt;p>创建完成之后dashboard中会创建默认的几个面板。
Filebeat Nginx Dashboard：
&lt;img src="https://run.halfbit.top/image/2017-06-23-00-50-35.jpg" alt="">&lt;/p>
&lt;h2 id="追踪日志排查问题">追踪日志排查问题&lt;/h2>
&lt;p>客户端有个积压已久的问题：
&lt;img src="https://run.halfbit.top/image/2017-06-23-00-53-56.jpg?r=46" alt="">
应用没有看到相关日志，怀疑nginx层返回跳转指令，排查30X响应头：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">GET filebeat-2017.06.18/_search
{
&amp;#34;query&amp;#34;: {
&amp;#34;bool&amp;#34;: {
&amp;#34;must&amp;#34;: [
{&amp;#34;term&amp;#34;: {
&amp;#34;nginx.access.user_agent.os_name&amp;#34;: {
&amp;#34;value&amp;#34;: &amp;#34;iOS&amp;#34;
}
}
},
{&amp;#34;term&amp;#34;: {
&amp;#34;nginx.access.response_code&amp;#34;: {
&amp;#34;value&amp;#34;: &amp;#34;301&amp;#34;
}
}}
]
}
},
&amp;#34;sort&amp;#34;: [
{
&amp;#34;@timestamp&amp;#34;: {
&amp;#34;order&amp;#34;: &amp;#34;desc&amp;#34;
}
}
],
&amp;#34;size&amp;#34;: 20
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定位到是因为响应头为301却没有返回跳转地址：
&lt;img src="https://run.halfbit.top/image/2017-06-23-01-24-50.jpg" alt="">
通过flask模拟：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">import os
from flask import Flask,redirect
app = Flask(__name__)
@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def hello():
return redirect(&amp;#34;&amp;#34;, code=301)
if __name__ == &amp;#39;__main__&amp;#39;:
# Bind to PORT if defined, otherwise default to 5000.
port = int(os.environ.get(&amp;#39;PORT&amp;#39;, 5000))
app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=port)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功在客户端复现，通过客户端逻辑调整修复了这个困扰已久的问题。&lt;/p></description></item><item><title>为什么这么慢？</title><link>https://run.halfbit.top/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E6%85%A2/</link><pubDate>Fri, 09 Jun 2017 17:26:33 +0000</pubDate><guid>https://run.halfbit.top/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E6%85%A2/</guid><description>&lt;p>昨天差点引发了一个严重线上bug，以此为记。&lt;/p>
&lt;!-- more -->
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>我们现在采用的是logstash的jdbc插件同步mysql的数据。
这次上线的功能需要多关联一张表查询数据进入索引，直接体现在logstash jdbc配置文件中定义的SQL多了一个left join。&lt;/p>
&lt;h2 id="现象">现象&lt;/h2>
&lt;p>应用发布之后，tomcat启动耗时很长时间，很&lt;strong>慢&lt;/strong>。
进入应用，索引重建后依照惯例执行了全量索引的logstash脚本，但是索引迟迟没有创建成功，很&lt;strong>慢&lt;/strong>。&lt;/p>
&lt;h2 id="处理">处理&lt;/h2>
&lt;h3 id="tomcat启动慢">Tomcat启动慢&lt;/h3>
&lt;p>![](/image/login.dawanju.net - SecureCRT 2017-06-08 18-43-27.png)
从日志中找到罪魁祸首：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [*,*] milliseconds.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当时因为一次打不开页面，做了多次刷新操作，生成session ID的过程一只阻塞到完成所有session ID的创建，耗时接近4分钟。
&lt;a href="https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source">Tomcat官方文档&lt;/a>也给出了说明：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Tomcat 7+ heavily relies on SecureRandom class to provide random values for its session ids and in other places. Depending on your JRE it can cause delays during startup if entropy source that is used to initialize SecureRandom is short of entropy. You will see warning in the logs when this happens, e.g.:
&amp;lt;DATE&amp;gt; org.apache.catalina.util.SessionIdGenerator createSecureRandom
INFO: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [5172] milliseconds.
There is a way to configure JRE to use a non-blocking entropy source by setting the following system property: -Djava.security.egd=file:/dev/./urandom
Note the &amp;#34;/./&amp;#34; characters in the value. They are needed to work around known Oracle JRE bug #6202721. See also JDK Enhancement Proposal 123. It is known that implementation of SecureRandom was improved in Java 8 onwards.
Also note that replacing the blocking entropy source (/dev/random) with a non-blocking one actually reduces security because you are getting less-random data. If you have a problem generating entropy on your server (which is common), consider looking into entropy-generating hardware products such as &amp;#34;EntropyKey&amp;#34;.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Tomcat也给出了解决方案：&lt;strong>在启动的jvm参数中加入&lt;code>-Djava.security.egd=file:/dev/./urandom&lt;/code>&lt;/strong>，同时也警告说这种方式存在一些安全隐患。
添加jvm参数后启动就正常了：
![](/image/login.dawanju.net - SecureCRT 2017-06-08 18-42-47.png)&lt;/p>
&lt;h3 id="创建索引慢数据库">创建索引慢：数据库&lt;/h3>
&lt;p>怀疑因为多关联了一张表导致数据库查询耗时增加，进入RDS监控查看发现CPU出现峰值：
![](/image/RDS管理控制台 2017-06-08 20-04-51.png)&lt;/p>
&lt;p>结合之前RDS出现CPU飙升阿里工程师给出的解释：&lt;/p>
&lt;blockquote>
&lt;p>CPU高主要是由于这些慢查询导致，建议您先优化下这慢查询再观察下。&lt;/p>
&lt;/blockquote>
&lt;p>（小插曲，惊觉配置文件中写入的数据库地址被从备库误写为主库）
第一时间通过mysql的&lt;code>show processlist&lt;/code>找到创建索引的SQL进程执行&lt;code>kill&lt;/code>，保障其他业务不受影响。
然后，进入慢日志查询中，发现果然是创建索引的SQL执行时间超长，这条SQL执行时间长达492s：
&lt;img src="https://run.halfbit.top/image/2017-06-09-17-54-16.jpg" alt="">
接着，分析sql，怀疑新关联的表没有为关联的字段创建索引，马上在这个字段上创建索引。
随后创建索引，输出以下日志：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">[2017-06-08T19:36:22,802][INFO ][logstash.pipeline ] Starting pipeline {&amp;#34;id&amp;#34;=&amp;gt;&amp;#34;main&amp;#34;, &amp;#34;pipeline.workers&amp;#34;=&amp;gt;2, &amp;#34;pipeline.batch.size&amp;#34;=&amp;gt;125, &amp;#34;pipeline.batch.delay&amp;#34;=&amp;gt;5
[2017-06-08T19:36:22,850][INFO ][logstash.pipeline ] Pipeline main started
[2017-06-08T19:36:22,920][INFO ][logstash.agent ] Successfully started Logstash API endpoint {:port=&amp;gt;9600}
[2017-06-08T19:36:32,053][INFO ][logstash.inputs.jdbc ] (9.767000s) SELECT car.car_id AS car_id,
...
[2017-06-08T19:42:51,136][WARN ][logstash.agent ] stopping pipeline {:id=&amp;gt;&amp;#34;main&amp;#34;}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到logstash的日志中，执行SQL的时间为&lt;code>9.7s&lt;/code>，虽然时间略长，但是考虑到是多表关联+全表扫描，所以暂且任务数据库的问题已经处理完成。
但是还是没解决索引创建为什么这么慢的问题。
单次全量耗时为6分20s，系统资源冗余较多。
&lt;img src="https://run.halfbit.top/image/2017-06-09-18-26-34.jpg" alt="">&lt;/p>
&lt;h3 id="创建索引慢el">创建索引慢：EL&lt;/h3>
&lt;p>通过上面的日志输出看到logstash采用的是默认配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">pipeline.workers =&amp;gt; 2 // 并行的线程数
pipeline.batch.size=&amp;gt;125 // 单个线程单次处理的最大索引数
pipeline.batch.delay=&amp;gt;5 // 如果在这里定义的时间内没有达到最大索引数，也执行提交
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更多配置项参见&lt;a href="https://www.elastic.co/guide/en/logstash/current/logstash-settings-file.html">官网文档&lt;/a>。&lt;/p>
&lt;p>尝试更改配置为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">pipeline.workers =&amp;gt; 4 // 2*cpu
pipeline.batch.size=&amp;gt;20000
pipeline.batch.delay=&amp;gt;3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>日志如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">[2017-06-09T15:11:09,088][INFO ][logstash.pipeline ] Starting pipeline {&amp;#34;id&amp;#34;=&amp;gt;&amp;#34;main&amp;#34;, &amp;#34;pipeline.workers&amp;#34;=&amp;gt;4, &amp;#34;pipeline.batch.size&amp;#34;=&amp;gt;20000, &amp;#34;pipeline.batch.delay&amp;#34;=&amp;gt;3, &amp;#34;pipeline.max_inflight&amp;#34;=&amp;gt;80000}
[2017-06-09T15:11:09,088][WARN ][logstash.pipeline ] CAUTION: Recommended inflight events max exceeded! Logstash will run with up to 80000 events in memory in your current configuration. If your message sizes are large this may cause instability with the default heap size. Please consider setting a non-standard heap size, changing the batch size (currently 20000), or changing the number of pipeline workers (currently 4)
[2017-06-09T15:11:09,109][INFO ][logstash.pipeline ] Pipeline main started
[2017-06-09T15:11:09,154][INFO ][logstash.agent ] Successfully started Logstash API endpoint {:port=&amp;gt;9601}
[2017-06-09T15:11:18,651][INFO ][logstash.inputs.jdbc ] (10.100000s) SELECT car.car_id AS car_id,
...
[2017-06-09T15:15:49,619][WARN ][logstash.agent ] stopping pipeline {:id=&amp;gt;&amp;#34;main&amp;#34;}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>单次全量耗时4分30秒，docker容器显示的系统负载峰值（使用命令&lt;code>docker stats&lt;/code>）：
&lt;img src="https://run.halfbit.top/image/2017-06-09-18-27-35.jpg" alt="">
对应的系统负载峰值（使用命令&lt;code>vmstat -n 1&lt;/code>）：
![](/image/@iZ23qcuujszZ::tmp 2017-06-09 16-16-37.png)
基本已经榨干了ecs的所有计算资源。
尝试更多配置：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>配置&lt;/th>
&lt;th>耗时&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-w 4 -b 60000 -u 3&lt;/td>
&lt;td>4分25s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-w 6 -b 20000 -u 3&lt;/td>
&lt;td>4分13s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可以发现不管是提升worker数还是提升单次提交的数据，都无法继续提升性能，基本是这台2核ECS的极限了，而且同时ES的集群（2台2核4g）也出现了CPU的负载峰值：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/search_load.png" alt="">&lt;/p>
&lt;p>看来在现有的计算资源之下，我们只能暂且容忍这么长的全量时间了，后面继续调整ES的配置，看看会不会有提升。&lt;/p></description></item><item><title>在JAVA中执行shell</title><link>https://run.halfbit.top/post/%E5%9C%A8java%E4%B8%AD%E6%89%A7%E8%A1%8Cshell/</link><pubDate>Sun, 08 Jan 2017 23:32:51 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%9C%A8java%E4%B8%AD%E6%89%A7%E8%A1%8Cshell/</guid><description>&lt;p>今天抽时间解决了一个升级Elasticsearch后带来的一个问题。&lt;/p>
&lt;!-- more -->
&lt;p>起源是最初开发的一个用于维护搜索的项目&lt;code>infiniti&lt;/code>，主要功能是重建索引，创建备份，维护分词，排序控制等。其中重建索引的部分，原先是基于&lt;code>elasticsearch-jdbc&lt;/code>来做的，为了方便起见，从数据库导入数据的部分需要执行shell脚本。在&lt;a href="http://suclogger.me/MySQL%E5%88%B0Elasticsearch%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%B7%AF">前面一篇&lt;/a>文章中也有说到，ES升级到5.0之后，数据库同步的部分也切换到了&lt;code>logstash&lt;/code>，同样是通过执行shell脚本的方式同步数据。&lt;/p>
&lt;p>原先执行shell脚本的姿势是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Runtime.getRuntime().exec()
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一直稳定运行了大半年。&lt;/p>
&lt;p>但是更换到logstash的shell脚本之后，线上环境在执行shell的时候都会抛出OOM异常：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">java.lang.OutOfMemoryError: Java heap space
Dumping heap to /heapdump.hprof ...
Heap dump file created [4328855 bytes in 0.024 secs]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为daily环境没有出现过问题，上线当晚顿时吓出一身冷汗，因为ES的相关的搜索代码已经更新了，配套的logstash也是箭在弦上不得不发，第一件事（勿喷）：加jvm内存 -&amp;gt; 增加机器内存。
通过&lt;code>free&lt;/code>命令和&lt;code>top&lt;/code>命令可以看到机器的可用内存还非常非常多：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ free
total used free shared buff/cache available
Mem: 16268236 2229004 7143792 737712 6895440 12946664
Swap: 0 0 0
$ top
load average: 0.04, 0.04, 0.05
Tasks: 86 total, 1 running, 85 sleeping, 0 stopped, 0 zombie
%Cpu(s): 1.0 us, 0.5 sy, 0.0 ni, 98.5 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st
KiB Mem : 16268236 total, 7143296 free, 2229468 used, 6895472 buff/cache
KiB Swap: 0 total, 0 free, 0 used. 12946204 avail Mem
PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND
23250 admin 20 0 4738164 1.097g 15420 S 1.3 7.1 54:58.24 java
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而logstash的jvm参数配置是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">-Xms2g
-Xmx2g
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>初始和最大堆内存都是2G，显然可用内存是远远多余2G的。&lt;/p>
&lt;p>再观察OOM留下的dump文件：
&lt;img src="https://run.halfbit.top/image/2017-01-09-00-08-40.jpg" alt="">
整个dump文件只有1.4M，怎么可能耗尽内存？&lt;/p>
&lt;p>百思不得其解，观察了一下线上机器和daily机器的区别：&lt;code>daily机器的内存（4G）只有线上机器增加内存前（8G）一半的内存，但是存在swap交换区&lt;/code>。
因为线上使用的阿里云ECS默认是不配置swap的，原因是OOS的读写性能比较差：
&lt;img src="https://run.halfbit.top/image/2017-01-08-23-55-42.jpg" alt="">&lt;/p>
&lt;p>而daily机器是SSD，所以读写性能较优，存在swap分区：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">free
total used free shared buff/cache available
Mem: 8011064 3873528 2529872 8568 1607664 3868544
Swap: 4194300 0 4194300
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://run.halfbit.top/image/2017-01-09-00-09-57.jpg" alt="">&lt;/p>
&lt;p>是不是因为daily的swap分区为执行shell瞬间膨胀的内存用量提供了缓冲所以使得daily机器未出现问题？
因而尝试了给阿里云ECS配置了swap分区，参考&lt;a href="https://help.aliyun.com/knowledge_detail/42534.html">云服务器 ECS Linux SWAP 配置概要说明&lt;/a>。
然而，依然没有起任何作用。&lt;/p>
&lt;p>仔细想了想，在JAVA中执行Shell脚本，除了&lt;code>Runtime.getRuntime().exec()&lt;/code>，还有&lt;code>ProcessBuilder.start()&lt;/code>，遂改写代码为ProcessBuilder实现。
然而，依然没有起任何作用。研究了一下，发现&lt;code>Runtime.getRuntime().exec()&lt;/code>底层其实就是使用&lt;code>ProcessBuilder.start()&lt;/code>，这两个是一家，都依赖于：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">java.lang.UNIXProcess.forkAndExec
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>后来搜到了stackoverflow上的一个问答&lt;a href="http://stackoverflow.com/questions/1124771/how-to-solve-java-io-ioexception-error-12-cannot-allocate-memory-calling-run">How to solve &amp;ldquo;java.io.IOException: error=12, Cannot allocate memory&amp;rdquo; calling Runtime#exec()?&lt;/a>，跟我遇到的问题一模一样。&lt;/p>
&lt;p>原来&lt;code>UNIXProcess.forkAndExec()&lt;/code>在新建进程的时候，会将现有进程占用的内存大小完全fork一份出来，不管新进程使用的内存或大或小。&lt;/p>
&lt;blockquote>
&lt;p>fork() call actually duplicates the entire memory of the currently running process. If you have a java program with 1.2 GB memory and 2GB total,it will fail。
fork()的调用实际上复制了当前进程的整个内存。如果你当前程序声明了1.2G内存，而内存共有2G，这个命令就会失败（因为剩余的0.8G不足存放复制出来的1.2G）&lt;/p>
&lt;/blockquote>
&lt;p>这是一个多么操蛋的设定。。
好吧，定位了问题，下面我们想办法解决。
首先，尝试命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">echo 1 &amp;gt; /proc/sys/vm/overcommit_memory
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令的含义是：&lt;/p>
&lt;blockquote>
&lt;p>overcommit_memory set to 1 every malloc() will succeed. Linux will start randomly killing processes when you&amp;rsquo;re running out of memory
将overcommit_memory设置为1，每次通过malloc()命令来划用内存都会返回成功，如果可用内存不足，系统会开始随机停止一些耗大量内存砸进程（OOM KILL）&lt;/p>
&lt;/blockquote>
&lt;p>然而，依然没有起任何作用。&lt;/p>
&lt;p>再认真想了一想，原来&lt;strong>增加jvm的直觉恰恰是与真相背道而驰了&lt;/strong>。我一再增加现有进程的内存，就会导致fork的时候，需要的内存越多，就越要出现OOM！所以正确的姿势是，减少现有进程声明的内存：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> -Xms96m -Xmx384m -XX:PermSize=96m -XX:MaxPermSize=384m
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>终于，整个世界清静了。&lt;/p>
&lt;hr>
&lt;p>PS.阿里云，能退我的内存钱吗。。
PPS.再也不在紧急关头先加配置了。。&lt;/p></description></item><item><title>基于.Net软件的反编译初探</title><link>https://run.halfbit.top/post/%E5%9F%BA%E4%BA%8E-net%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%8F%8D%E7%BC%96%E8%AF%91%E5%88%9D%E6%8E%A2/</link><pubDate>Thu, 29 Dec 2016 23:59:58 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%9F%BA%E4%BA%8E-net%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%8F%8D%E7%BC%96%E8%AF%91%E5%88%9D%E6%8E%A2/</guid><description>&lt;p>苦于买不到火车票，尝试了一些口碑比较好的抢票软件，顺手做了一些反编译的尝试。&lt;/p>
&lt;!-- more -->
&lt;p>成果如图，也可以看到这篇要使用的样本：&lt;/p>
&lt;p>![](/image/Windows 8.1 2016-12-29 23-26-49.png)&lt;/p>
&lt;p>稍微了解之后，总体感觉.Net平台下的安全相对于其他显得偏弱，常见的壳就是&lt;code>.Net Reactor&lt;/code>和&lt;code>SmartAssembly&lt;/code>等，而且祭出神器&lt;a href="https://github.com/0xd4d/de4dot">de4dot&lt;/a>基本可以秒所有了，如果&lt;code>de4dot&lt;/code>还不能解决问题，那就用&lt;a href="https://github.com/0xd4d/dnSpy">&lt;code>dnSpy&lt;/code>&lt;/a>，而且这两个出于同一个作者之手。
去了壳之后，可用的反编译软件就很多了，常用的就是&lt;a href="https://github.com/icsharpcode/ILSpy">ILSpy&lt;/a>和&lt;code>Reflector&lt;/code>，前者开源免费，后者付费，两者都可以搭配一个强力插件&lt;a href="https://github.com/sailro/Reflexil">Reflexil&lt;/a>使用。&lt;/p>
&lt;h2 id="壳的检测与定性">壳的检测与定性&lt;/h2>
&lt;p>简单的，如果直接在&lt;code>Reactor&lt;/code>中打开看不到任何反编译出来的代码，伴随提示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">索引超出了数组界限。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://run.halfbit.top/image/2016-12-30-00-20-05.jpg" alt="">
基本可以认定做了加壳处理。
具体壳的判定可以使用&lt;code>ScanId&lt;/code>或者&lt;code>PEiD&lt;/code>查看：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-12-30-00-22-31.jpg" alt="">&lt;/p>
&lt;p>如果无法判别具体壳的类型就比较棘手了，可能需要做手动脱壳处理，大致过程也是找偏移量dump内存。&lt;/p>
&lt;h2 id="砸壳">砸壳&lt;/h2>
&lt;p>识别出壳的类型之后就可以对症下药了。这里就直接用业界最强的&lt;code>de4dot&lt;/code>来处理。
在找一个合适的&lt;code>de4dot&lt;/code>的时候绕了很多弯路，github上的最新代码需要自己手动编译，找了很多的版本都不尽如人意（不支持样本使用的Reactor 5代壳）。最终找到一个提供在线编译服务的站点&lt;a href="https://ci.appveyor.com/">AppVeyor&lt;/a>，总算用上了最新的&lt;code>de4dot&lt;/code>：&lt;a href="https://ci.appveyor.com/project/0xd4d/de4dot/build/artifacts">de4dot&lt;/a>，CI果然是造福人类啊～
砸壳其实简单，难的是，砸壳不砸坏了里面的肉。就是说，砸壳拿到可以反编译的二进制文件容易，难的是不破坏软件的可执行性，&lt;code>de4dot&lt;/code>的作者特地开了一个wiki页讲这件事&lt;a href="https://github.com/0xd4d/de4dot/wiki/FAQ">How to deobfuscate but make sure metadata tokens stay the same?&lt;/a>，主要介绍的就是如果通过选项控制来权衡反编译后代码的可读性和二进制文件的完整性。
正确的姿势是：&lt;/p>
&lt;ul>
&lt;li>如果保留可执行性，一定要使用&lt;code>--dont-rename&lt;/code>选项，当然如果要提高代码的可读性可以去掉&lt;/li>
&lt;li>总是使用&lt;code>-p&lt;/code>选项来指定软件使用的壳的类型&lt;/li>
&lt;li>可以分别尝试32位和64位的版本&lt;/li>
&lt;/ul>
&lt;p>执行结果可能会有一些warning，无伤大雅：
&lt;img src="https://run.halfbit.top/image/2016-12-30-00-42-09.jpg" alt="">&lt;/p>
&lt;h2 id="反编译">反编译&lt;/h2>
&lt;p>砸壳之后可以导入可执行文件到反编译软件中了。这里主要使用&lt;code>IL Spy&lt;/code> + &lt;code>Reflexil&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-12-30-00-46-27.png" alt="">
套路还是一样的，通过检索关键字定位方法，反编译后的代码可读性极强，&lt;code>Reflexil&lt;/code>又极强极易用，基本几个Edit，一个Save就完成了。&lt;/p>
&lt;hr>
&lt;p>希望明天能用这个抢到票2333333&lt;/p></description></item><item><title>线上Elasticsearch集群升级到5.X版本</title><link>https://run.halfbit.top/post/%E7%BA%BF%E4%B8%8Aelasticsearch%E9%9B%86%E7%BE%A4%E5%8D%87%E7%BA%A7%E5%88%B05-x%E7%89%88%E6%9C%AC/</link><pubDate>Thu, 22 Dec 2016 01:04:10 +0000</pubDate><guid>https://run.halfbit.top/post/%E7%BA%BF%E4%B8%8Aelasticsearch%E9%9B%86%E7%BE%A4%E5%8D%87%E7%BA%A7%E5%88%B05-x%E7%89%88%E6%9C%AC/</guid><description>&lt;p>本文记录了将Elasticserach集群从&lt;code>2.3.3&lt;/code>升级到&lt;code>5.0.2&lt;/code>过程当中的一些坑。&lt;/p>
&lt;!-- more -->
&lt;h2 id="elasticsearch">Elasticsearch&lt;/h2>
&lt;p>官方提供了升级Elasticsearch的详细&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-upgrade.html">文档&lt;/a>：
&lt;img src="https://run.halfbit.top/image/2016-12-22-01-10-21.jpg" alt="">
集群的升级可以细化到每个节点的升级过程，也有相关的&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rolling-upgrades.html#upgrade-node">帮助文档&lt;/a>。
官方还非常周到的提供了一个迁移助手&lt;a href="https://github.com/elastic/elasticsearch-migration/tree/2.x">elasticsearch-migration&lt;/a>，以插件的形式检测升级过程中需要注意的事项。
首先通过插件来做一些准备工作：
&lt;img src="https://run.halfbit.top/image/2016-12-08-14-58-42.jpg" alt="">
主要包含了：Cluster Checkup、Reindex Helper、Deprecation Logging 3个工具，分别点击可以查看对应的需要处理的事项。&lt;/p>
&lt;h3 id="配置项变更">配置项变更&lt;/h3>
&lt;p>配置项的变化非常大，我主要涉及到下面几点：&lt;/p>
&lt;ul>
&lt;li>索引相关属性都不再在集群范围定义，而是细化到各个索引当中，涵盖了分词器：&lt;code>index&lt;/code>、&lt;code>index.analysis.analyzer.default.type&lt;/code>、&lt;code>index.analysis.analyzer.default.tokenizer&lt;/code>、&lt;code>index.analysis.analyzer.default.filter&lt;/code>和分片信息：&lt;code>index.number_of_shards&lt;/code>、&lt;code>index.number_of_replicas&lt;/code>等；&lt;/li>
&lt;li>网络层的配置更加考虑安全性，需要通过&lt;code>http.cors.enabled: true&lt;/code>和&lt;code>http.cors.allow-origin: *“&lt;/code>来启用非本地请求，&lt;code>network.host&lt;/code>也移除了&lt;code> _non_loopback_&lt;/code>，需要详细配置允许的域名列表；&lt;/li>
&lt;li>deprecate了groovy语言支持，推荐painless。&lt;/li>
&lt;li>max_map_count需要262144：
&lt;ul>
&lt;li>写入&lt;code>vm.max_map_count=262144&lt;/code>到&lt;code>/etc/sysctl.conf&lt;/code>后执行&lt;code>sysctl -p&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>max_file limit需要至少65536：
&lt;ul>
&lt;li>修改&lt;code>/etc/security/limits.conf&lt;/code>中的相应值为65536&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>新的配置项准备完成之后就可以开始升级了。&lt;/p>
&lt;h3 id="禁用自动分片">禁用自动分片&lt;/h3>
&lt;p>通过执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">PUT _cluster/settings
{
&amp;#34;transient&amp;#34;: {
&amp;#34;cluster.routing.allocation.enable&amp;#34;: &amp;#34;none&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>禁用自动部署分片到节点上。&lt;/p>
&lt;h3 id="将内存数据同步到磁盘可选">将内存数据同步到磁盘(可选)&lt;/h3>
&lt;p>执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">POST _flush/synced
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="关闭节点执行升级">关闭节点、执行升级&lt;/h3>
&lt;p>&lt;strong>如果你现有使用的jdk版本非1.8，需要升级jdk版本&lt;/strong>
我是通过修改符号链接指向的方式指定elasticsearch版本的：
&lt;img src="https://run.halfbit.top/image/2016-12-22-01-34-30.jpg" alt="">
将符号链接指向新的tar包解压文件，将老的&lt;code>config&lt;/code>和&lt;code>data&lt;/code>目录也同步过去，进行必要的配置项变更即可。&lt;/p>
&lt;h3 id="启用节点开启自动分片">启用节点，开启自动分片&lt;/h3>
&lt;p>由于新老节点版本不同，启动节点之后会出现以下报错提示，忽略即可：
&lt;img src="https://run.halfbit.top/image/2016-12-22-01-40-19.jpg" alt="">
执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">PUT _cluster/settings
{
&amp;#34;transient&amp;#34;: {
&amp;#34;cluster.routing.allocation.enable&amp;#34;: &amp;#34;all&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>依次在每个节点执行以上步骤即可。&lt;/p>
&lt;h2 id="elasticsearch-head">elasticsearch-head&lt;/h2>
&lt;p>head本来是以插件形式嵌入到elasticsearch中，5.0之后只能通过独立方式运行，所以需要elasticsearch配置中添加：&lt;code>http.cors.enabled: true&lt;/code>和&lt;code>http.cors.allow-origin: *“&lt;/code>。
安装步骤为：&lt;/p>
&lt;ul>
&lt;li>安装依赖：
&lt;ul>
&lt;li>添加epel源：&lt;code>sudo yum localinstall http://rpms.famillecollet.com/enterprise/remi-release-7.rpm&lt;/code>&lt;/li>
&lt;li>安装node：&lt;code>sudo yum -y install nodejs npm --enablerepo=epel&lt;/code>&lt;/li>
&lt;li>可以通过命令：&lt;code>PROJECT_NAME=&amp;quot;node&amp;quot; PROJECT_URL=&amp;quot;https://npm.taobao.org/mirrors/node/&amp;quot; n project stable&lt;/code>快速升级node&lt;/li>
&lt;li>可以通过命令：&lt;code>PHANTOMJS_CDNURL=https://npm.taobao.org/dist/phantomjs npm install phantomjs --registry=https://registry.npm.taobao.org --no-proxy&lt;/code>加快PHANTOMJS安装&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>拉取代码：&lt;code>git clone git://github.com/mobz/elasticsearch-head.git&lt;/code>&lt;/li>
&lt;li>&lt;code>npm install&lt;/code>。可以通过&lt;code>npm config set registry https://registry.npm.taobao.org&lt;/code>添加淘宝npm源加快速度。&lt;/li>
&lt;li>&lt;code>grunt server&lt;/code>即可运行。如果需要在断开ssh链接后继续运行，需要通过&lt;code>tmux&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="logstash">logstash&lt;/h2>
&lt;p>logstash主要用于同步数据库数据到搜索，详见&lt;a href="http://suclogger.me/MySQL%E5%88%B0Elasticsearch%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%B7%AF/">MySQL到Elasticsearch的同步之路&lt;/a>。
安装的时候遇到的问题就是无法安装插件，表现为执行&lt;code>./logstash-plugin install logstash-input-jdbc&lt;/code>时提示：&lt;/p>
&lt;blockquote>
&lt;p>Could not find gem &amp;lsquo;logstash-plugin (&amp;gt;= 0) java&amp;rsquo; in any of the gem sources listed in your Gemfile or installed on this machine&lt;/p>
&lt;/blockquote>
&lt;p>尝试通过其他装有插件的机器执行&lt;code>./logstash-plugin pack --tgz&lt;/code>导出gem文件，在需要安装的节点执行&lt;code>./logstash-plugin install --local logstash-input-jdbc&lt;/code>依然失败。&lt;/p>
&lt;p>这似乎是logstash的一个bug，可以参见这个&lt;a href="https://github.com/elastic/logstash/issues/5721">issue&lt;/a>&lt;/p>
&lt;p>纠结了好久之后，直接从其他装有插件的机器上把logstash整个文件夹迁移了过来。&lt;/p>
&lt;h2 id="java-api">java-api&lt;/h2>
&lt;p>java-api 也又很大变化，主要有：&lt;/p>
&lt;ul>
&lt;li>抽离出transtaparent client的独立jar包&lt;/li>
&lt;li>netty升级到4&lt;/li>
&lt;li>传入的日期字符串需要通过jodatime来格式化&lt;/li>
&lt;li>function score 函数需要组装为数组&lt;/li>
&lt;/ul>
&lt;p>需要注意的就是项目出现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">java.lang.NoClassDefFoundError: org/jboss/netty/channel/ReceiveBufferSizePredictorFactory
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等相关的&lt;code>NoClassDefFoundError&lt;/code>异常，大都是jar包版本冲突导致的，在idea中可以通过&lt;code>Maven Helper&lt;/code>插件快速查看。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-12-22-02-19-38.jpg" alt="">&lt;/p></description></item><item><title>HTTPS之殇：绕过客户端的SSL证书绑定</title><link>https://run.halfbit.top/post/https%E4%B9%8B%E6%AE%87%E7%BB%95%E8%BF%87%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84ssl%E8%AF%81%E4%B9%A6%E7%BB%91%E5%AE%9A/</link><pubDate>Thu, 15 Dec 2016 22:59:00 +0000</pubDate><guid>https://run.halfbit.top/post/https%E4%B9%8B%E6%AE%87%E7%BB%95%E8%BF%87%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84ssl%E8%AF%81%E4%B9%A6%E7%BB%91%E5%AE%9A/</guid><description>&lt;p>想必大家都听过矛和盾的故事。
之前写过一篇&lt;a href="http://suclogger.me/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/">文章&lt;/a>，谈了接口加密中用到的HTTPS加固，可以谓之盾，今天来谈谈矛。&lt;/p>
&lt;!-- more -->
&lt;p>顺带提一下最近有个消息：&lt;/p>
&lt;blockquote>
&lt;p>2017 年 1 月 1 日开始，苹果强制所有 iOS 应用必须使用 ATS ，即 APP 内连接必须使用更安全的 HTTPS。
&lt;a href="https://developer.apple.com/videos/play/wwdc2016/706/">wwdc2016&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>开发者社区也是一片欢欣鼓舞。
&lt;img src="https://run.halfbit.top/image/2016-12-15-23-09-32.jpg" alt="">&lt;/p>
&lt;p>&lt;strong>苹果此举无疑是互联网安全的一大推动&lt;/strong>。&lt;/p>
&lt;p>但是，道高一尺魔高一丈，下面以IOS平台为例谈谈如何绕过客户端的HTTPS证书绑定。&lt;/p>
&lt;h2 id="ssl-kill-switch">SSL Kill Switch&lt;/h2>
&lt;ul>
&lt;li>准备一台越狱的手机，意味着系统版本为 &lt;code>IOS 9.3.3&lt;/code> 及以下&lt;/li>
&lt;li>安装以下Cydia依赖：
&lt;ul>
&lt;li>Debian Packager&lt;/li>
&lt;li>Cydia Substrate&lt;/li>
&lt;li>PreferenceLoader&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>下载 &lt;a href="https://github.com/nabla-c0d3/ssl-kill-switch2">SSL Kill Switch2&lt;/a> 的最新Release版本：&lt;a href="https://github.com/nabla-c0d3/ssl-kill-switch2/releases">ssl-kill-switch2 releases&lt;/a>&lt;/li>
&lt;li>在IOS终端执行：&lt;code>dpkg -i com.nablac0d3.SSLKillSwitch2_version.deb&lt;/code> 安装deb包&lt;/li>
&lt;li>在IOS终端执行：&lt;code>killall -HUP SpringBoard&lt;/code> 重启SpringBoard&lt;/li>
&lt;/ul>
&lt;p>完成之后，你会在手机设置中看到以下设置项：
![](/image/ SSL Kill Switch.png)
打开开关，就可以绕过客户端的SSL证书绑定了。&lt;/p>
&lt;h2 id="how-it-works">How It Works&lt;/h2>
&lt;p>SSL Kill Switch2的工作原理是：通过&lt;code>tweak&lt;/code>插件Hook了IOS的&lt;code>Secure Transport API&lt;/code> 中实现SSL证书校验的相关方法。
&lt;a href="https://developer.apple.com/reference/security/1654508-secure_transport">Secure Transport API&lt;/a> 是IOS上TLS的最底层的实现，所以这个插件可以作用于IOS平台上的几乎所有应用。&lt;/p>
&lt;p>实现IOS客户端证书绑定一般采用以下流程：&lt;/p>
&lt;ol>
&lt;li>在发起请求之前，调用&lt;code>SSLSetSessionOption()&lt;/code>方法将&lt;code>kSSLSessionOptionBreakOnServerAuth&lt;/code>选项设置为&lt;code>true&lt;/code>，这个设置代表客户端要使用自己的证书校验取代系统的默认证书校验，详情见&lt;a href="https://developer.apple.com/reference/security/sslsessionoption/ksslsessionoptionbreakonserverauth">官方文档&lt;/a>；&lt;/li>
&lt;li>调用&lt;code>SSLHandshake()&lt;/code>开始HTTPS握手，详情见&lt;a href="https://developer.apple.com/reference/security/1400161-sslhandshake?language=objc">官方文档&lt;/a>；&lt;/li>
&lt;li>&lt;code>SSLHandshake()&lt;/code>方法返回&lt;code>errSSLServerAuthCompleted&lt;/code>后，调用&lt;code>SSLCopyPeerTrust()&lt;/code>来获取一个连接对象，之后可以通过自定义的校验方式来校验这个对象是否合法；&lt;/li>
&lt;li>校验通过后调用&lt;code>SSLHandshake()&lt;/code>来继续握手过程，或者校验失败关闭连接。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>SSL Kill Switch2&lt;/code>主要Hook了3个方法来绕过客户端证书校验：&lt;/p>
&lt;h3 id="sslcreatecontext">SSLCreateContext()&lt;/h3>
&lt;p>通过Hook这个方法，在每次创建SSL连接时都开启自定义校验，以此禁用系统自带的证书校验：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">static SSLContextRef replaced_SSLCreateContext (
CFAllocatorRef alloc,
SSLProtocolSide protocolSide,
SSLConnectionType connectionType
) {
SSLContextRef sslContext = original_SSLCreateContext(alloc, protocolSide, connectionType);
// 设置 kSSLSessionOptionBreakOnServerAuth 为true来禁用系统自带的证书校验
original_SSLSetSessionOption(sslContext, kSSLSessionOptionBreakOnServerAuth, true);
return sslContext;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sslsetsessionoption">SSLSetSessionOption()&lt;/h3>
&lt;p>通过Hook这个方法来过滤对&lt;code>kSSLSessionOptionBreakOnServerAuth&lt;/code>选项的修改。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">static OSStatus replaced_SSLSetSessionOption(
SSLContextRef context,
SSLSessionOption option,
Boolean value
) {
// 过滤对kSSLSessionOptionBreakOnServerAuth选项的修改
if (option == kSSLSessionOptionBreakOnServerAuth)
return noErr;
else
return original_SSLSetSessionOption(context, option, value);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sslhandshake">SSLHandshake()&lt;/h3>
&lt;p>如果&lt;code>SSLHandshake()&lt;/code>方法返回&lt;code>errSSLServerAuthCompleted&lt;/code>，则会触发客户端的证书校验，通过Hook这个方法，直接后续的&lt;code>SSLHandshake&lt;/code>过程。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">static OSStatus replaced_SSLHandshake(
SSLContextRef context
) {
OSStatus result = original_SSLHandshake(context);
if (result == errSSLServerAuthCompleted) {
// 直接继续后续的握手过程
return original_SSLHandshake(context);
}
else
return result;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="其他">其他&lt;/h2>
&lt;p>Android下也有类似的方案：&lt;a href="https://github.com/ac-pm/SSLUnpinning_Xposed">SSLUnpinning_Xposed&lt;/a>，可以绕过大部分HTTPS实现库（Java Secure Socket Extension (JSSE)，APACHE，OKHTTP）。&lt;/p>
&lt;p>需要谨记的是解决问题永远没有银弹，通过HTTPS也不能完全解决应用的接口加固。&lt;/p></description></item><item><title>MySQL到Elasticsearch的同步之路</title><link>https://run.halfbit.top/post/mysql%E5%88%B0elasticsearch%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%B7%AF/</link><pubDate>Sun, 11 Dec 2016 13:25:50 +0000</pubDate><guid>https://run.halfbit.top/post/mysql%E5%88%B0elasticsearch%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%B7%AF/</guid><description>&lt;p>六个月前写&lt;a href="http://suclogger.me/%E4%B9%B0%E5%A5%BD%E8%BD%A6%E6%90%9C%E7%B4%A2%E7%9A%84Elasticsearch%E5%AE%9E%E8%B7%B5%EF%BC%9A%E5%88%9D%E4%BD%93%E9%AA%8C/">买好车搜索的Elasticsearch实践：初体验&lt;/a>这篇文章的时候，我司刚刚迁移到Elasticserach，六个月之后的今天跟我最开始什么都不懂的时候搭起来的架构还是一模一样，这几天稍微有点时间，将Elasticsearch升级到了5.0.2，顺便整理了一下架构。
这一篇主要记录搜索与数据库同步的一些变化。&lt;/p>
&lt;!-- more -->
&lt;h2 id="洪荒时代">洪荒时代&lt;/h2>
&lt;p>Elasticsearch 2.0 之前，同步数据到Elasticsearch的功能由一个官方提供的插件（plugin）占领：river。通过实现不同的river插件，可以将数据从数据库，消息队列，nosql等等同步到Elasticsearch中，比如：&lt;a href="https://github.com/elastic/elasticsearch-river-rabbitmq">elasticsearch-river-rabbitmq&lt;/a>、&lt;a href="https://github.com/elastic/elasticsearch-river-couchdb">elasticsearch-river-couchdb&lt;/a>等等。
以plugin方式运行的形式如图：
&lt;img src="https://run.halfbit.top/image/2016-12-11-13-39-47.jpg" alt="">
可以看到，插件与Elasticsearch运行在同一个jvm上，显然这会导致一系列的问题，正如&lt;a href="https://www.elastic.co/blog/deprecating-rivers">Deprecating Rivers&lt;/a>中所说：&lt;/p>
&lt;blockquote>
&lt;p>What was the problem we were witnessing? Cluster stability. You see, by their nature, rivers deal with external systems, and those external systems require external libraries to work with. Those are great to use, but they come with an overhead. Part of it is built in overhead, things like additional memory usage, more sockets, file descriptors and so on. Others, sadly, are bugs.&lt;/p>
&lt;/blockquote>
&lt;p>插件的运行机制将外部数据和其他运行库的不稳定性引入了Elasticsearch，所以Elasticsearch官方从 Elasticsearch 2.0 开始去除了这一方式的支持，转而推荐&lt;code>getting data to Elasticsearch from &amp;quot;outside&amp;quot; the cluster&lt;/code>即从集群外部将数据导入Elasticsearch的方式。&lt;/p>
&lt;h2 id="elasticsearch-jdbc">Elasticsearch-JDBC&lt;/h2>
&lt;p>&lt;a href="https://github.com/jprante/elasticsearch-jdbc">elasticsearch-jdbc&lt;/a>无疑是Elasticsearch 5.0 之前最炙手可热的数据库同步方案，他的优势是开源，用java语言编写，配置化。这也是我司最早时候采用的方案。
Elasticsearch-JDBC不可否认也存在一些不足，主要有：&lt;/p>
&lt;h3 id="不支持多数据源">不支持多数据源&lt;/h3>
&lt;p>需要对源代码做一些hack&lt;/p>
&lt;h3 id="sql以json形式保存因此不能带有特殊字符">SQL以json形式保存，因此不能带有特殊字符&lt;/h3>
&lt;p>比如有一句SQL：&lt;code>select replace(columnA, '.' ,'' ) from dual&lt;/code>，需要改造成基于ASCII编码的格式：&lt;code>select replace(columnA, 0x2E, '') from dual&lt;/code>&lt;/p>
&lt;h3 id="内存泄露问题">内存泄露问题&lt;/h3>
&lt;p>Elasticsearch-JDBC在使用过程中会出现OOM的问题，特别是在&lt;code>interval&lt;/code>设得很短的时候，解决的方式可以参考这个&lt;a href="https://github.com/jprante/elasticsearch-jdbc/issues/842">issue&lt;/a>。&lt;/p>
&lt;h3 id="数据缺失问题">数据缺失问题&lt;/h3>
&lt;p>脚本读取的是从库，主从同步需要一定时间，如果数据写入了，但是未及时同步到从库，就会导致中间一些数据丢失，可以用一个简单粗暴的方式解决，就是每次运行读取（上次执行时间 - 30S ）这个时间点之后更新的数据，这里不用考虑重复的问题，因为同样的ID在Elasticsearch中会自动转为update：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">select * from dual where time &amp;gt; date_sub(?, interval 30 SECOND)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最终线上的增量同步脚本如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span> dirname &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_SOURCE&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">pwd&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nv">bin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">DIR&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nv">lib&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">DIR&lt;/span>&lt;span class="si">}&lt;/span>/../../lib
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;type&amp;#34; : &amp;#34;jdbc&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;jdbc&amp;#34; : {
&lt;/span>&lt;span class="s1"> &amp;#34;url&amp;#34; : &amp;#34;jdbc:mysql://www.maihaoche.com/&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;statefile&amp;#34; : &amp;#34;statefile.json&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;schedule&amp;#34; : &amp;#34;0/5 * * ? * *&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;user&amp;#34; : &amp;#34;mhc&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;password&amp;#34; : &amp;#34;mhc&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;sql&amp;#34; : [{
&lt;/span>&lt;span class="s1"> &amp;#34;statement&amp;#34;: &amp;#34;select * from dual where modified &amp;gt;= date_sub(?, interval 30 SECOND)&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;parameter&amp;#34;: [&amp;#34;$metrics.lastexecutionstart&amp;#34;]}
&lt;/span>&lt;span class="s1"> ],
&lt;/span>&lt;span class="s1"> &amp;#34;index&amp;#34; : &amp;#34;*&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;type&amp;#34; : &amp;#34;*&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;metrics&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;enabled&amp;#34; : true,
&lt;/span>&lt;span class="s1"> &amp;#34;interval&amp;#34; : &amp;#34;1&amp;#34;
&lt;/span>&lt;span class="s1"> },
&lt;/span>&lt;span class="s1"> &amp;#34;elasticsearch&amp;#34; : {
&lt;/span>&lt;span class="s1"> &amp;#34;cluster&amp;#34; : &amp;#34;*&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;host&amp;#34; : &amp;#34;*&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;port&amp;#34; : 9300
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> java &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -cp &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">lib&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/*&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -Dlog4j.configurationFile&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">bin&lt;/span>&lt;span class="si">}&lt;/span>/car.xml &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> org.xbib.tools.Runner &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> org.xbib.tools.JDBCImporter
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>虽然很简陋，但是也矜矜业业运行了半年时间没出过问题，可以作为迅速上线的一个方式。&lt;/p>
&lt;p>同样的，作为开源软件的劣势就是很难及时跟上Elasticsearch的更新步伐，Elasticsearch-JDBC暂时还不支持Elasticsearch 5.0，具体可以跟踪这个&lt;a href="https://github.com/jprante/elasticsearch-jdbc/issues/915">issue&lt;/a>。&lt;/p>
&lt;h2 id="logstash">Logstash&lt;/h2>
&lt;h3 id="为什么不用logstash">为什么不用Logstash？&lt;/h3>
&lt;p>正如Elasticsearch-JDBC的作者@jprante 所说：&lt;/p>
&lt;blockquote>
&lt;p>I have only a rough idea about Logstash JDBC and how it works, it seems to use the JRuby features for JDBC. Not sure how Ruby interferes in such a process when SQL database types are mapped by JDBC types, then mapped to Java, then to Ruby, then to JSON, then indexed in ES and then back to an application, but there might be shortcomings. SQL to JDBC to Java is already a challenge on its own.&lt;/p>
&lt;/blockquote>
&lt;p>Logstash基于Ruby语言，Logstash JDBC采用JDBC的java驱动，意味着，数据从数据库到Elasticsearch经历了JDBC -&amp;gt; JAVA -&amp;gt; Ruby -&amp;gt; JSON -&amp;gt; ES，越多的步骤意味着越多出错的概率，为何不采用更为稳定和直接的JDBC -&amp;gt; JAVA -&amp;gt; ES呢？这也是Elasticsearch-JDBC将会继续维护的原因。&lt;/p>
&lt;h3 id="为什么要用logstash呢">为什么要用Logstash呢？&lt;/h3>
&lt;h4 id="支持elasticsearch-50-而且有官方支持">支持Elasticsearch 5.0， 而且有官方支持&lt;/h4>
&lt;h4 id="便于日后扩展输入和输出">便于日后扩展输入和输出&lt;/h4>
&lt;p>Logstash提供了很多很多的输入输出插件的支持&lt;/p>
&lt;h4 id="logstash-jdbc更快">Logstash JDBC更快&lt;/h4>
&lt;p>根据我在测试环境的观察，11W条记录相同类型的索引，Elasticsearch-JDBC完成索引耗时90S，Logstash-JDBC只需要50S。&lt;/p>
&lt;h4 id="占用系统资源更少">占用系统资源更少&lt;/h4>
&lt;p>根据我在测试环境的观察：
Elasticsearch-JDBC的系统资源使用：
&lt;img src="https://run.halfbit.top/image/2016-12-11-15-02-39.jpg" alt="">
Logstash-JDBC的系统资源使用：
&lt;img src="https://run.halfbit.top/image/2016-12-11-15-00-03.jpg" alt="">&lt;/p>
&lt;h3 id="迁移到logstash">迁移到Logstash&lt;/h3>
&lt;p>具体可以参考官方的文档：&lt;a href="https://www.elastic.co/guide/en/logstash/5.0/plugins-inputs-jdbc.html">jdbc&lt;/a>
和官方的使用案例：&lt;a href="https://www.elastic.co/blog/logstash-jdbc-input-plugin">INSERT INTO LOGSTASH SELECT DATA FROM DATABASE&lt;/a>&lt;/p>
&lt;p>主要有下面几个技巧&lt;/p>
&lt;h4 id="sql剥离">SQL剥离&lt;/h4>
&lt;p>当然可以将SQL直接写入配置文件的&lt;code>statement&lt;/code>配置项，但是会遇到与Elasticsearch-JDBC中同样遇到的特殊字符的问题和文本编码的问题。
更好的方式是将查询脚本存放在一个单独的SQL文件中，通过指定&lt;code>statement_filepath&lt;/code>配置项来定位。&lt;/p>
&lt;h4 id="时区指定">时区指定&lt;/h4>
&lt;p>如果不定义&lt;code>jdbc_default_timezone&lt;/code>配置项，你的执行时间可能会受到系统环境的影响。这个配置项需要输入&lt;code>UTC&lt;/code>中定义的时区，详见：&lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">wikipedia&lt;/a>&lt;/p>
&lt;h4 id="保存上一次执行的进度">保存上一次执行的进度&lt;/h4>
&lt;p>如果你的增量依赖于数据库的某个字段（比如自增的ID），可以配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">use_column_value =&amp;gt; true
tracking_column =&amp;gt; id
last_run_metadata_path =&amp;gt; &amp;#34;&amp;#39;$DIR&amp;#39;/.logstash_jdbc_last_run&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lostash会将上一次导入数据的最大id存放在&lt;code>.logstash_jdbc_last_run&lt;/code>文件中。
如果增量脚本是基于时间戳，则无需配置&lt;code>use_column_value&lt;/code>。
使用的方式都是一样的，在SQL中使用&lt;code>:sql_last_value&lt;/code>来引用先前的执行结果。&lt;/p>
&lt;p>最终线上的增量同步脚本如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">indexname&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;span class="nv">DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span> dirname &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_SOURCE&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">pwd&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">input {
&lt;/span>&lt;span class="s1"> jdbc {
&lt;/span>&lt;span class="s1"> jdbc_driver_library =&amp;gt; &amp;#34;/*/mysql-connector-java-5.1.40-bin.jar&amp;#34;
&lt;/span>&lt;span class="s1"> jdbc_driver_class =&amp;gt; &amp;#34;com.mysql.jdbc.Driver&amp;#34;
&lt;/span>&lt;span class="s1"> jdbc_connection_string =&amp;gt; &amp;#34;jdbc:mysql://www.maihaoche.comm/&amp;#34;
&lt;/span>&lt;span class="s1"> jdbc_user =&amp;gt; &amp;#34;mhc&amp;#34;
&lt;/span>&lt;span class="s1"> jdbc_password =&amp;gt; &amp;#34;mhc&amp;#34;
&lt;/span>&lt;span class="s1"> schedule =&amp;gt; &amp;#34;*/5 * * * * *&amp;#34;
&lt;/span>&lt;span class="s1"> statement_filepath =&amp;gt; &amp;#34;&amp;#39;&lt;/span>&lt;span class="nv">$DIR&lt;/span>&lt;span class="s1">&amp;#39;/confs/mhc.sql&amp;#34;
&lt;/span>&lt;span class="s1"> jdbc_default_timezone =&amp;gt; &amp;#34;Asia/Shanghai&amp;#34;
&lt;/span>&lt;span class="s1"> last_run_metadata_path =&amp;gt; &amp;#34;&amp;#39;&lt;/span>&lt;span class="nv">$DIR&lt;/span>&lt;span class="s1">&amp;#39;/.logstash_jdbc_last_run_car&amp;#34;
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">output {
&lt;/span>&lt;span class="s1"> elasticsearch {
&lt;/span>&lt;span class="s1"> index =&amp;gt; &amp;#34;*&amp;#34;
&lt;/span>&lt;span class="s1"> document_type =&amp;gt; &amp;#34;*&amp;#34;
&lt;/span>&lt;span class="s1"> document_id =&amp;gt; &amp;#34;%{id}&amp;#34;
&lt;/span>&lt;span class="s1"> hosts =&amp;gt; [&amp;#34;*:9300&amp;#34;]
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &amp;gt; /*/&lt;span class="nv">$indexname&lt;/span>.conf
/*/logstash/bin/logstash -f /*/logstash/bin/confs/&lt;span class="nv">$indexname&lt;/span>.conf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="其他">其他&lt;/h2>
&lt;p>当然，从数据库同步到Elasticsearch还有很多更好的方式，比如&lt;/p>
&lt;ul>
&lt;li>解析数据库的binlog&lt;/li>
&lt;li>直接通过hadoop构造lusence索引推送到Elasticsearch
等等，可以参见&lt;a href="http://suclogger.me/Elasticsearch%E4%B8%AD%E6%96%87%E7%A4%BE%E5%8C%BA20160618%E6%9D%AD%E5%B7%9E%E7%BA%BF%E4%B8%8B%E8%81%9A%E4%BC%9A%E7%BA%AA%E8%A6%81/">Elasticsearch中文社区20160618杭州线下聚会纪要&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>这些方式可以解决&lt;strong>数据库物理删除同步到Elasticsearch&lt;/strong>的痛点。
但是更好的方式意味着更高的开发成本，希望日后可以有时间实现。&lt;/p>
&lt;p>binlog这里不得不吐槽一下阿里云的RDS，如果自定开通binlog订阅则无法使用阿里云的DTS，如果要使用DTS必须使用阿里云提供的付费binlog订阅服务。
不得不感慨，&lt;strong>这是一个最好的时代，也是一个最坏的时代&lt;/strong>。&lt;/p></description></item><item><title>分布式系统设计迷思（二）</title><link>https://run.halfbit.top/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D%E4%BA%8C/</link><pubDate>Mon, 14 Nov 2016 21:36:28 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D%E4%BA%8C/</guid><description>&lt;p>继续&lt;a href="http://suclogger.me/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D/">上一篇&lt;/a>文末提到的&lt;code>paxos&lt;/code>，这一篇谈谈如何通过选主来解决paxos的活性问题。&lt;/p>
&lt;!-- more -->
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>&lt;code>basic paxos&lt;/code>存在一个活性（liveness）问题，如图：
&lt;img src="https://run.halfbit.top/image/2016-11-14-17-46-53.jpg" alt="">
首先注意每个proposer都只需要给超过半数的acceptor发起请求并取得一致即可，这里的例子共有5个server，所以这个数是3。&lt;/p>
&lt;ul>
&lt;li>首先Server1 发起epoch值为&lt;code>3&lt;/code>的prepare请求（P 3.1）到server1，server2和server3并均获取到访问权&lt;/li>
&lt;li>在Server1继续发起accept请求（A 3.1 X）试图将取值设置为&lt;code>X&lt;/code>之前，Server 5 发起epoch值为&lt;code>5&lt;/code>的prepare请求（P 3.5）到serve3，server4和server5并抢占到了访问权&lt;/li>
&lt;li>Server1 发起epoch值为&lt;code>3&lt;/code>的accept请求，S1，S2均返回&lt;code>OK&lt;/code>，但是S3由于被Server 5发来的&lt;code>（P 3.5）&lt;/code>抢占了访问权，返回&lt;code>fail&lt;/code>，由于只收到2个&lt;code>OK&lt;/code>（不超过半数），所以并未取得确定性取值&lt;/li>
&lt;li>依次类推，每个accept请求到达之前都被更新的epoch抢占了访问权，就会导致集群陷入活锁，无法获得一个确定性取值。&lt;/li>
&lt;/ul>
&lt;h2 id="绕过">绕过&lt;/h2>
&lt;p>有一个简单的方法来绕过这个问题：在每次使用更大的epoch值重新发起prepare请求之前随机等待一小段时间，使得其他proposer有机会完成accept过程。&lt;/p>
&lt;p>不过这个方法只能一定程度缓解问题，没有从根本上解决问题。&lt;/p>
&lt;p>Lamport建议通过选主的方式选定一个leader承担proposer的角色，集群中的其他server承担acceptor的角色，从而避免由于多个proposer抢夺访问权出现的活锁问题。&lt;/p>
&lt;h2 id="选主">选主&lt;/h2>
&lt;p>假定每个server都拥有一个唯一的ID，如上图中的 S1，S2 等等，所以可以采用以下简单的策略：&lt;strong>使得拥有最大ID值的server成为leader&lt;/strong>。
具体步骤：&lt;/p>
&lt;ul>
&lt;li>每台server每隔时间间隔T给其他所有server发送心跳，心跳中携带自己的ID&lt;/li>
&lt;li>如果某台server在2T时间内（考虑网络时延）没有接收到高于自己ID的server发来的心跳，则自己充当leader角色&lt;/li>
&lt;li>负责接收client传来的请求&lt;/li>
&lt;li>承担proposer和acceptor&lt;/li>
&lt;li>如果某台server认识到自己不是leader&lt;/li>
&lt;li>将client传来的请求转发给leader&lt;/li>
&lt;li>承担acceptor&lt;/li>
&lt;/ul>
&lt;p>这是一个简单而且有效的选主策略，但是我们不得不考虑一下分布式中的经典情况：&lt;code>脑裂&lt;/code>。
因为网络分区的关系，同时可能有多个自认为的leader存在，是不是又有可能出现活锁？&lt;/p>
&lt;p>答案是不会。&lt;/p>
&lt;p>如果某几个proposer由于出现活锁导致client请求超时，client会寻求其他server，重新进行一次选主，而acceptor抢占式访问的设计不会受到先前的prepare请求影响，重新洗牌后重新陷入活锁的概率就大大降低了。
这个方法也被称为&lt;code>PaxosLease&lt;/code>或者&lt;code>lease&lt;/code>相关的描述。&lt;/p>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://cassandra.apache.org/">cassandra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Distributed_lock_manager">chubby&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>RabbitMQ上手指南</title><link>https://run.halfbit.top/post/rabbitmq%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 07 Nov 2016 23:20:27 +0000</pubDate><guid>https://run.halfbit.top/post/rabbitmq%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</guid><description>&lt;p>本文记录了在macOS Sierra 10.12.2环境下搭建RabbitMQ的过程。&lt;/p>
&lt;!-- more -->
&lt;h2 id="安装rabbitmq">安装RabbitMQ&lt;/h2>
&lt;p>通过homebrew安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">brew install rabbitmq
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成后如图：
&lt;img src="https://run.halfbit.top/image/2016-11-07-23-21-57.jpg" alt="">
默认安装路径为：&lt;code>/usr/local/sbin&lt;/code>，通过给&lt;code>~/.zshrc&lt;/code>（shell使用zsh）添加：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">export PATH=$PATH:/usr/local/sbin
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>后执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">source ~/.zshrc
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加到默认路径。&lt;/p>
&lt;h2 id="启动rabbitmq">启动RabbitMQ&lt;/h2>
&lt;p>执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">rabbitmq-server
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>显示：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-11-07-23-29-16.jpg" alt="">
即启动成功，可以通过命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">rabbitmqctl status
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看启动状态：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-11-07-23-30-07.jpg" alt="">&lt;/p>
&lt;h2 id="hello-workd">Hello Workd&lt;/h2>
&lt;p>先通过以下命令安装Python下的AMQP库：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">pip install pika
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>生产者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># -*- coding: utf-8 -*-
import pika
import sys
credentials = pika.PlainCredentials(&amp;#34;guest&amp;#34;, &amp;#34;guest&amp;#34;)
# 默认使用5672端口
conn_params = pika.ConnectionParameters(&amp;#34;localhost&amp;#34;, credentials=credentials)
# 建立到代理服务器的连接
conn_broker = pika.BlockingConnection(conn_params)
# 获得信道
channel = conn_broker.channel()
# 声明交换器
channel.exchange_declare(exchange=&amp;#34;hello-exchange&amp;#34;,
type=&amp;#34;direct&amp;#34;,
passive=False,
durable=True,
auto_delete=False)
msg = sys.argv[1]
msg_props = pika.BasicProperties()
# 创建纯文本消息
msg_props.content_type = &amp;#34;text/plain&amp;#34;
# 发布消息
channel.basic_publish(body=msg,
exchange=&amp;#34;hello-exchange&amp;#34;,
properties=msg_props,
routing_key=&amp;#34;hola&amp;#34;)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>消费者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># -*- coding: utf-8 -*-
import pika
credentials = pika.PlainCredentials(&amp;#34;guest&amp;#34;, &amp;#34;guest&amp;#34;)
# 默认使用5672端口
conn_params = pika.ConnectionParameters(&amp;#34;localhost&amp;#34;, credentials=credentials)
# 建立到代理服务器的连接
conn_broker = pika.BlockingConnection(conn_params)
# 获得信道
channel = conn_broker.channel()
# 声明交换器
channel.exchange_declare(exchange=&amp;#34;hello-exchange&amp;#34;,
type=&amp;#34;direct&amp;#34;,
passive=False,
durable=True,
auto_delete=False)
# 声明队列
channel.queue_declare(queue=&amp;#34;hello-queue&amp;#34;)
# 通过routing_key绑定队列到交换器
channel.queue_bind(queue=&amp;#34;hello-queue&amp;#34;,
exchange=&amp;#34;hello-exchange&amp;#34;,
routing_key=&amp;#34;hola&amp;#34;)
def msg_consumer(channel, method, header, body):
# 消息确认
channel.basic_ack(delivery_tag=method.delivery_tag)
if body == &amp;#34;quit&amp;#34;:
# 停止消费并退出
channel.basic_cancel(consumer_tag=&amp;#34;hello-consumer&amp;#34;)
channel.stop_consuming
else:
print body
return
# 订阅消费者
channel.basic_consume(msg_consumer,
queue=&amp;#34;hello-queue&amp;#34;,
consumer_tag=&amp;#34;hello-consumer&amp;#34;)
channel.start_consuming()
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>provider:
&lt;img src="https://run.halfbit.top/image/2016-11-07-23-51-07.jpg" alt="">
consumer:
&lt;img src="https://run.halfbit.top/image/2016-11-07-23-51-20.jpg" alt="">&lt;/p></description></item><item><title>并发下的Base64解码问题</title><link>https://run.halfbit.top/post/%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%9A%84base64%E8%A7%A3%E7%A0%81%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 03 Nov 2016 22:51:13 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%9A%84base64%E8%A7%A3%E7%A0%81%E9%97%AE%E9%A2%98/</guid><description>&lt;p>&lt;a href="http://suclogger.tech/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/">上一篇文章&lt;/a>中介绍的接口加密方案上线至今已有月余，考虑到加密后影响业务的风险以及用户的升级体验，近两个版本采用了明文和密文并存的灰度升级方式，这次发布的版本中决定完全移除明文请求，所以看了一眼近一个月加密逻辑中记录的日志，发现了一些问题。&lt;/p>
&lt;!-- more -->
&lt;p>在日志中存在很多以下报错信息：
&lt;img src="https://run.halfbit.top/image/2016-11-03-23-31-03.jpg" alt="">&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-11-03-23-35-33.jpg" alt="">&lt;/p>
&lt;p>错误最终从RSA解密方法中抛出，错误类型有：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">javax.crypto.BadPaddingException: data hash wrong
at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_10]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也有：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">org.bouncycastle.crypto.DataLengthException: input too large for RSA cipher.
at org.bouncycastle.crypto.engines.RSACoreEngine.convertInput(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at org.bouncycastle.crypto.engines.RSAEngine.processBlock(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at org.bouncycastle.crypto.encodings.OAEPEncoding.decodeBlock(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at org.bouncycastle.crypto.encodings.OAEPEncoding.processBlock(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_10]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>处理密文的切面中代码逻辑大致如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">logger.info(&amp;#34;enToken : {}&amp;#34;, enToken);
logger.info(&amp;#34;enParams : {}&amp;#34;, enParams);
String deKey = RSAUtil.decrypt(enToken, RSAUtil.privateKey);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>RSAUtil&lt;/code>中的RSA解密逻辑为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public class RSAUtil {
private static final BASE64Decoder base64Decoder = new BASE64Decoder();
public static String decrypt(String text, PrivateKey privateKey) {
try {
Security.addProvider(new BouncyCastleProvider());
Cipher cipher = Cipher.getInstance(&amp;#34;RSA/NONE/OAEPWithSHA1AndMGF1Padding&amp;#34;, &amp;#34;BC&amp;#34;);
cipher.init(Cipher.DECRYPT_MODE, privateKey);
byte[] encryptedData = base64Decoder.decodeBuffer(text);
ByteArrayOutputStream out = new ByteArrayOutputStream();
int offSet = 0;
int i = 0;
while (encryptedData.length - offSet &amp;gt; 0) {
byte[] cache;
if ((encryptedData.length - offSet) &amp;gt; (KEY_LENGTH / 8)) {
cache = cipher.doFinal(encryptedData, offSet, KEY_LENGTH / 8);
} else {
cache = cipher.doFinal(encryptedData, offSet, encryptedData.length - offSet);
}
out.write(cache, 0, cache.length);
i++;
offSet = i * (KEY_LENGTH / 8);
}
return out.toString();
} catch (Exception e) {
LOG.error(&amp;#34;解密发生异常&amp;#34;, e);
return null;
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>错误抛出的位置都在&lt;code>Cipher.doFinal()&lt;/code>方法上。
虽然日志中报错解密失败，但是直接拿日志中打印的&lt;code>enParams&lt;/code>和&lt;code>enToken&lt;/code>又是可以成功解密的，这也是之所以这个报错之前没有引起我重视的原因，本地无法复现。&lt;/p>
&lt;p>今天突然想到是不是因为并发的原因导致的本地无法复现，只在线上环境出现，所以写了一小段代码模拟了一下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@Test
public void testdecrypt() {
List&amp;lt;String&amp;gt; enTokenList = new ArrayList&amp;lt;&amp;gt;(100);
for(int i=0; i&amp;lt;100; i++) {
String result = RSAUtil.encrypt(String.valueOf(i), RSAUtil.publicKey);
enTokenList.add(result);
}
for(String enToken : enTokenList) {
ThreadPoolFactory.getThreadPool().execute(new TeEncrypt(enToken));
}
}
class TeEncrypt implements Runnable{
private String enToken;
public TeEncrypt(String enToken) {
this.enToken = enToken;
}
@Override
public void run() {
String deco = RSAUtil.decrypt(enToken, RSAUtil.privateKey);
System.out.println(deco);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码的逻辑比较简单，预先生成了100条密文，然后通过线程池不加任何同步锁来模拟并发的情况，果然复现了线上的报错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">4
5
6
2
7
8
9
10
11
12
13
14
15
16
17
21
22
23
18
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
43
44
45
50
49
46
48
23:49:24.522 [pool-1-thread-1] ERROR tech.suclogger.common.utils.RSAUtil - 解密发生异常
javax.crypto.BadPaddingException: data hash wrong
at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_71]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:195) [classes/:na]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:220) [classes/:na]
at tech.suclogger.web.encrypt.EncryptTest$TeEncrypt.run(EncryptTest.java:39) [test-classes/:na]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_75]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_75]
at java.lang.Thread.run(Thread.java:745) [na:1.7.0_75]
52
51
53
55
56
57
58
59
60
61
null
62
23:49:24.524 [pool-1-thread-43] ERROR tech.suclogger.common.utils.RSAUtil - 解密发生异常
javax.crypto.BadPaddingException: data hash wrong
at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_71]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:195) [classes/:na]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:220) [classes/:na]
at tech.suclogger.web.encrypt.EncryptTest$TeEncrypt.run(EncryptTest.java:39) [test-classes/:na]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_75]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_75]
at java.lang.Thread.run(Thread.java:745) [na:1.7.0_75]
63
64
65
66
67
68
69
70
null
23:49:24.523 [pool-1-thread-4] ERROR tech.suclogger.common.utils.RSAUtil - 解密发生异常
javax.crypto.BadPaddingException: data hash wrong
at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_71]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:195) [classes/:na]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:220) [classes/:na]
at tech.suclogger.web.encrypt.EncryptTest$TeEncrypt.run(EncryptTest.java:39) [test-classes/:na]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_75]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_75]
at java.lang.Thread.run(Thread.java:745) [na:1.7.0_75]
null
23:49:24.523 [pool-1-thread-2] ERROR tech.suclogger.common.utils.RSAUtil - 解密发生异常
javax.crypto.BadPaddingException: data hash wrong
at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_71]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:195) [classes/:na]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:220) [classes/:na]
at tech.suclogger.web.encrypt.EncryptTest$TeEncrypt.run(EncryptTest.java:39) [test-classes/:na]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_75]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_75]
at java.lang.Thread.run(Thread.java:745) [na:1.7.0_75]
71
72
73
74
null
23:49:24.523 [pool-1-thread-42] ERROR tech.suclogger.common.utils.RSAUtil - 解密发生异常
javax.crypto.BadPaddingException: data hash wrong
at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_71]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:195) [classes/:na]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:220) [classes/:na]
at tech.suclogger.web.encrypt.EncryptTest$TeEncrypt.run(EncryptTest.java:39) [test-classes/:na]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_75]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_75]
at java.lang.Thread.run(Thread.java:745) [na:1.7.0_75]
75
76
77
78
79
80
81
82
83
null
23:49:24.526 [pool-1-thread-48] ERROR tech.suclogger.common.utils.RSAUtil - 解密发生异常
javax.crypto.BadPaddingException: data hash wrong
at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_71]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:195) [classes/:na]
at tech.suclogger.common.utils.RSAUtil.decrypt(RSAUtil.java:220) [classes/:na]
at tech.suclogger.web.encrypt.EncryptTest$TeEncrypt.run(EncryptTest.java:39) [test-classes/:na]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_75]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_75]
at java.lang.Thread.run(Thread.java:745) [na:1.7.0_75]
84
85
86
89
90
92
91
94
95
96
null
87
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>给异常添加断点：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-11-03-23-59-11.jpg" alt="">&lt;/p>
&lt;p>原因就在于，&lt;strong>&lt;code> sun.misc.BASE64Decoder&lt;/code>并不是线程安全的&lt;/strong>，并发的情况下，可以使用替代方案：&lt;/p>
&lt;ul>
&lt;li>java.util.Base64.Decoder （需要java8）&lt;/li>
&lt;li>javax.xml.bind.DatatypeConverter.parseBase64Binary(String lexicalXSDBase64Binary)&lt;/li>
&lt;li>org.apache.commons.codec.binary.Base64
&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>各个方案的性能比较可以看&lt;a href="http://java-performance.info/base64-encoding-and-decoding-performance/">这篇文章&lt;/a>。&lt;/p>
&lt;p>修改之后用容量为1000的线程池通过了上面的测试代码：
&lt;img src="https://run.halfbit.top/image/2016-11-04-00-10-42.jpg" alt="">&lt;/p></description></item><item><title>支付宝接入开发摘记</title><link>https://run.halfbit.top/post/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%85%A5%E5%BC%80%E5%8F%91%E6%91%98%E8%AE%B0/</link><pubDate>Tue, 01 Nov 2016 23:40:58 +0000</pubDate><guid>https://run.halfbit.top/post/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%85%A5%E5%BC%80%E5%8F%91%E6%91%98%E8%AE%B0/</guid><description>&lt;p>这一篇主要记录一下支付宝开发过程遇到的一些坑，后面再开一篇文章讲讲支付的架构设计。
这一期的支付开发主要接入支付宝，包含了入账和出账。&lt;/p>
&lt;!-- more -->
&lt;h2 id="流程图">流程图&lt;/h2>
&lt;p>入账的流程图如下：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98.png" alt="">&lt;/p>
&lt;p>出账的流程图如下：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8F%90%E7%8E%B0.png" alt="">&lt;/p>
&lt;h2 id="支付宝接口">支付宝接口&lt;/h2>
&lt;h3 id="收款">收款&lt;/h3>
&lt;p>为APP集成收款功能支付宝提供了两个接口，分别是&lt;code>App支付&lt;/code>和&lt;code>移动支付&lt;/code>，据支付宝客服称&lt;code>App支付&lt;/code>是新接口，移动支付会逐渐淡化。
这两个接口参数名大同小异，主要区别是&lt;code>App支付&lt;/code>需要用&lt;code>bizcontent&lt;/code>来包裹业务参数。
这里主要使用&lt;code>App支付&lt;/code>。&lt;/p>
&lt;p>接口名称：&lt;code>mobile.securitypay.pay&lt;/code>
文档地址：&lt;a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.HKzvRR&amp;amp;treeId=204&amp;amp;articleId=105051&amp;amp;docType=1">App 支付&lt;/a>
费率：&lt;code>0.6%&lt;/code>
额度：不限&lt;/p>
&lt;p>坑：&lt;/p>
&lt;ul>
&lt;li>文档中声称需要&lt;code>对请求字符串的所有一级value（biz_content作为一个value）进行encode&lt;/code>，实际测试发现只有生成的签名字段&lt;code>sign&lt;/code>需要做encode&lt;/li>
&lt;li>订单金额&lt;code>total_amount&lt;/code>携带的金额不能用&lt;code>,&lt;/code>分隔，比如¥1000元要传入&lt;code>1000&lt;/code>，传入&lt;code>1,000&lt;/code>会导致异常&lt;/li>
&lt;li>支付宝的回调中&lt;code>total_amount&lt;/code>的金额是保留了2位小数表示的，比如订单金额¥0.5元，支付宝的回调会回传为&lt;code>0.50&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="退款">退款&lt;/h3>
&lt;p>即时到帐的退款是有无密和有密之分的，官方提供的文档中只有&lt;a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7386797.0.0.rSJ5uY&amp;amp;treeId=66&amp;amp;articleId=103571&amp;amp;docType=1">有密&lt;/a>。
无密接口需要联系客服开通，开通时间需要5天左右。
有密的接口需要在&lt;code>window+ie&lt;/code>下输入密码才能完成退款操作。
这里主要使用无密接口。&lt;/p>
&lt;p>接口名称：&lt;code>refund_fastpay_by_platform_nopwd&lt;/code>
费率：0（不退服务费）&lt;/p>
&lt;p>坑：&lt;/p>
&lt;ul>
&lt;li>回调的参数用了&lt;code>^&lt;/code>分隔，如果通过java来做split处理，需要做转义处理为&lt;code>\\^&lt;/code>&lt;/li>
&lt;li>回调的&lt;code>gmt_refund&lt;/code>时间格式是&lt;code>yyyy-MM-dd HH:mm:ss.S&lt;/code>&lt;/li>
&lt;li>退款使用密钥与收款不同，是&lt;code>合作伙伴&lt;/code>下的密钥&lt;/li>
&lt;li>如果对某一条支付记录申请了部分金额的退款，支付宝同时会发出一条类型为&lt;code>trade_status_sync&lt;/code>属于付款通知的回调，状态为&lt;code>TRADE_SUCCESS&lt;/code>，注意不要与原支付记录的回调混淆，不同之处在于多了&lt;code>refund_fee&lt;/code>和&lt;code>gmt_refund&lt;/code>两个字段&lt;/li>
&lt;/ul>
&lt;h3 id="付款">付款&lt;/h3>
&lt;p>从支付宝账户付款出去分为到其他支付宝账户和到银行卡账户，官方提供的文档中只有&lt;a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7386797.0.0.cPDNbc&amp;amp;treeId=64&amp;amp;articleId=103569&amp;amp;docType=1">到支付宝账户&lt;/a>
到支付宝账户是有密接口，需要在&lt;code>window+ie&lt;/code>下输入密码才能完成付款操作。
到银行卡账户是无密接口，需要联系客服开通，开通时间1-3天。&lt;/p>
&lt;p>到银行卡账户接口名称：&lt;code>bptb_pay_file&lt;/code>
费率分为&lt;code>T0&lt;/code>和&lt;code>T1&lt;/code>到账：
&lt;strong>T0&lt;/strong>： 0-2万元（不包含2万元）/2元每笔；2万元-5万元（不包含5万元）/4元每笔；5万元-10万元（不包含10万元）/6元每笔；10万元-20万元（不包含20万元）/10元每笔；20万元-50万元（不包含50万元）/20元每笔；50万元-100万元（不包含100万元）/30元每笔；100万元以上的/50元每笔
&lt;strong>T1&lt;/strong>： 0-2万元（不包含2万元）/1元每笔；2万元-5万元（不包含5万元）/3元每笔；5万元-100万元（不包含100万元）/5元每笔；100万元以上的/20元每笔
额度：默认到个人和单位都是单笔500万，单日累计1000万元&lt;/p>
&lt;p>坑：&lt;/p>
&lt;ul>
&lt;li>区分T0和T1的字段名为&lt;code>bussiness_type&lt;/code>，是拼写错误的&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>到支付宝的接口名称：&lt;code>batch_trans_notify&lt;/code>
费率：0 - 20000元／0.50元；20000（含） - 50000元／1.00元；50000元（含）以上／3.00元
额度：默认到个人是单笔500万，到单位是单笔500万，单日累计1000万元&lt;/p>
&lt;p>坑：&lt;/p>
&lt;ul>
&lt;li>回调的参数用了&lt;code>^&lt;/code>和&lt;code>|&lt;/code>分隔，如果通过java来做split处理，需要做转义处理为&lt;code>\\^&lt;/code>和&lt;code>\\|&lt;/code>&lt;/li>
&lt;li>这个接口是有密的，表单提交之后需要在&lt;code>window+ie&lt;/code>下输入密码才能完成付款操作，如果提交表单后未输入密码，这条付款记录会停留在待审核状态，没有超时或者关闭的回调，同一批次号无法重复提交，只能在支付宝网页端对已经提交的批次号进行审核处理：
&lt;img src="https://run.halfbit.top/image/2016-11-02-02-20-18.jpg" alt="">&lt;/li>
&lt;/ul>
&lt;h3 id="查询">查询&lt;/h3>
&lt;p>支付宝的付款回调是很及时的，所以这里查询主要针对付款操作。
开通了付款功能就默认开通了对应的查询功能。
查询付款到银行卡接口：&lt;code>bptb_file_query&lt;/code>
查询付款到支付宝账户接口：&lt;code>btn_status_query&lt;/code>&lt;/p>
&lt;p>总体感受：
&lt;strong>支付宝 = 劳动密集型接口 + 高昂费率&lt;/strong>&lt;/p></description></item><item><title>记一次反编译过程（二）</title><link>https://run.halfbit.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%BA%8C/</link><pubDate>Fri, 28 Oct 2016 21:53:37 +0000</pubDate><guid>https://run.halfbit.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%BA%8C/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>&lt;strong>此文不涉及任何道义和伦理的讨论&lt;/strong>&lt;/p>
&lt;p>距离上一次做反编译已经一个月过去了，这次要解开另一个谜题，也算是多了解一个接口加密的设计方案。&lt;/p>
&lt;!-- more -->
&lt;p>这个APP包含android和ios两个版本。
android下的版本是经过360安全加固过的，目前的技术能力和时间投入都无法支撑对加固后代码的反编译。
ios由于特殊的生态环境，很少有公司能意识到对ios下的客户端做代码保护。
所以这次主要从ios客户端入手。&lt;/p>
&lt;h2 id="砸壳">砸壳&lt;/h2>
&lt;p>ios应用提交到apple store审核通过之后默认会做一层加固保护，就是俗称的&lt;code>壳&lt;/code>。
如何砸开这个壳获取里面的可执行文件有很多方法，网上一搜可以搜到很多相关的文章，唯一需要的就是一台越狱后的ios设备。&lt;/p>
&lt;h3 id="小技巧">小技巧&lt;/h3>
&lt;p>如果你的ios应用是直接通过手机中的itunes安装的，砸壳出来的可执行文件可以反编译获得汇编语言，但是由于是一个64位的版本，当前版本的&lt;code>Hopper Disassembler&lt;/code>和大名鼎鼎的&lt;code>IDA&lt;/code>的&lt;code>HEX-RAYS&lt;/code>插件都无法生成相应的伪代码。
&lt;code>Hopper Disassembler&lt;/code>的提示：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-29-01-14-26.png" alt="">
&lt;img src="https://run.halfbit.top/image/2016-10-29-01-09-48.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>（The CPU backend cannot create pseudo-code for this CPU or CPU mode.）&lt;/p>
&lt;/blockquote>
&lt;p>IDA则体现为&lt;code>F5&lt;/code>功能键在X64版本下是无效的。&lt;/p>
&lt;p>为了绕开这个限制，可以通过Mac端的itunes下载APP到电脑，之后通过itunes同步到手机。通过这种方法安装的APP砸壳出来的代码是可以通过32位版本的IDA来执行反编译的，同样hopper也可以支持生成对应的伪代码。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-29-01-15-41.png" alt="">
选择 &lt;code>ARM v7&lt;/code>打开即可。IDA通过可通过32位版本打开。&lt;/p>
&lt;h2 id="定位">定位&lt;/h2>
&lt;p>先来看一下这个APP的接口加密特征：
&lt;img src="https://run.halfbit.top/image/2016-10-29-01-24-21.jpg" alt="">
每个请求都携带了一个名为&lt;code>payload&lt;/code>的参数，包含了用2个&lt;code>.&lt;/code>号分隔的3段字符串，稍加了解，就能知道这个接口的加密方式是&lt;a href="https://jwt.io/">JWT&lt;/a>。&lt;/p>
&lt;p>JWT与之前谈到过的正向hash校验是同样的思想，请求中携带了所有参与hash的请求参数和一串计算得到的hash值，后台通过相同的正向hash过程得到的hash值与客户端提交的进行比对来判断这个请求是否合法。&lt;/p>
&lt;p>在&lt;a href="http://suclogger.tech/2016/09/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/">上一篇&lt;/a>中已经说到：&lt;/p>
&lt;blockquote>
&lt;p>单向hash的缺点就在于不可逆（排除碰撞的可能），由于http是无状态的，计算单向hash传入的参数都需要显式传递给后端，或者取前后端预先约定好的一个值，这就意味着，如果计算单向hash的算法暴露了，只需要根据算法计算对应的hash值，就可以很容易的构造出一个合法的请求。
而且，如果方案暴露，所有接口都无一幸免，因为参数都是明文，对于所有请求加密都形同虚设。&lt;/p>
&lt;/blockquote>
&lt;p>所以，我们的目标就是在反编译的客户端代码中找到这把钥匙。&lt;/p>
&lt;p>这里我用了一个比较巧妙的方法，有个前情提要是是该APP的安卓客户端在某个版本之前是没有做加固处理的（在上一篇中我也提到，会对历史版本做一些分析），所以我拿到了之前某个版本的客户端源代码，对应的加密逻辑是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public static String generateParams(String params){
HmacKey key = null;
try {
key = new HmacKey((&amp;#34;2**********i-&amp;#34; + DateConvert.getStringDateShort()).getBytes(&amp;#34;UTF-8&amp;#34;));
} catch (UnsupportedEncodingException e) {
e.printStackTrace();
}
JsonWebSignature jws = new JsonWebSignature();
jws.setPayload(params);
jws.setHeader(&amp;#34;typ&amp;#34;,&amp;#34;JWT&amp;#34;);
jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.HMAC_SHA256);
jws.setKey(key);
jws.setDoKeyValidation(false);
String jwt = null;
try {
jwt = jws.getCompactSerialization();
} catch (JoseException e2) {
e2.printStackTrace();
}
return jwt;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>是jwt提供的标准实现，使用的密钥是一串固定的字符串加上当前的日期（格式YYYYMMDD)。&lt;/p>
&lt;p>通过这个安卓客户端的代码，如何快速定位到ios的加密逻辑位置呢？
我通过iTunes下载到了ios客户端下的对应版本，然后搜索了一下这个字符串，就定位到了加密的逻辑所在的方法位置：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-29-01-48-22.png" alt="">
而且果不其然的是，最新的客户端中，加密代码的逻辑，依然是这个方法：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-29-01-52-46.jpg" alt="">
在IDA的帮助下，我们找到了钥匙，成功解开了这道谜题：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-29-01-56-10.png" alt="">&lt;/p></description></item><item><title>配置Erlang环境</title><link>https://run.halfbit.top/post/%E9%85%8D%E7%BD%AEerlang%E7%8E%AF%E5%A2%83/</link><pubDate>Fri, 21 Oct 2016 21:24:15 +0000</pubDate><guid>https://run.halfbit.top/post/%E9%85%8D%E7%BD%AEerlang%E7%8E%AF%E5%A2%83/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>本文环境：macOS Sierra&lt;/p>
&lt;h3 id="安装-erlang-otp">安装 Erlang OTP&lt;/h3>
&lt;p>通过homebrew安装erlang：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">brew install erlang
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功页面：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-11-07-15-41-12.jpg" alt="">
验证安装：
输入&lt;code>erl&lt;/code>命令会返回：
&lt;img src="https://run.halfbit.top/image/2016-11-07-15-42-09.jpg" alt="">&lt;/p>
&lt;h3 id="安装rebar">安装Rebar&lt;/h3>
&lt;p>&lt;a href="http://erlang.org/doc/getting_started/seq_prog.html#id60113">Rebar&lt;/a>可以帮助我们编译和调试erlang程序，可以通过以下命令进行安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">git clone git://github.com/rebar/rebar.git
$ cd rebar
$ ./bootstrap
Recompile: src/getopt
...
Recompile: src/rebar_utils
==&amp;gt; rebar (compile)
$ mv ./rebar /usr/local/bin/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功页面如图：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-11-07-15-45-25.jpg" alt="">&lt;/p>
&lt;h3 id="在idea中配置erlang-sdk">在idea中配置erlang SDK&lt;/h3>
&lt;p>在插件仓库中搜索&lt;a href="https://plugins.jetbrains.com/plugin/7083">Erlang&lt;/a>进行 安装：
&lt;img src="https://run.halfbit.top/image/2016-11-07-15-48-21.jpg" alt="">
安装成功后在添加SDK列表中就会出现erlang选项：
&lt;img src="https://run.halfbit.top/image/2016-11-07-15-47-19.jpg" alt="">&lt;/p>
&lt;h3 id="在idea中配置rebar">在idea中配置Rebar&lt;/h3>
&lt;p>在&lt;code>Configure | Preferences | Other Settings → Erlang External Tools&lt;/code>中填写路径：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">/usr/local/bin/rebar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://run.halfbit.top/image/2016-11-07-15-52-55.png" alt="">&lt;/p></description></item><item><title>通过Wireshark看MIM攻击</title><link>https://run.halfbit.top/post/%E9%80%9A%E8%BF%87wireshark%E7%9C%8Bmim%E6%94%BB%E5%87%BB/</link><pubDate>Tue, 18 Oct 2016 22:41:14 +0000</pubDate><guid>https://run.halfbit.top/post/%E9%80%9A%E8%BF%87wireshark%E7%9C%8Bmim%E6%94%BB%E5%87%BB/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>本文中，服务端IP地址是&lt;code>120.55.246.173&lt;/code>，移动端（我的手机）的IP地址是&lt;code>192.168.1.226&lt;/code>，中间人（我的电脑）的IP地址是&lt;code>192.168.1.158&lt;/code>，电脑通过Charles监听8888端口，转发移动端发来的数据包。&lt;/p>
&lt;h2 id="正常的https通信过程">正常的HTTPS通信过程&lt;/h2>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-18-23-12-10.png" alt="">
正如在上文&lt;a href="http://suclogger.tech/2016/10/14/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/">应用接口的安全方案设计（二）&lt;/a> 中分析的，是否存在MIM攻击关键在于客户端接收到的证书，是否是服务端下发的原始证书。
着重看编号&lt;code>156&lt;/code>和&lt;code>158&lt;/code>两个包。
&lt;code>156&lt;/code>携带着服务端下发的原始证书信息：
&lt;img src="https://run.halfbit.top/image/2016-10-18-23-35-55.png" alt="">
&lt;code>158&lt;/code>是Charles处理后发送给客户端的包：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-18-23-37-13.png" alt="">
可以看到传递的证书是一致的，意味着这个HTTPS通信是安全的。&lt;/p>
&lt;h2 id="mim攻击下的https通信过程">MIM攻击下的HTTPS通信过程&lt;/h2>
&lt;p>&lt;code>276&lt;/code>号包表示服务端下发给Charles合法的证书：
&lt;img src="https://run.halfbit.top/image/2016-10-18-23-38-14.png" alt="">
&lt;code>352&lt;/code>号包表示Charles传递自己的证书给客户端：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-18-23-41-52.png" alt="">
Wireshark已经贴心的给我们加上了黄色的警告提示，这个证书已经由原来由wosign签发的证书被替换成了Charles的证书：
&lt;img src="https://run.halfbit.top/image/2016-10-18-23-43-15.jpg" alt="">
如果客户端接收了Charles的证书，整个通信内容就都暴露在Charles中了。&lt;/p></description></item><item><title>有关“架构师”</title><link>https://run.halfbit.top/post/%E6%9C%89%E5%85%B3%E6%9E%B6%E6%9E%84%E5%B8%88/</link><pubDate>Sun, 16 Oct 2016 16:45:28 +0000</pubDate><guid>https://run.halfbit.top/post/%E6%9C%89%E5%85%B3%E6%9E%B6%E6%9E%84%E5%B8%88/</guid><description>&lt;p>昨天参加了云栖社区开发者技术峰会——架构专场，会议议程包含了分布式系统，容器，混合云，机器学习中蕴含的架构思想。
这是架构师最好的时代。物联网、移动、云计算、大数据、人工智能等等新兴领域，都包含着背后架构师的思想、设计、技能和经验。&lt;/p>
&lt;!-- more -->
&lt;p>阿里云大数据计算平台资深架构师林伟带来的分享《我看分布式系统架构设计和阿里实践》最后提到了一个架构师的基本素养：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-16-16-27-57.png" alt="">&lt;/p>
&lt;ul>
&lt;li>熟悉各种资源的原始特性&lt;/li>
&lt;li>知识面宽&lt;/li>
&lt;li>大量阅读各种系统代码，汲取营养&lt;/li>
&lt;li>实践出真实，大量的coding&lt;/li>
&lt;li>两个数量级的性能变化就需要系统的重新设计&lt;/li>
&lt;/ul>
&lt;p>恰好前两天看到 曹政@caoz的梦呓 的一篇文章，里面提到这样一个细节：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">案例2：看似正常的负载过高
当时有个新业务数据增长很快，该业务的数据库服务器每天处理数百万次数据查询请求，uptime比较高，经常在5-6的样子，cpu负荷较重，运维负责人就发邮件，申请更换更好的服务器，增加资源。
按理说，这是个合理请求，负载也确实很高，业务也确实增长，但我这个人天性财迷抠门，总觉得这个数字不应该是极限，就登录到数据库服务器看了一下，很简单，我的方法就是先刷show processlist，连续刷几遍，看数据库都在执行啥，开销都集中在什么状态，这一看还真就发现问题了，居然经常看到有些mysql进程停留在 storing result to query cache 上。
这事我就纳闷了，因为按常规，这个状态应该是基本没有时间开销的，也就是show processlist看到是小概率事件的。
所以就要验证一下，执行 set profiling=1，然后从show processlist复制一条执行一次，然后执行 show profiles for query 1; 结果意外发现，常规来说执行开销最大的sending data （这个开销可不是输出数据哦，其实是io寻址）只有0.002秒，而 storing result to query cache 却执行了 0.005秒的样子，千分之五秒，一般人可能就无视了吧，但整个SQL执行不到0.01秒，这个开销比例蛮大的了。
那个，其实这个问题的责任者呢，是我自己，我觉得query cache是个好东西啊，所以开始配置服务器的时候，还是我自己做的配置，因为服务器内存够大，我就把query cache设置的比较大，结果SQL的反馈结果内容较多的情况下，就出现了query cache的碎片化比较严重，反而导致了query cache存储额外的开销，我在数据库里直接操作将query cache内容重置的命令，再执行这个SQL，用profiling去分析，发现这个开销就没有了，负载瞬间显著下降了60%左右。
然后我跟运维负责人说，半夜没人的时候把数据库的启动参数，query cache那块设置回默认值，重启一下数据库，于是就没再追加预算和服务器投入。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>想想有的时候自己经手的项目，都是达到能用的程度之后，就没有再投入时间去自己维护和完善，对于资源和性能都没有仔细分析，只是一味的想通过提高机器配置的方式来解决问题，实在没有一个称职的&lt;code>架构&lt;/code>应该有的&lt;code>“抠门”&lt;/code>。&lt;/p>
&lt;p>感谢林伟的分享，有醍醐灌顶之感。&lt;/p>
&lt;p>后面继续努力，希望在架构师这条路上走的更远。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-10-16-16-39-50.jpg" alt="">&lt;/p></description></item><item><title>应用接口的安全方案设计（二）</title><link>https://run.halfbit.top/post/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%E4%BA%8C/</link><pubDate>Fri, 14 Oct 2016 00:17:27 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%E4%BA%8C/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>在&lt;a href="http://suclogger.tech/2016/09/23/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/">上一篇&lt;/a>文章中我说到：HTTPS是不安全的，因为存在MIM攻击。但是随着了解的深入，发现这个认识是有问题的，正确的认识应当是：&lt;strong>HTTPS的设计是安全的，只是错误的用法导致了MIM攻击&lt;/strong>。&lt;/p>
&lt;p>关于SSL/TLS协议运行机制，阮一峰的&lt;a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">博客文章&lt;/a>做了很好的介绍。&lt;/p>
&lt;p>稍加了解，可以发现，其实上一篇文章中的设计就是参照了SSL/TLS协议运行机制，混合了非对称加密和对称加密，有几点需要注意：&lt;/p>
&lt;ol>
&lt;li>引入了证书机制来确保服务端下发的公钥不被窜改。&lt;/li>
&lt;li>引入三组随机数组成最后的随机数，保证了随机数的随机性。&lt;/li>
&lt;/ol>
&lt;p>相比于一个正常的HTTPS通信过程，MIM攻击下的HTTPS通信过程如下（这里以Charles为例）：
第一步，客户端发送给服务器的HTTPS请求，**Charles截获后伪装成客户端向服务器发送请求进行握手 **。
第二步，服务器发回相应，&lt;strong>Charles获取到服务器的CA证书和其中包含的证书公钥。然后Charles伪造自己的CA证书， 冒充服务器证书传递给客户端&lt;/strong>。
第三步，客户端校验接收到的证书，生成密码pre_master并用接收到的证书中包含的公钥加密，并生成HTTPS通信用的对称密钥enc_key。
第四步，客户端将加密后的pre_master传递给服务器， &lt;strong>Charles截获后将密文用自己伪造证书的私钥解开， 获得pre_master并计算得到HTTPS通信用的对称密钥enc_key，伪装成客户端，用服务端证书中携带的公钥加密pre_master向服务器发送&lt;/strong>。
第五步，服务器用私钥解开后建立信任。&lt;/p>
&lt;p>成功建立”信任“之后，由于Charles持有通信用对称密钥enc_key，无论是客户端的请求密文或者是服务端的返回密文，对其都是可见的。&lt;/p>
&lt;p>&lt;strong>以上攻击发生的前提，就是客户端信任由Charles下发的证书，从而接受证书中包含的公钥信息&lt;/strong>。&lt;/p>
&lt;p>为了防御MIM攻击，只需客户端只信任CA颁发的证书即可，当然要求服务端的证书也是由CA颁发，这就意味着一笔高昂的费用（ 购买受信任机构颁发的证书每年要交 100 到 500 美元不等的费用）。
除了CA颁发的证书，还有两类证书：&lt;/p>
&lt;ul>
&lt;li>没有得到CA认可的证书颁发机构颁发的证书&lt;/li>
&lt;li>自己颁发的证书, 分临时性的(在开发阶段使用)或在发布的产品中永久性使用的两种&lt;/li>
&lt;/ul>
&lt;p>所以很多产品，为了方便和实惠，采用了自签名证书来创建HTTPS链接。
而自签名证书的使用过程中可能因为存在下列问题而导致受到MIM攻击：&lt;/p>
&lt;ol>
&lt;li>客户端没有对SSL证书进行校验（因为自建证书的根CA的数字签名未在操作系统的信任列表中，如果添加校验肯定会返回失败）；&lt;/li>
&lt;li>客户端没有对域名进行校验；&lt;/li>
&lt;li>服务端遭受攻击，证书私钥泄漏。&lt;/li>
&lt;/ol>
&lt;p>所以&lt;strong>MIM中间人攻击漏洞并不是HTTPS设计的缺陷，而是人为使用过程中出现的漏洞&lt;/strong>。&lt;/p>
&lt;p>相比之下，一个设计的比较好的APP在MIM攻击中则表现为：
&lt;img src="https://run.halfbit.top/image/2016-10-14-01-21-22.jpg" alt="">&lt;/p>
&lt;p>所以，在采用HTTPS给接口加固的时候，一定切记要&lt;strong>在客户端校验服务端证书的合法性&lt;/strong>。
不论证书是由CA颁发，或者是自签名证书（自签名证书校验方法参见&lt;a href="https://www.oschina.net/translate/android-security-implementation-of-self-signed-ssl">这篇文章&lt;/a>）。&lt;/p></description></item><item><title>记一次反编译过程</title><link>https://run.halfbit.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</link><pubDate>Sun, 25 Sep 2016 19:43:27 +0000</pubDate><guid>https://run.halfbit.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>&lt;strong>此文不涉及任何道义和伦理的讨论&lt;/strong>&lt;/p>
&lt;h2 id="尝试旧版本app查看对应的旧版本接口是否加密">尝试旧版本APP，查看对应的旧版本接口是否加密&lt;/h2>
&lt;p>安卓的历史版本可以通过&lt;a href="http://apk.hiapk.com">hiapk&lt;/a>下载，资源的链接一般类似这种形式： &lt;a href="http://apk.hiapk.com/appinfo/com.maihaoche.bentley/1050805">http://apk.hiapk.com/appinfo/com.maihaoche.bentley/1050805&lt;/a>，最后的数字用于标识不同的版本号。
IOS的历史版本可以通过itunes下载，只需修改请求中携带的版本号即可下载不同版本，具体参见：&lt;a href="http://bbs.itools.cn/thread-93616-1-1.html">iTunes下载 App Store 任意历史版本应用&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-09-25-19-55-38.jpg" alt="">
在mac上通过&lt;code>Genymotion&lt;/code>可以安装安卓apk，在虚拟中配置代理地址&lt;code>10.0.3.2&lt;/code>，端口8888，配合&lt;code>charles&lt;/code>即可将虚拟机中请求拦截到&lt;code>charles&lt;/code>中。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-09-25-19-59-25.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-09-25-20-01-47.jpg" alt="">&lt;/p>
&lt;p>分析了若干历史版本之后，发现该的App2.X版本未进行加密，但是对应的域名和接口也已经停用，所以这条路走不通。&lt;/p>
&lt;h2 id="尝试反编译app">尝试反编译APP&lt;/h2>
&lt;p>apk的反编译可以使用：&lt;a href="https://github.com/lxdvs/apk2gold">apk2gold&lt;/a>
反编译之后，可以看到解析出的java代码。
得到代码之后如何定位到加密部分的逻辑因场景而定，在这个app中，定位到一个关键类&lt;strong>BaseWeb&lt;/strong>，代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">protected static TreeMap&amp;lt;String, Object&amp;gt; jiaMi(TreeMap&amp;lt;String, Object&amp;gt; treeMap, boolean z) {
...
try {
String sha1 = sha1(treeMap, z);
if (sha1 == null) {
return null;
}
treeMap2.put(&amp;#34;key&amp;#34;, sha1);
return treeMap2;
} catch (Exception e) {
u.a(e);
treeMap2.put(&amp;#34;key&amp;#34;, &amp;#34;&amp;#34;);
return treeMap2;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到&lt;code>key&lt;/code>字段是通过&lt;code>sha1&lt;/code>函数生成，具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public static String sha1(TreeMap&amp;lt;String, Object&amp;gt; treeMap, boolean z) {
if (treeMap == null) {
treeMap = new TreeMap();
}
if (!z) {
treeMap.put(&amp;#34;publicKey&amp;#34;, Info.a().getMoreStrInfo(AppContext.getInstance(), 345));
} else if (!mApplication.isLogin()) {
return null;
} else {
treeMap.put(&amp;#34;publicKey&amp;#34;, mApplication.getUser().getPrivateKey());
}
if (treeMap == null || treeMap.size() &amp;lt;= 0) {
return &amp;#34;&amp;#34;;
}
String str = &amp;#34;&amp;#34;;
int i = 0;
for (String str2 : treeMap.keySet()) {
Object obj = treeMap.get(str2);
if (obj != null) {
if (i &amp;gt; 0) {
str = str + &amp;#34;^_~&amp;#34;;
} else {
i++;
}
...
str = str + str2 + &amp;#34;=&amp;#34; + formaterFloat(Double.parseDouble(obj.toString()));
...
}
}
// 标准的sha1加密
return i.e(str);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法根据&lt;code>z&lt;/code>的取值决定&lt;code>publicKey&lt;/code>是通过&lt;code> Info.a().getMoreStrInfo(AppContext.getInstance(), 345)&lt;/code>这个方法来生成，还是直接取&lt;code>mApplication.getUser().getPrivateKey()&lt;/code> 。
因为我们感兴趣的接口的&lt;code>z&lt;/code>取值都是&lt;code>false&lt;/code>，所以要深入探究一下&lt;code> Info.a().getMoreStrInfo(AppContext.getInstance(), 345)&lt;/code>这个方法。
反编译发现这个方法是包裹在so中，也是常见的保护敏感信息的方式。
Hopper反编译 结果：
&lt;img src="https://run.halfbit.top/image/2016-09-26-15-01-36.png" alt="">&lt;/p>
&lt;p>祭出神器&lt;code>IDA Pro&lt;/code>，代码可读性提高很多：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-09-26-01-58-38.jpg" alt="">
汇编无力，直接F5:
找到传入参数为345时候的对应逻辑：
&lt;img src="https://run.halfbit.top/image/2016-09-26-02-00-24.png" alt="">&lt;/p>
&lt;p>其实就是简单取得了一个字符串：&lt;strong>4cbce54e&amp;mdash;&amp;mdash;17c70193&lt;/strong>&lt;/p>
&lt;h2 id="成功">成功&lt;/h2>
&lt;p>因为参数是完全明文的，将参数和反编译获取的&lt;code>publicKey&lt;/code>放入&lt;code>TreeMap&lt;/code>，拼接成字符串之后执行标准sha1，即可获取一个合法的&lt;code>key&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> TreeMap&amp;lt;String,Object&amp;gt; treeMap = new TreeMap();
treeMap.put(&amp;#34;publicKey&amp;#34;, &amp;#34;4cbce54---------70193&amp;#34;);
treeMap.put(&amp;#34;参数key&amp;#34;, &amp;#34;参数value&amp;#34;);
String str = &amp;#34;&amp;#34;;
int i = 0;
for (String str2 : treeMap.keySet()) {
Object obj = treeMap.get(str2);
if (obj != null) {
if (i &amp;gt; 0) {
str = str + &amp;#34;^_~&amp;#34;;
} else {
i++;
}
if (obj instanceof String) {
str = str + str2 + &amp;#34;=&amp;#34; + obj;
}
}
}
System.out.println(e(str));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="对比结果">对比结果&lt;/h2>
&lt;p>真实请求：
&lt;img src="https://run.halfbit.top/image/2016-09-26-14-57-11.jpg" alt="">&lt;/p>
&lt;p>模拟 key ：
&lt;img src="https://run.halfbit.top/image/2016-09-26-14-56-46.jpg" alt="">&lt;/p></description></item><item><title>应用接口的安全方案设计</title><link>https://run.halfbit.top/post/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</link><pubDate>Fri, 23 Sep 2016 18:42:22 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>鉴于当前日益严峻的行业竞争和用户的安全忧虑，我司近期上线了对全接口的安全监控，以下记录了方案设计过程中的一些想法。&lt;/p>
&lt;h2 id="https安全吗">HTTPS安全吗？&lt;/h2>
&lt;p>HTTPS可以在一定程度上隐藏接口调用的路径和参数，但是如果使用不当，依然会暴露在&lt;a href="https://zh.wikipedia.org/zh-cn/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">MIM攻击&lt;/a>下，现在流行的网络调试工具都可以支持MIM。如Charles：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-09-24-19-11-21.png" alt="">&lt;/p>
&lt;p>Surge:
&lt;img src="https://run.halfbit.top/image/2016-09-24-19-10-30.png" alt="">&lt;/p>
&lt;p>在MIM攻击下，通过HTTPS的请求依旧一览无余。所以我们需要一个更为可靠的接口加密方案，来抵御爬虫等针对接口的攻击。&lt;/p>
&lt;h2 id="案例分析">案例分析&lt;/h2>
&lt;p>先来看看当前市面上一个比较成熟的产品的接口机密方案。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-09-24-22-48-57.jpg" alt="">&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-09-24-22-52-21.jpg" alt="">&lt;/p>
&lt;p>可以看到所有的接口请求都带着一个&lt;code>key&lt;/code>字段，这个字段用于验证这个请求是否合法，无论是修改 &lt;code>key&lt;/code>字段或者&lt;code>param&lt;/code>中携带的请求参数，都会返回&lt;code>签名认证失败&lt;/code>的提示。
&lt;img src="https://run.halfbit.top/image/2016-09-24-22-53-11.jpg" alt="">&lt;/p>
&lt;p>我们通过反编译部分代码后了解到，这个方案通过给明文参数添加一个混淆值之后执行一个单向hash算法&lt;code>sha1&lt;/code>获取一个用于校验的字段key。&lt;/p>
&lt;p>这个方案安全吗？&lt;/p>
&lt;p>单向hash的缺点就在于不可逆（排除碰撞的可能），由于http是无状态的，计算单向hash传入的参数都需要显式传递给后端，或者取前后端预先约定好的一个值，这就意味着，如果计算单向hash的算法暴露了，只需要根据算法计算对应的hash值，就可以很容易的构造出一个合法的请求。
而且，如果方案暴露，所有接口都无一幸免，因为参数都是明文，对于所有请求加密都形同虚设。
在反编译技术已经非常非常成熟的今天，这个算法的暴露基本是时间问题。
具体反编译和分析过程在&lt;a href="http://suclogger.tech/2016/09/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/">下一篇博文中&lt;/a>介绍。&lt;/p>
&lt;h2 id="我们的方案设计">我们的方案设计&lt;/h2>
&lt;p>如图所示：&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/%E5%8A%A0%E5%AF%86.png" alt="">&lt;/p>
&lt;p>这里就不详叙&lt;a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">AES&lt;/a>和&lt;a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA&lt;/a>的相关细节。
大致可以认为，AES是一种对称加密算法，RSA是一种非对称加密算法，仅仅通过密文来试图解密明文都是不可能的（密钥长度足够）。
读懂了这张图，就基本能明白这个方案的设计。补充几点设计的细节：&lt;/p>
&lt;h3 id="为什么不采用案例中的方案">为什么不采用案例中的方案&lt;/h3>
&lt;p>案例中的参数以明文的方式传输，如果hash值的计算算法被通过反编译暴露，所有接口都同时受到威胁。
这个方案可以在加密方案暴露之后，通过保护明文请求参数提高接口的安全。&lt;/p>
&lt;h3 id="为什么不直接对请求参数采用非对称加密">为什么不直接对请求参数采用非对称加密&lt;/h3>
&lt;p>对称加密和非对称加密在计算消耗上存在显著的差距，具体可以参见：&lt;a href="http://blog.csdn.net/wgw335363240/article/details/8878584">AES和RSA加密算法调研&lt;/a>
如果所有接口都采用非对称加密，对客户端和服务器端都会带来巨大的计算压力，从而严重影响用户体验。&lt;/p>
&lt;h3 id="aes密钥的生成技巧">AES密钥的生成技巧&lt;/h3>
&lt;ul>
&lt;li>AES可以由客户端在每次请求的时候生成，确保每个请求生成的AES密钥的唯一性，后台通过校验AES密钥的唯一性可以监控到爬虫的重放攻击。为了监控AES密钥的唯一性，后台存放和查询的压力会逐渐提升，所以可以通过存放在redis的方式，并通过ttl来控制记录的存活时间。&lt;/li>
&lt;li>如上一条所述后台记录的AES密钥是有一定存活时间的，意味着超过这个存活时间，就无法监控到重放攻击，所以可以在AES密钥中携带时间信息，如果后台监控到当前时间和AES密钥中携带的时间超过了后台记录的存活时间，也可以记录为可疑请求。&lt;/li>
&lt;/ul>
&lt;h3 id="是否安全">是否安全？&lt;/h3>
&lt;p>如果要破解这个方案，需要同时满足以下条件：&lt;/p>
&lt;ul>
&lt;li>通过反编译或者其他方式获取了RSA的加密公钥&lt;/li>
&lt;li>通过反编译或者其他方式获取了AES密钥的生成规则&lt;/li>
&lt;li>通过反编译或者其他方式获取了请求参数的结构&lt;/li>
&lt;/ul>
&lt;p>同时满足着三个条件是有可能的，但是不同于上文中介绍的案例，在接口重放成本上是有很显著的差距的，如果配合后台监控得当，基本可以把恶意用户及时禁用。
如果客户端配合得当，通过代码混淆等方式增加反编译的难度，保护加密公钥，就能很大程度拦住恶意用户。&lt;/p>
&lt;h3 id="服务端如何无痛的接入当前的应用">服务端如何无痛的接入当前的应用&lt;/h3>
&lt;p>想必所有接触过spring的用户脑袋里面都冒出了三个字：&lt;code>AOP&lt;/code>。
没错，这个方案通过&lt;code>AOP&lt;/code>可以做到很好的无痛接入，将切点定义在所有需要加密的请求方法，将解密逻辑存放在对应的&lt;code>Advise&lt;/code> 中即可。主要有以下注意的地方：&lt;/p>
&lt;h4 id="确保这个切面具有最高的优先级">确保这个切面具有最高的优先级&lt;/h4>
&lt;p>除了这个切面，系统中还存在很多业务相关的切面，比如校验登录，记录日志等，都需要明文的请求参数，所以我们要确保这个切面具有最高的优先级。
如果通过&lt;code>@Aspect&lt;/code>注解来定义切面，有一个对应的注解&lt;code>@Order&lt;/code>可以用于定义切面的优先级，值越小意味着优先级越高，在触发的时候会越早被执行。&lt;/p>
&lt;h4 id="兼容spring的表单校验">兼容spring的表单校验&lt;/h4>
&lt;p>如果在接口方法参数中带了&lt;code>@Valid&lt;/code>注解，spring会对对应的表单参数执行校验，校验结果存放在接口方法的&lt;code>Errors&lt;/code>或者&lt;code>BindingResult&lt;/code>中，因为加密之后，这个校验是肯定不会通过的（因为明文参数字段的值都为空），所以需要在&lt;code>Advise&lt;/code>方法中重新执行校验：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Errors errors = new BeanPropertyBindingResult(newForm, formClazz.getName());
validator.validate(newForm, errors);
args[i] = errors;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">BindingResult result = new BeanPropertyBindingResult(newForm, formClazz.getName());
validator.validate(newForm, result);
args[i] = result;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个&lt;code>validator&lt;/code>在spirng容器中定义，注入到当前&lt;code>Aspect&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;bean id=&amp;#34;validator&amp;#34; class=&amp;#34;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&amp;#34; /&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>AES和RSA的JavaScript实现</title><link>https://run.halfbit.top/post/aes%E5%92%8Crsa%E7%9A%84javascript%E5%AE%9E%E7%8E%B0/</link><pubDate>Mon, 12 Sep 2016 01:30:28 +0000</pubDate><guid>https://run.halfbit.top/post/aes%E5%92%8Crsa%E7%9A%84javascript%E5%AE%9E%E7%8E%B0/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;h2 id="创建node工程">创建node工程&lt;/h2>
&lt;p>新建node工程，导入&lt;code>crypto-js&lt;/code>和&lt;code>crypto-browserify&lt;/code>的npm包。
代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> var CryptoJS = require(&amp;#39;crypto-js&amp;#39;);
var crypto = require(&amp;#39;crypto-browserify&amp;#39;);
var key = &amp;#39;16位密钥&amp;#39;;
var rsaKeyStr = &amp;#39;&amp;#39;RSA公钥&amp;#39;;
var rsaBuffer = new Buffer(key);
// 使用RSA公钥加密AES的密钥
var cryptedData = crypto.publicEncrypt(rsaKeyStr, rsaBuffer);
//定义向量
var iv = &amp;#39;qwertyuiasdfghjk&amp;#39;;
key = CryptoJS.enc.Utf8.parse(key);
iv = CryptoJS.enc.Utf8.parse(iv);
//使用AES加密加密内容，这里用new Object 代替
var encrypted = CryptoJS.AES.encrypt(JSON.stringify(new Object(), key, {
iv: iv,
mode: CryptoJS.mode.CBC,
padding: CryptoJS.pad.Pkcs7
});
var encryptedObj = new Object();
encryptedObj.mhcParams = encrypted.toString();
encryptedObj.mhcToken = cryptedData.toString(&amp;#34;base64&amp;#34;);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意有一个坑：
&lt;code>crypto.publicEncrypt(public_key, buffer)&lt;/code>传入的&lt;code>public_key&lt;/code>参数可以是一个Object，** If public_key is a string, it is treated as the key with no passphrase and will use RSA_PKCS1_OAEP_PADDING** ：如果是个string，默认采用&lt;code>RSA_PKCS1_OAEP_PADDING&lt;/code>的padding方式。&lt;/p>
&lt;h2 id="通过webpack打包">通过webpack打包&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">const name = &amp;#39;SomeDemo&amp;#39;;
const config = {
target: &amp;#39;web&amp;#39;,
entry: [
&amp;#39;./src/SomeDemo.js&amp;#39;
],
output:{
path: path.join(__dirname, &amp;#39;./build/tech.suclogger.SomeDemo&amp;#39;),
pathInfo: true,
publicPath: &amp;#39;/build/&amp;#39;,
filename: name + &amp;#39;.js&amp;#39;
},
module: {
loaders: [
{
loader: &amp;#39;babel-loader&amp;#39;,
include: [
path.resolve(__dirname, &amp;#39;src&amp;#39;)
],
test: /\.js$/
},
{
loader: &amp;#39;json-loader&amp;#39;,
include: [
path.resolve(__dirname, &amp;#39;node_modules&amp;#39;)
],
test: /\.json$/
}
]
}
};
module.exports = config;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意有一个坑：&lt;/p>
&lt;blockquote>
&lt;p>webpack does not natively support the loading of JSON files such as /constants-browserify/constants.json. What you should do is to use the json-loader plugin for webpack (&lt;a href="https://www.npmjs.com/package/json-loader">https://www.npmjs.com/package/json-loader&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>webpack并不原生支持打包json格式文件，需要通过&lt;code>json-loader&lt;/code>这个插件来打包&lt;code>constants&lt;/code>。&lt;/p>
&lt;h2 id="非node环境下执行">非node环境下执行&lt;/h2>
&lt;p>发现报错：&lt;code>Error: secure random number generation not supported by this browser&lt;/code>&lt;/p>
&lt;p>非node环境不带&lt;code>crypto&lt;/code>，所以缺失&lt;code>crypto.getRandomValues()&lt;/code>方法，可以通过给打包出的js文件中添加：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">var crypto = {
getRandomValues: function getRandomValues(array) {
var result = []
for (var i = 0, l = array.length; i &amp;lt; l ; i++){
result.push(Math.floor(Math.random()*256))
}
return result
}
};
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>模拟一个随机数的生成方法。&lt;/p></description></item><item><title>《棋王》《北京折叠》和《你一定爱读的极简欧洲史》</title><link>https://run.halfbit.top/post/%E6%A3%8B%E7%8E%8B%E5%8C%97%E4%BA%AC%E6%8A%98%E5%8F%A0%E5%92%8C%E4%BD%A0%E4%B8%80%E5%AE%9A%E7%88%B1%E8%AF%BB%E7%9A%84%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2/</link><pubDate>Sat, 20 Aug 2016 09:30:52 +0000</pubDate><guid>https://run.halfbit.top/post/%E6%A3%8B%E7%8E%8B%E5%8C%97%E4%BA%AC%E6%8A%98%E5%8F%A0%E5%92%8C%E4%BD%A0%E4%B8%80%E5%AE%9A%E7%88%B1%E8%AF%BB%E7%9A%84%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>加班成为常态，阅读开始偏爱短中篇。
《棋王》讲的是文革时期的一个下乡知青的故事，《北京折叠》讲的是未来北京一个垃圾工的故事。
读完了《棋王》读《北京折叠》，出现了很长时间的错位，像是电影《12 Monkeys》的男主经历的一样。&lt;/p>
&lt;p>一个底层的人，在中国不同的时代背景下，所经历的，竟是如此类似。不论是《棋王》或是《北京折叠》，读来都让人觉得可悲，更多的，是对自己所处环境的担忧。&lt;/p>
&lt;p>虽然欧洲历史告诉我们：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">“并非所有东西都归国王所有”，是欧洲政府思维的基石。从私有财产权出发，衍生出人权观念，是西方价值的核心。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是《北京折叠》中，人的生活时间根据所处阶层被不同程度被压缩，时间和生存都可以被政府剥夺，更何况其余？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">日光之下，并无新事。已行的事，后必再行。
——《旧约·传道书》
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>《棋王》中发生过的事，是否还可能再发生？反智的浪潮是否会再度席卷社会？&lt;/p>
&lt;p>读的越多，越发现当前社会的悲哀。&lt;/p></description></item><item><title>再看一遍SpringMVC的工作流程</title><link>https://run.halfbit.top/post/%E5%86%8D%E7%9C%8B%E4%B8%80%E9%81%8Dspringmvc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 10 Aug 2016 22:19:54 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%86%8D%E7%9C%8B%E4%B8%80%E9%81%8Dspringmvc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>&lt;img src="https://run.halfbit.top/image/74046075A2738B39AB990A21164CB8F7.png" alt="">&lt;/p>
&lt;p>high level overview 工作流程图&lt;/p>
&lt;p>初始化DispatcherServlet的过程:&lt;/p>
&lt;p>因为在web.xml文件中配置了DispatcherServlet:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">spring&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">springframework&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">web&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DispatcherServlet&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">contextConfigLocation&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">classpath&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">spring&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">on&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">startup&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">on&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">startup&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mapping&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">spring&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="o">&amp;gt;/&amp;lt;/&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mapping&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>容器启动的时候会调用Servlet的init()方法对Servlet进行初始化操作.&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/3E2C52E8A8A705C322FE2D389ED4E8AE.png" alt="">&lt;/p>
&lt;p>根据继承关系找到init()方法的定义:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 将配置的参数映射到servlet中,并调用由子类覆盖的抽象初始方法
&lt;/span>&lt;span class="cm"> * @throws ServletException if bean properties are invalid (or required
&lt;/span>&lt;span class="cm"> * properties are missing), or if subclass initialization fails.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Initializing servlet &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getServletName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// Set bean properties from init parameters.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 封装及验证初始化参数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">PropertyValues&lt;/span> &lt;span class="n">pvs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletConfigPropertyValues&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getServletConfig&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requiredProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 将当前servlet实例转化成BeanWrapper实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BeanWrapper&lt;/span> &lt;span class="n">bw&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PropertyAccessorFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forBeanPropertyAccess&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//注册相对于Resource的属性编辑器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ResourceLoader&lt;/span> &lt;span class="n">resourceLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletContextResourceLoader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getServletContext&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">bw&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerCustomEditor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ResourceEditor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resourceLoader&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getEnvironment&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="n">initBeanWrapper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bw&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 属性注入
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bw&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setPropertyValues&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pvs&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">BeansException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Failed to set bean properties on servlet &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getServletName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// Let subclasses do whatever initialization they like.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initServletBean&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Servlet &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getServletName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39; configured successfully&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过覆盖initServletBean(),继续执行DispatcherServlet的初始化逻辑:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Overridden method of {@link HttpServletBean}, invoked after any bean properties
&lt;/span>&lt;span class="cm"> * have been set. Creates this servlet&amp;#39;s WebApplicationContext.
&lt;/span>&lt;span class="cm"> * 在获取了所有初始化参数后调用,创建WebApplicationContext上下文
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initServletBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">getServletContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Initializing Spring FrameworkServlet &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getServletName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInfoEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;FrameworkServlet &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getServletName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;: initialization started&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">webApplicationContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initWebApplicationContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">initFrameworkServlet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ServletException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Context initialization failed&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">RuntimeException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Context initialization failed&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInfoEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">elapsedTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;FrameworkServlet &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getServletName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;: initialization completed in &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="n">elapsedTime&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; ms&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>initServletBean()函数添加了一个计时器统计初始化执行的耗时,主要的逻辑委托给initWebApplicationContext():&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Initialize and publish the WebApplicationContext for this servlet.
&lt;/span>&lt;span class="cm"> * &amp;lt;p&amp;gt;Delegates to {@link #createWebApplicationContext} for actual creation
&lt;/span>&lt;span class="cm"> * of the context. Can be overridden in subclasses.
&lt;/span>&lt;span class="cm"> * @return the WebApplicationContext instance
&lt;/span>&lt;span class="cm"> * @see #FrameworkServlet(WebApplicationContext)
&lt;/span>&lt;span class="cm"> * @see #setContextClass
&lt;/span>&lt;span class="cm"> * @see #setContextConfigLocation
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">WebApplicationContext&lt;/span> &lt;span class="nf">initWebApplicationContext&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">WebApplicationContext&lt;/span> &lt;span class="n">rootContext&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="n">WebApplicationContextUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWebApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getServletContext&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">WebApplicationContext&lt;/span> &lt;span class="n">wac&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 寻找或者创建WebApplicationContext实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">webApplicationContext&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// A context instance was injected at construction time -&amp;gt; use it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">wac&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">webApplicationContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">wac&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ConfigurableWebApplicationContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ConfigurableWebApplicationContext&lt;/span> &lt;span class="n">cwac&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableWebApplicationContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">wac&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">cwac&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isActive&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// The context has not yet been refreshed -&amp;gt; provide services such as
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// setting the parent context, setting the application context id, etc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cwac&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getParent&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// The context instance was injected without an explicit parent -&amp;gt; set
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the root application context (if any; may be null) as the parent
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">cwac&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setParent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rootContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 配置文件装载
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">configureAndRefreshWebApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cwac&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 通过在web.xml中配置的contextAttribute进行初始化
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">wac&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// No context instance was injected at construction time -&amp;gt; see if one
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// has been registered in the servlet context. If one exists, it is assumed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// that the parent context (if any) has already been set and that the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// user has performed any initialization such as setting the context id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">wac&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findWebApplicationContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 重新创建WebApplicationContext的实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">wac&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// No context instance is defined for this servlet -&amp;gt; create a local one
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">wac&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createWebApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rootContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">refreshEventReceived&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Either the context is not a ConfigurableApplicationContext with refresh
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// support or the context injected at construction time had already been
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// refreshed -&amp;gt; trigger initial onRefresh manually here.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">onRefresh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">wac&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">publishContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Publish the context as a servlet context attribute.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">attrName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getServletContextAttributeName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">getServletContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">attrName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">wac&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Published WebApplicationContext of servlet &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getServletName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;&amp;#39; as ServletContext attribute with name [&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">attrName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;]&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">wac&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建了WebApplicationContext的实例后,通过onRefresh()进行配置文件的装载:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onRefresh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">initStrategies&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initStrategies&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 初始化multipartResolver用于处理文件上传
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initMultipartResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 国际化配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initLocaleResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 主题解析器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initThemeResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// handlerMaping负责接收request请求,根据webapplicationContext的配置返回对应的controller
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initHandlerMappings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// DispatcherServlet通过这个适配器获取所有的handler来处理request
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initHandlerAdapters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 异常处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initHandlerExceptionResolvers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 当controller方法没有返回一个ModelAndView对象或者逻辑试图名称，并且该方法中没有直接网response的 输出流中写数据的时候，spring就会采用约定好的方式提供一个 逻辑 视图名称。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initRequestToViewNameTranslator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 根据controller返回的ModelAndView选择合适 的试图进行渲染
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">initViewResolvers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">initFlashMapManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>至此，DispatcherServlet的初始化算是结束了，接下来看一下如何处理请求 。&lt;/p>
&lt;p>doGet和 doPost都 将处理委托给&lt;code>processRequest&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Process this request, publishing an event regardless of the outcome.
&lt;/span>&lt;span class="cm"> * &amp;lt;p&amp;gt;The actual event handling is performed by the abstract
&lt;/span>&lt;span class="cm"> * {@link #doService} template method.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Throwable&lt;/span> &lt;span class="n">failureCause&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 提取 当前线程的LocaleContext和RequestAttributes属性,放入previous*中便于恢复,并创建对应的 LocaleContext和RequestAttributes 绑定到当前线程
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">LocaleContext&lt;/span> &lt;span class="n">previousLocaleContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LocaleContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLocaleContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">LocaleContext&lt;/span> &lt;span class="n">localeContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buildLocaleContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">RequestAttributes&lt;/span> &lt;span class="n">previousAttributes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestAttributes&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ServletRequestAttributes&lt;/span> &lt;span class="n">requestAttributes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buildRequestAttributes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">previousAttributes&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// The central class for managing asynchronous request processing, mainly intended
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// as an SPI and not typically used directly by application classes.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WebAsyncManager&lt;/span> &lt;span class="n">asyncManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WebAsyncUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAsyncManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">asyncManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerCallableInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FrameworkServlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RequestBindingInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">initContextHolders&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">localeContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">requestAttributes&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">doService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ServletException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">failureCause&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">failureCause&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">failureCause&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NestedServletException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request processing failed&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 恢复线程到原始状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">resetContextHolders&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">previousLocaleContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">previousAttributes&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">requestAttributes&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">requestAttributes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestCompleted&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">failureCause&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Could not complete request&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">failureCause&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">asyncManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isConcurrentHandlingStarted&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Leaving response open for concurrent processing&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Successfully completed request&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 无论成功与否发布事件通知
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">publishRequestHandledEvent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">failureCause&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>继续移交给&lt;code>doService&lt;/code>进行后续处理:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}
&lt;/span>&lt;span class="cm"> * for the actual dispatching.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">resumed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WebAsyncUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAsyncManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">hasConcurrentResult&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34; resumed&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;DispatcherServlet with name &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getServletName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">resumed&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34; processing &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethod&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; request for [&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getRequestUri&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;]&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// Keep a snapshot of the request attributes in case of an include,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// to be able to restore the original attributes after the include.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">attributesSnapshot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">WebUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isIncludeRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">attributesSnapshot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="n">Enumeration&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">attrNames&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAttributeNames&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">attrNames&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasMoreElements&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">attrName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">attrNames&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextElement&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cleanupAfterInclude&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">attrName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">startsWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org.springframework.web.servlet&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">attributesSnapshot&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">attrName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">attrName&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// Make framework objects available to handlers and view objects.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WEB_APPLICATION_CONTEXT_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getWebApplicationContext&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">LOCALE_RESOLVER_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">localeResolver&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">THEME_RESOLVER_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">themeResolver&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">THEME_SOURCE_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getThemeSource&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">FlashMap&lt;/span> &lt;span class="n">inputFlashMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flashMapManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">retrieveAndUpdate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">inputFlashMap&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">INPUT_FLASH_MAP_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unmodifiableMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">inputFlashMap&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">OUTPUT_FLASH_MAP_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FlashMap&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FLASH_MAP_MANAGER_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flashMapManager&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">doDispatch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">WebAsyncUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAsyncManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isConcurrentHandlingStarted&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Restore the original attribute snapshot, in case of an include.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">attributesSnapshot&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">restoreAttributesAfterInclude&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">attributesSnapshot&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>继续 移交给&lt;code>doDispatch&lt;/code>进行后续 处理:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Process the actual dispatching to the handler.
&lt;/span>&lt;span class="cm"> * &amp;lt;p&amp;gt;The handler will be obtained by applying the servlet&amp;#39;s HandlerMappings in order.
&lt;/span>&lt;span class="cm"> * The HandlerAdapter will be obtained by querying the servlet&amp;#39;s installed HandlerAdapters
&lt;/span>&lt;span class="cm"> * to find the first that supports the handler class.
&lt;/span>&lt;span class="cm"> * &amp;lt;p&amp;gt;All HTTP methods are handled by this method. It&amp;#39;s up to HandlerAdapters or handlers
&lt;/span>&lt;span class="cm"> * themselves to decide which methods are acceptable.
&lt;/span>&lt;span class="cm"> * @param request current HTTP request
&lt;/span>&lt;span class="cm"> * @param response current HTTP response
&lt;/span>&lt;span class="cm"> * @throws Exception in case of any kind of processing failure
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doDispatch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">processedRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">HandlerExecutionChain&lt;/span> &lt;span class="n">mappedHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">multipartRequestParsed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">WebAsyncManager&lt;/span> &lt;span class="n">asyncManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WebAsyncUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAsyncManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ModelAndView&lt;/span> &lt;span class="n">mv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Exception&lt;/span> &lt;span class="n">dispatchException&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 首先处理文件的上传请求,转换该请求为MultipartHttpServletRequest类型的请求
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">processedRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">checkMultipart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">multipartRequestParsed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Determine handler for the current request.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 遍历 当前加载 的所有handlerMapping,调用 该 handlerMapping的getHandler方法根据 请求链接获取对应的Method方法,与该链接对应的拦截器intercepter一并放入执行chain中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mappedHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">mappedHandler&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHandler&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 如果找不到对应 的handler,log中打印 No mapping found for HTTP request with URI [/adfaf] in DispatcherServlet with name &amp;#39;DispatcherServlet&amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// SPR-10481添加了可配置参数throwExceptionIfNoHandlerFound,若在web.xml中dispatcherServlet的init-param中配置其为true,这里同时还能抛出一个NoHandlerFoundException异常,若为默认的false,则返回404
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">noHandlerFound&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// Determine handler adapter for the current request.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 遍历所有的handler适配器,根据适配器的support返回值判断是否支持该handler
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">HandlerAdapter&lt;/span> &lt;span class="n">ha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getHandlerAdapter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHandler&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// Process last-modified header, if supported by the handler.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">method&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethod&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">isGet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;GET&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isGet&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s">&amp;#34;HEAD&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">lastModified&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ha&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastModified&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHandler&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Last-Modified value for [&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getRequestUri&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;] is: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lastModified&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ServletWebRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">checkNotModified&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lastModified&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isGet&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applyPreHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// Actually invoke the handler.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ha&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHandler&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">asyncManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isConcurrentHandlingStarted&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">applyDefaultViewName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mv&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applyPostHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mv&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">dispatchException&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">processDispatchResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mv&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dispatchException&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">triggerAfterCompletion&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Error&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">triggerAfterCompletionWithError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">asyncManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isConcurrentHandlingStarted&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Instead of postHandle and afterCompletion
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">mappedHandler&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">mappedHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applyAfterConcurrentHandlingStarted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Clean up any resources used by a multipart request.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">multipartRequestParsed&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">cleanupMultipart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">processedRequest&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>分布式系统设计迷思</title><link>https://run.halfbit.top/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D/</link><pubDate>Thu, 28 Jul 2016 18:45:05 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>先祭出祖师爷：
&lt;img src="https://run.halfbit.top/image/2016-08-07-13-31-01.jpg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>You want proff?I&amp;rsquo;ll give you proff! - Leslie Lamport&lt;/p>
&lt;/blockquote>
&lt;h2 id="单机系统">单机系统&lt;/h2>
&lt;p>小强的这家咖啡店刚开始经营，为了让顾客满意，他想需要记住每个顾客喜欢的咖啡，比如万剑喜欢摩卡，拓爷喜欢星冰乐等等，每次顾客进来，马上就能给顾客想要的咖啡。
简单起见，小强拿了一个本子，上面记录着顾客的喜好信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">顾客 | 喜好
万剑 | 摩卡
拓爷 | 星冰乐
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;hellip;&lt;/p>
&lt;p>只需要单机系统的日子是美好的。&lt;/p>
&lt;h2 id="简单的分布系统">简单的分布系统&lt;/h2>
&lt;p>小强经营有方，咖啡店的生意慢慢好了起来，为了减少顾客的排队时间，小强招了另外两个店员：小白和小黑。
这时候，怎么让小白和小黑也能知道顾客喜欢哪种咖啡呢？&lt;/p>
&lt;p>小白提了个建议：&lt;/p>
&lt;h3 id="复制读取read-replication">复制读取：Read Replication&lt;/h3>
&lt;p>顾客想要添加或者修改喜欢的咖啡需要找小强统一维护，同时小白和小黑持有小强手上版本的副本。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-08-07-18-42-42.jpg" alt="">
很好，这样小白和小黑都能知道顾客喜欢哪种咖啡了，而且可以接收以前3倍的用户读取请求。
但是这样做有什么问题呢？&lt;/p>
&lt;ol>
&lt;li>复杂性：顾客必须找小强才能维护自己喜欢的咖啡，小强得到信息后必须确保小白和小黑得到更新。&lt;/li>
&lt;li>一致性：很难保证小白和小黑手上持有的版本与小强一直保持一致。乐观的看，这需要一定的延时。如果小强给小白发了一条消息，但是因为通信的故障小白没有收到，也会导致小白手上的名单出现不一致。&lt;/li>
&lt;/ol>
&lt;p>小黑也提了一个建议：&lt;/p>
&lt;h3 id="分片sharding">分片：Sharding&lt;/h3>
&lt;p>通过顾客名字首字母分片，每个人负责维护一部分顾客。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-08-07-18-56-17.jpg" alt="">&lt;/p>
&lt;p>也很好，这样解决了小白方法中的问题，每个顾客只要去找对应咖啡师就行了。
但是这样做也存在了一些问题：&lt;/p>
&lt;ol>
&lt;li>复杂性：在顾客和咖啡师之间增加了一层用于将顾客引导到对应的咖啡师。&lt;/li>
&lt;li>模型的限制：每条记录必须对应一个key，如果想要记住一个50岁左右，跛脚，黄头发的美国老人喜欢什么咖啡，这个就没法处理。&lt;/li>
&lt;li>提取方式的限制：必须通过一个key来提取记录，如果想要统计这个月消费最多的用户，就必须找个每个分片统计一遍再汇总，丧失了分片的意义。&lt;/li>
&lt;/ol>
&lt;h4 id="一致性哈希">一致性哈希&lt;/h4>
&lt;p>对传统的分片算法做了优化，在容错性上有了巨大提升。&lt;/p>
&lt;p>&lt;a href="http://blog.codinglabs.org/articles/consistent-hashing.html">&lt;/a>
&lt;img src="https://run.halfbit.top/image/2016-08-07-19-12-52.jpg" alt="">&lt;/p>
&lt;p>很遗憾，小白和小黑的方法都存在一定缺陷，那小强到底能不能实现一种完美的分布式咖啡店呢？&lt;/p>
&lt;h2 id="分布式系统存在的问题">分布式系统存在的问题&lt;/h2>
&lt;p>为了实现一个分布式的咖啡店，我们首先考虑一下分布式的系统会为我们带来那些问题。&lt;/p>
&lt;h3 id="两军问题">两军问题&lt;/h3>
&lt;p>这个问题讨论如果我们没有一个可靠的信道，有没有可能实现一个分布式的系统。
&lt;img src="https://run.halfbit.top/image/2016-08-08-09-54-40.jpg" alt="">
如图1所示，白军驻扎在沟渠里，蓝军则分散在沟渠两边。白军比任何一支蓝军都更为强大，但是蓝军若能同时合力进攻则能够打败白军。他们不能够远程的沟通，只能派遣通信兵穿过沟渠去通知对方蓝军协商进攻时间。是否存在一个能使蓝军必胜的通信协议，这就是两军问题。&lt;/p>
&lt;p>在这个系统中永远需要存在一个回执，这对于两方来说都并不一定能够达成十足的确信。更要命的是，我们还没有考虑，通信兵的信息还有可能被篡改。由此可见，经典情形下两军问题是不可解的，并不存在一个能使蓝军一定胜利的通信协议。&lt;/p>
&lt;p>类比TCP的三次握手协议：
在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。
第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；
第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 完成三次握手，客户端与服务器开始传送数据.&lt;/p>
&lt;p>而事实上，客户端并不会知道服务器是否收到了k+1；并且，由于信道的不可靠性，j或者k都是可能被截获的，这些问题说明了即使是三次握手，也并不能够彻底解决两军问题，只是在现实成本可控的条件下，我们把TCP协议当作了两军问题的现实可解方法。&lt;/p>
&lt;h3 id="拜占庭将军问题">拜占庭将军问题&lt;/h3>
&lt;p>这个问题讨论如果分布式的组建存在可能对其他节点发出破坏性消息的节点，是否能实现一个可用的分布式系统。
拜占庭帝国就是5～15世纪的东罗马帝国，拜占庭即现在土耳其的伊斯坦布尔。我们可以想象，拜占庭军队有许多分支，驻扎在敌人城外，每一分支由各自的将军指挥。将军们只能靠通讯员进行通讯。在观察了敌人以后，忠诚的将军们必须制订一个统一的行动计划。然而，这些将军中有叛徒，他们不希望忠诚的将军们能达成一致，因而影响统一行动计划的制订与传播。问题是：将军们必须有一个算法，使所有忠诚的将军们能够达成一致，而且少数几个叛徒不能使忠诚的将军们做出错误的计划。&lt;/p>
&lt;p>采用口头协议，即信道绝对可信，且消息来源可知，若叛徒数少于1/3，则拜占庭将军问题可解。
只要采用了书面协议，即所有消息都可追本溯源，忠诚的将军就可以达到一致。&lt;/p>
&lt;h2 id="acid-和-cap">ACID 和 CAP&lt;/h2>
&lt;p>事务（transaction）是由一系列对系统中数据进行访问与更新的操作所组成的一个程序执行逻辑单元。&lt;/p>
&lt;h3 id="acid">ACID&lt;/h3>
&lt;p>在写入/更新资料的过程中，为保证事务（transaction）是正确可靠的，所必须具备的四个特性：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。&lt;/p>
&lt;h3 id="cap理论">CAP理论&lt;/h3>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-08-08-09-27-55.jpg" alt="">
C: Consistency 一致性
A: Availability 可用性
P:Partition Tolerance分区容错性&lt;/p>
&lt;p>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。&lt;/p>
&lt;p>小强又在隔壁开了一家分店，小花是这家店的店长，为了让顾客在小花的店里也能得到想要的咖啡，小强和小花通过电话来同步顾客的喜好名单。
一致性在这里指的是：顾客在小强店里取到了他喜欢的咖啡，在小花的店里，他拿到的也会是同样的咖啡；
可用性在这里指的是：只要小强或者小花的店开着，就肯定可以为顾客提供他喜欢的咖啡；
分区容错性在这里已经得到了满足，小强和小花是分布的咖啡店。
那这个分布式的咖啡店能否同时又满足一致性又满足可用性呢？
假设小强的手机突然没电了，导致小强和小花之间无法通信，这时候一个顾客找小强更新他喜欢的咖啡，小强帮他更新了他的喜好，但是因为电话没电了无法通知小花，过了一会这个顾客到了小花的店里，因为通信的故障，小花无从得知这个顾客更新了他的喜好，如果要满足可用性，小花必须根据她现有知道的情况（旧的喜好）给顾客提供咖啡，这就破坏了一致性（小强和小花提供的咖啡不同），如果要满足一致性，因为不知道顾客喜欢什么咖啡，小花必须拒绝给顾客提供咖啡，这就破坏了可用性。
所以，在一个分布式的系统当中，我们无法同时满足CAP。&lt;/p>
&lt;h2 id="分布式事务解决方案">分布式事务解决方案&lt;/h2>
&lt;p>在分布式系统中，每一个机器节点虽然能够明确知道自己在执行事务操作的过程中是否成功，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的ACID特性，就需要引入一个“协调者”的组建来统一调度。这些被调度的分布节点称为“参与者”。&lt;/p>
&lt;h3 id="2pc">2PC&lt;/h3>
&lt;p>2PC：Two-Phase Commit，即两阶段提交。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-08-08-13-44-04.jpg" alt="">&lt;/p>
&lt;p>第一阶段：协调者询问参与者是否可以提交事务。如果参与者事务操作执行成功则回复yes,反之no。
第二阶段：参与者都回复yes,协调者发出提交请求，则参与者收到后开始提交事务并释放相关资源。&lt;/p>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-08-08-13-44-32.jpg" alt="">
事务中断：加入任何一个参与者反馈了no或者协调者在等待响应时出现超时，都会导致事务中断，协调者向参与者发送rollback请求。&lt;/p>
&lt;p>现实生活中也有类似的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">牧师：”你愿意娶这个女人吗?爱她、忠诚于她，无论她贫困、患病或者残疾，直至死亡。Doyou(你愿意吗)?”
新郎：”Ido(我愿意)!”
牧师：”你愿意嫁给这个男人吗?爱他、忠诚于他，无论他贫困、患病或者残疾，直至死亡。Doyou(你愿意吗)?”
新娘：”Ido(我愿意)!”
牧师：现在请你们面向对方，握住对方的双手，作为妻子和丈夫向对方宣告誓言。
新郎：我——某某某，全心全意娶你做我的妻子，无论是顺境或逆境，富裕或贫穷，健康或疾病，快乐或忧愁，我都将毫无保留地爱你，我将努力去理解你，完完全全信任你。我们将成为一个整体，互为彼此的一部分，我们将一起面对人生的一切，去分享我们的梦想，作为平等的忠实伴侣，度过今后的一生。
新娘：我全心全意嫁给你作为你的妻子，无论是顺境或逆境，富裕或贫穷，健康或疾病，快乐或忧愁，我都将毫无保留的爱你，我将努力去理解你，完完全全信任你，我们将成为一个整体，互为彼此的一部分，我们将一起面对人生的一切，去分享我们的梦想，作为平等的忠实伴侣，度过今后的一生。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可能存在的问题：&lt;/p>
&lt;ol>
&lt;li>参与者挂掉，如果在第一阶段发生，协调者直接给其他参与者发送rollback事务，在第二阶段发生，就必须等参与者恢复重新从协调者那边拿到状态做相应的操作（如果这里的事务只是单纯的replication，那我们只需将故障的参与者移除协调者的活跃列表可以正常进行，但是如果分布式事务本身必须要故障的参与者参与，那么整个系统必须阻塞直到参与者恢复）。&lt;/li>
&lt;li>协调者挂掉，第一阶段挂掉，部分参与者prepared，部分参与者初始状态，备用协调者启动收集到参与者的状态后，可以继续发送prepared或者rollback。第二阶段挂掉，备用协调者启动后发现部分参与者是prepared，部分参与者是committed，继续发送commit。&lt;/li>
&lt;li>协调者发送第一个commit的时候和接收的参与者同时挂掉，剩下的参与者全部是prepared状态，备用协调者启动以后不知道挂掉的参与者是什么状态，如果发送rollback可能参与者已经commit，commit可能不可逆，如果发送commit可能参与者已经被rollback，事务保存的数据已经丢失。无论新的协调者选择commit还是abort，最终参与者恢复时有可能是abort或者commit，这样会导致不一致，这也是导致2PC缺陷的根本原因：此时备用协调者无法知道之前的协调者作的决策，所以整个事务就处于阻塞的状态，只能等挂掉的参与者恢复才能继续。&lt;/li>
&lt;/ol>
&lt;h3 id="3pc">3PC&lt;/h3>
&lt;p>Three-Phase Commit，三阶段提交，分为CanCommit、PreCommit、do Commit三个阶段。
三阶段提交是为了解决两阶段提交中出现的协调者和参与者共同挂掉导致的数据不一致的状况。
&lt;img src="https://run.halfbit.top/image/2016-08-08-14-04-28.jpg" alt="">&lt;/p>
&lt;p>3PC最关键要解决的就是协调者和参与者同时挂掉的问题，所以加入了一个precommit状态标识。
为便于理解暂且把3pc的几个状态和2pc的对应成一样的：init,prepared,precommit,commit。
3pc在第一阶段协调者和参与者如果同时挂掉和2pc第一阶段一样，备用协调者看到的是prepared和init的状态或者全部是init或者全部是prepared状态，这个时候可以全部rollback。
协调者如果在precommit的时候和第一个参与者同时挂掉，备用协调者看到的全是prepared的状态，可以选择rollback，挂掉的第一个参与者恢复以后如果是rollback自然ok，如果是precommit，也可以rollback，这是和2pc最大的不同。
如果备用协调者看到了precommit的状态意味着之前的协调者做出的决策是precommit，可以把commit流程继续下去。
3pc的另一个关键是有timeout时间，所以无论是协调者或者参与者只要是活着的都知道怎么走下去。比如在发送precommit的过程中如果部分机器挂掉，部分机器是precommit的状态，部分机器是prepared的状态，协调者接收不到有些机器的响应就会发送rollback，那些precommit的机器就应该超大概率响应rollback，那些prepared的机器会超时rollback，最总达成状态一致。最后一个阶段即使部分机器接受不到commit命令最后也会在timeout以后commit达成一致。&lt;/p>
&lt;p>可能存在的问题：
在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者rebort请求时，会在等待超时之后，会继续进行事务的提交。
所以，由于网络原因，协调者发送的abort响应没有及时被参与者接收到，那么参与者在等待超时之后执行了commit操作。这样就和其他接到abort命令并执行回滚的参与者之间存在数据不一致的情况。&lt;/p>
&lt;h3 id="paxos">Paxos&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">all working protocols for asynchronous consensus we have so far encountered have Paxos at their core.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Why paxos？我们已经有了2PC，3PC，为什么还需要paxos&lt;/li>
&lt;li>paxos可以保证有半数以上机器存活的情况下达到一致，增强了分布式系统的可用性，显然3PC不支持任何一台机器挂掉的情况&lt;/li>
&lt;li>Paxos是为了解决什么问题&lt;/li>
&lt;li>Paxos协议用于确定分布式系统中一个不可变变量的取值，这个取值是不可变，可被读取的。&lt;/li>
&lt;li>Paxos为什么可以应用在分布式存储系统中？&lt;/li>
&lt;li>数据是可变的，以多个副本的形式存储，多个副本的更新序列是相同的，不变的。&lt;/li>
&lt;li>Paxos为什么基于消息传递而不基于共享内存？&lt;/li>
&lt;li>Paxos的原则是容错性一定要很强。如果这块共享内存出现问题，所有的副本都无法工作。&lt;/li>
&lt;/ul>
&lt;p>一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后能得到一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个“一致性算法”以保证每个节点看到的指令一致。&lt;/p>
&lt;p>设计一个系统，来存储名称为var的变量。&lt;/p>
&lt;ul>
&lt;li>系统内部由多个Accepter组成,负责管理和存储var变量。&lt;/li>
&lt;li>系统对外提供api,用来设置var变量的值 ： propose(var,V) =&amp;gt; &amp;lt;ok,f&amp;gt; or &lt;error>&lt;/li>
&lt;li>将var的值设置为V，系统会返回ok和系统中已经确定的取值f，或者返回error。&lt;/li>
&lt;li>外部有多个Proposer机器任意请求系统，调用系统API(propose(var,V) =&amp;gt; &amp;lt;ok,f&amp;gt; or &lt;error>)来设置var变量的值。
如果系统成功的将var设置成了V，那么返回的f应该就是V的值。否则，系统返回的f就是其他的Proposer设置的值。&lt;/li>
&lt;/ul>
&lt;p>要设计以上系统存在以下难点：&lt;/p>
&lt;ol>
&lt;li>管理多个proposer并发执行&lt;/li>
&lt;li>容忍var变量的不可变性&lt;/li>
&lt;li>容忍任意Proposer的故障&lt;/li>
&lt;li>容忍半数以下的acceptor的故障&lt;/li>
&lt;/ol>
&lt;h4 id="设计一单个accepter的情况">设计一：单个Accepter的情况&lt;/h4>
&lt;p>先考虑整个系统由单个acceptor组成。通过互斥锁的方式来管理并发的proposer的请求：&lt;/p>
&lt;p>acceptor会保存变量var的值和一个互斥锁Lock：&lt;/p>
&lt;ul>
&lt;li>接口prepare()：加互斥锁，给予var的互斥访问权，并返回当前var的取值&lt;/li>
&lt;li>接口release()：用于释放互斥访问权&lt;/li>
&lt;li>接口accept(var, v)：如果已经加锁，并且当前var没有值，则将var的值设置成v，并释放锁。&lt;/li>
&lt;/ul>
&lt;p>proposer采用两阶段来实现：
Step1、通过调用prepare接口来获取互斥性访问权和当前var的取值
如果无法获取到互斥性访问权，则返回，并不能进入到下一个阶段，因为其他proposer获取到了互斥性访问权。
Step2、根据当前var的取值f选择执行
1、如果f的取值为null，说明没有被设置过值，则调用接口accept(var ,v)来将var的取值设置成v，并释放掉互斥性访问权。
2、如果f的取值不为null，说明var已经被其他proposer设置过值，则调用release接口释放掉互斥性访问权。&lt;/p>
&lt;p>这种设计存在的问题是：&lt;/p>
&lt;ol>
&lt;li>如果单个acceptor挂掉，整个系统就挂了，&lt;/li>
&lt;li>如果某个proposer在获取到互斥性访问权之后挂掉，acceptor再也无法接受其他proposer的访问请求，陷入死锁。&lt;/li>
&lt;/ol>
&lt;h4 id="设计二单个accepter引入抢占式访问权">设计二：单个Accepter引入抢占式访问权&lt;/h4>
&lt;p>通过引入抢占式访问权来取代互斥访问权。acceptor有权让任意proposer的访问权失效，然后将访问权发放给其他的proposer。&lt;/p>
&lt;p>在方案二中，proposer向acceptor发出的每次请求都要带一个编号（epoch），且编号间要存在全序关系。一旦acceptor接收到proposer的请求中包含一个更大的epoch的时候，马上让旧的epoch失效，不再接受他们提交的取值。然后给新的epoch发放访问权，让他可以设置var变量的值。&lt;/p>
&lt;p>为了保证var变量取值的不变性，不同epoch的proposer之前遵守后者认同前者的原则：&lt;/p>
&lt;ul>
&lt;li>在确保旧的epoch已经失效后，并且旧的epoch没有设置var变量的值，新的epoch会提交自己的值。&lt;/li>
&lt;li>当旧的epoch已经设置过var变量的取值，那么新的epoch应该认同旧的epoch设置过的值，并不再提交新的值。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://run.halfbit.top/image/2016-08-08-14-41-30.jpg" alt="">&lt;/p>
&lt;p>现在解决了死锁的问题和var取值不可变的问题，还需要引入多个Acceptor。&lt;/p>
&lt;h4 id="设计三basic-paxos">设计三：Basic Paxos&lt;/h4>
&lt;p>在设计二的基础上添加多个acceptor，并采用少数服从多数的原则。
第一阶段：&lt;/p>
&lt;ul>
&lt;li>Proposer选择一个全局唯一的提案编号epoch，然后向acceptor的某个超过半数的子集发送编号为epoch的prepare请求。&lt;/li>
&lt;li>acceptor会记录自己已经批准过的最大epoch值，如果一个acceptor收到一个编号为epoch的prepare请求，且epoch编号大于该值，它会将已经批准过的最大epoch值对应的提案作为响应返回，并承诺不在接收比当前epoch值更小的epoch请求。&lt;/li>
&lt;/ul>
&lt;p>第二阶段：&lt;/p>
&lt;ul>
&lt;li>如果Proposer获取到的值都为空，则说明旧的epoch无法形成确定性取值，这时候努力使自己的当前值成为最终的确定性取值：向epoch对应的所有acceptor提交取值，如果得到半数以上 acceptor的成功返回，则返回ok，否则返回error（被新的epoch抢占或者acceptor故障）；&lt;/li>
&lt;li>如果Proposer获取到的值存在，而且这个存在值出现了半数以上，则说明已经出线了确定性取值，直接认同当前的确定性取值 ，返回ok；&lt;/li>
&lt;li>如果Proposer获取到的值存在，但是没有任何一个值存在半数以上，这时认同返回值中最大epoch对应的取值f，并努力帮它称为最终的确定性取值：向epoch对应的所有acceptor提交&amp;lt;epoch,f&amp;gt;。&lt;/li>
&lt;/ul>
&lt;p>具体由以下几种情况：&lt;/p>
&lt;p>已经形成确定性取值的情况：
&lt;img src="https://run.halfbit.top/image/2016-11-15-10-51-48.jpg" alt="">
可以看到图中由Server 1 发起的epoch为3请求经过prepare（P 3.1）和accept（A 3.1 X）已经形成了确定性取值X，Server 5 发起的prepare请求通过Server 3看到了先前形成的取值X并予以认可，通过给Server3，Server4，Server5发送accept（A 4.5 X）成功使得X成为一致性取值。&lt;/p>
&lt;p>还未形成确定性取值，但是后来的prepare请求获取到了已有的值：
&lt;img src="https://run.halfbit.top/image/2016-11-15-10-55-18.jpg" alt="">
可以看到图中由Server 1 发起的epoch为3请求还未形成确定取值，但是Server 5 发起的prepare请求通过Server 3看到了先前形成的取值X，同样予以认可，通过给Server3，Server4，Server5发送accept（A 4.5 X）成功使得X成为一致性取值。&lt;/p>
&lt;p>还未形成确定性取值，后来的prepare请求未能获取到任何已有的值：
&lt;img src="https://run.halfbit.top/image/2016-11-15-10-58-24.jpg" alt="">
可以看到图中由Server 1 发起的epoch为3请求还未形成确定取值，而且Server 5 发起的prepare请求未获得任何已有的值，所以Server 5 提交了自己的取值Y，由于Server 3被更新的epoch值&lt;code>4&lt;/code>抢夺了访问权，所以不会接受Server 1 发来的对应epoch值&lt;code>3&lt;/code>的accept请求，而会接受epoch值&lt;code>4&lt;/code>对应的accept请求，将值设置为4，至此Y就获得了超过半数的server认可，在下一轮中就可以成为全体的一致性取值。&lt;/p>
&lt;p>这样的设计巧妙的利用了&lt;code>超过半数&lt;/code>。
如果一个值已经成为了确定性取值，意味着他已经获得了超过半数的server的认同，同样意味着如果给超过半数的子集发送prepare请求时，肯定可以看到其中之一server是包含了这个确定性取值的。通过这个prepare操作，不仅避免了死锁问题，而且让server有机会看到先前的取值。&lt;/p>
&lt;p>可以说，paxos给我们提供了完美的解决分布式系统的一致性问题的方案。&lt;/p>
&lt;p>参考链接：
&lt;a href="http://www.tudou.com/programs/view/e8zM8dAL6hM/">http://www.tudou.com/programs/view/e8zM8dAL6hM/&lt;/a>
&lt;a href="http://jianbeike.blogspot.com/2016/04/2pc3pc.html">http://jianbeike.blogspot.com/2016/04/2pc3pc.html&lt;/a>&lt;/p></description></item><item><title>谈谈spring中的循环依赖问题</title><link>https://run.halfbit.top/post/spring%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</link><pubDate>Tue, 19 Jul 2016 16:41:40 +0000</pubDate><guid>https://run.halfbit.top/post/spring%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>昨天听到同事谈到，代码架构的同层不应该存在相互调用，因为会出现循环依赖。
这个编码规范我是支持的，但是这个原因我是拒绝的。&lt;/p>
&lt;p>首先看一下下面这两段代码（不完整，仅用于表达意思）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Class AService{
@Autowired
BService bService;
...
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Class BService{
@Autowired
AService aService;
...
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你觉的上面两段代码放到spring中，可以正常运行吗？&lt;/p>
&lt;p>可能乍一看，AService实例化需要BService的实例，但是实例化BService的时候，有需要AService的实例，这不就出现循环依赖，陷入调用的死循环中了吗？&lt;/p>
&lt;p>然而Spring对于循环依赖的出现做了考虑和处理，如果在spring中这样使用的话是不会出现问题的，具体是怎么处理的呢？&lt;/p>
&lt;p>首先写一个简化版的&lt;code>BeanFactory&lt;/code>帮助大家理解：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public Class BeanFactory {
private HashMap&amp;lt;String, BeanDefinition&amp;gt; beanMap;
public Object getBean(String beanName){
BeanDefinition beanDefinition = beanMap.get(beanName);
if(beanDefinition.getObject == null) {
return createBean(beanDefinition);
}
return beanDefinition.getObject;
}
private Object createBean(BeanDefinition beanDefinition) {
Object bean = beanDefinition.getBeanClass().newInstance();
beanDefinition.setBean(bean);
setProperty(bean, beanDefinition);
return bean;
}
private Object registerBeanDefinition() {
this.beanMap = new HashMap();
for(~someting read from xml file or else~) {
BeanDifinition beanDefinitino = new BeanDefinition();
beanDefinition.setBeanName(~some name~);
beanDefinition.setBeanClass(~some class full name~);
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个BeanFactory通过一个map存放了当前容器中维护的所有bean，通过某种registerBeanDefinition往这个map里面写入了当前定义的所有bean（典型的情况是从一个xml文件中读取），并提供一个getBean方法用于从容器中提取所需的Bean。
spring主要通过选择在getBean的时候才进行createBean的操作来规避循环依赖，在registerBeanDefinition的时候只注册了这个bean对应class全类名。
刚开始执行getBean(&amp;ldquo;aService&amp;rdquo;)的时候，会首先通过&lt;code>beanDefinition.getBeanClass().newInstance();&lt;/code>创建AService的一个实例，放入BeanDefinition中，然后通过setProperty方法将注入的BService的实例注入进去，在获取BService的实例时，会调用getBean方法获取AService的BeanDefinition，在调用getObject方法获取AService的实例，这时是可以获取到的，因为AService的实例刚才已经创建过了，所以这里不会出现依赖冲突的状况。&lt;/p>
&lt;p>那什么时候会出现依赖冲突呢？&lt;/p>
&lt;p>就是通过构造函数注入的时候，AService的实例化过程与BService的实例化过程相互依赖，所以从当前的map中也无从获取其中一个Service的实例。&lt;/p>
&lt;p>以上就是今天思考的结果。&lt;/p>
&lt;p>但是需要说明的是，尽管在spring中通过自动注入的方式可以实现循环调用，但是这种代码风格是不被推荐的。&lt;/p></description></item><item><title>买好车搜索的Elasticsearch实践：初体验</title><link>https://run.halfbit.top/post/%E4%B9%B0%E5%A5%BD%E8%BD%A6%E6%90%9C%E7%B4%A2%E7%9A%84elasticsearch%E5%AE%9E%E8%B7%B5%E5%88%9D%E4%BD%93%E9%AA%8C/</link><pubDate>Thu, 23 Jun 2016 23:45:33 +0000</pubDate><guid>https://run.halfbit.top/post/%E4%B9%B0%E5%A5%BD%E8%BD%A6%E6%90%9C%E7%B4%A2%E7%9A%84elasticsearch%E5%AE%9E%E8%B7%B5%E5%88%9D%E4%BD%93%E9%AA%8C/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;h1 id="回顾历史">回顾历史&lt;/h1>
&lt;p>直到今天，卖好车App的搜索依然采用的是阿里云的&lt;code>opensearch&lt;/code>，先来说说使用过程中的痛点。&lt;/p>
&lt;h2 id="阿里云opensearch的痛点">阿里云OpenSearch的痛点&lt;/h2>
&lt;h3 id="收费">收费&lt;/h3>
&lt;p>索引自创建完成就开始计费，就算或者没有新数据需要进入索引，依然在被收费。&lt;/p>
&lt;h3 id="重建索引的速度非常慢">重建索引的速度非常慢&lt;/h3>
&lt;p>1W条记录，每条记录5个20字符以内字段，重建一次索引需要半个小时。&lt;/p>
&lt;h3 id="黑盒不可见不可控">黑盒，不可见，不可控&lt;/h3>
&lt;h4 id="分词的不可控">分词的不可控&lt;/h4>
&lt;p>分词是搜索中最重要的一个环节，在索引创建和搜索关键词的产生中都起了决定性的作用。
但是OpenSearch没有提供接口返回分词的结果，也没有文档解释分词原理，我们输入了一个词，只能期待他能返回我们想要的结果，但是往往并不是。
比如输入&lt;code>北京宝达&lt;/code>，OpenSearch替我们做了一些分词之后出来的结果如下：
&lt;img src="https://run.halfbit.top/image/8df3e6e2de2fb132c165498fb4f87ee8.png?r=27" alt="">
但是我们想要搜的&lt;code>北京宝达&lt;/code>这家公司在20条之后才出现。我们无法控制OpenSearch不对宝达这两个字不要分词。&lt;/p>
&lt;h4 id="不支持同义词无法自定义停用词">不支持同义词，无法自定义停用词&lt;/h4>
&lt;p>同义词顾名思义，我搜索&lt;code>番茄&lt;/code>，应该把&lt;code>西红柿&lt;/code>也返回给我，我搜索&lt;code>拓爷&lt;/code>，应该把&lt;code>黄拓&lt;/code>也返回给我，在车系里面比较典型的例子是&lt;code>霸道&lt;/code>和&lt;code>普拉多&lt;/code>。
![](/image/2016-06-25 18-00-09.jpg)&lt;/p>
&lt;p>但是OpenSearch并不支持同义词的配置。&lt;/p>
&lt;p>停用词是类似语气词【&lt;code>啊&lt;/code>，&lt;code>哦&lt;/code>，&lt;code>啦&lt;/code>】，介词【&lt;code>从&lt;/code>，&lt;code>在&lt;/code>，&lt;code>跟&lt;/code>，】等等无语意需要在分词的过程中过滤的词语，但是很遗憾OpenSearch并没有告诉我们哪些被他过滤了，我们也无法自己添加需要的过滤词语。
&lt;img src="https://run.halfbit.top/image/0bc30cd3cd513ce4b7ba0888641cb6d2.png?r=23" alt="">&lt;/p>
&lt;h4 id="检索方式的不可控">检索方式的不可控&lt;/h4>
&lt;p>OpenSearch对搜索默认进行了分词，但必须全部都匹配才返回搜索结果。如果我想要分词结果中任一条匹配即返回，OpenSearch是无法满足的。&lt;/p>
&lt;p>以上的组合会带来许许多多错误结果，而且这些错误我们只能猜测，根本无法调试。
举一个比较极端的例子，假如我输入了 &lt;code>宝马北京&lt;/code>， OpenSearch替我分词为【&lt;code>宝&lt;/code>，&lt;code>马北&lt;/code>，&lt;code>京&lt;/code>】，而且他的检索规则是这些分词结果都要得到匹配，那么很显然我们得不到我们想要的结果。因为&lt;code>宝马&lt;/code>在品牌字段，&lt;code>北京&lt;/code>在车源字段，马和北在创建索引时是不可能得到组合的。&lt;/p>
&lt;h4 id="返回结果的排序不可控">返回结果的排序不可控&lt;/h4>
&lt;p>作为一个商业搜索，用户对于他出现在搜索中的位置是很在意的，但是OpenSearch只能简单的通过字段的升降序方式排序。之前有一个需求是认证商家要展示在非认证商家之前，好，我们通过&lt;code>is_verify&lt;/code>这个字段降序排了一把，结果1个月前的一个认证商家的可能是已经无效的车源数据，依然排在辛辛苦苦天天更新车源的一个非认证商家的前面，这个会严重打击商家的活跃积极性。后来我们又改了回来，只能根据更新时间排序，认证商家的车源即使发布时间很接近也会被排在后面。
&lt;img src="https://run.halfbit.top/image/c38c6187f7ca7c26b3fbf4b939a0ee20.png?r=27" alt="">
还有一点就是搜索结果的公平性：目前我输入&lt;code>宝马&lt;/code>，结果中出来的前11条都是&lt;code>北京腾达庆红汽车销售服务有限公司&lt;/code>的车源，这样对于其他车商显然是不公平的，换句话说，我们应该对提供同一个商品的不同商家在展示结果上做一定程度的打散。
&lt;img src="https://run.halfbit.top/image/7b78e4bb2921ef91db207d2fa58354e0.png?r=20" alt="">&lt;img src="https://run.halfbit.top/image/7b78e4bb2921ef91db207d2fa58354e0.png?r=20" alt="">&lt;img src="https://run.halfbit.top/image/7b78e4bb2921ef91db207d2fa58354e0.png?r=20" alt="">&lt;img src="https://run.halfbit.top/image/7e861836715dbbab710087159cccccbb.png?r=20" alt="">&lt;/p>
&lt;h2 id="过去做过的努力">过去做过的努力&lt;/h2>
&lt;h3 id="同义词">同义词&lt;/h3>
&lt;p>OpenSearch的分词是不可信任的，所以我们在拿到用户输入的关键字之后，先到我们的同义词表进行检索，将匹配上的关键字转为更精确的搜索条件。比如我的同义词表定义了一项：宝马 =&amp;gt; brandId=11，用户输入宝马之后，处理之后进入OpenSearch的是brandId为11这个条件。&lt;/p>
&lt;p>这个折衷的方案存在很多严重的缺陷：&lt;/p>
&lt;h4 id="语义丢失">语义丢失&lt;/h4>
&lt;p>假如有一家公司名字叫做：&lt;code>杭州红宝马汽车销售有限公司&lt;/code>，他们老板输入了&lt;code>红宝马&lt;/code>三个字，想要看一下他们公司的车，但是很遗憾，经过我们的同义词，&lt;code>红&lt;/code>=&amp;gt;colorId=1，&lt;code>宝马&lt;/code>=&amp;gt;brandId=11，进入了OpenSearch，显然这个老板永远也看不到他想要的结果。
再比如之前出现过的一种情况，用户输入&lt;code>奔驰GL&lt;/code>，他可能想搜中规的&lt;code>奔驰GL车系&lt;/code>，也可能想搜平行进口的&lt;code>奔驰GL400&lt;/code>，&lt;code>奔驰GL500&lt;/code>等等的&lt;code>奔驰GL&lt;/code>开头的车系，由于同义词定义了&lt;code>奔驰GL&lt;/code>指向&lt;code>奔驰GL车系&lt;/code>，导致用户搜不到平行进口的几个车系的车。&lt;/p>
&lt;h4 id="同义词提取问题">同义词提取问题&lt;/h4>
&lt;p>默认是通过空格划分提取同义词，但是如果用户输入的若干关键字未通过空格划分，会导致同义词完全匹配不上。
比如输入&lt;code>霸道红&lt;/code>，可以看到虽然后台配置了&lt;code>霸道&lt;/code>与&lt;code>普拉多&lt;/code>是同义词，但是用户输入时没有通过空格分隔，这里并没有出来&lt;code>普拉多&lt;/code>。
&lt;img src="https://run.halfbit.top/image/f418bc2c0cd5cb45138b6af3e61adfd9.png?r=30" alt="">&lt;/p>
&lt;h4 id="维护同义词成本">维护同义词成本&lt;/h4>
&lt;p>根据车系总量是1600条左右，车系的同义词就需要大于1600条，再加上颜色，区域，车规的同义词，同义词的数量对于人肉处理来说已经很庞大了（目前是2500条左右），出现新的意外情况都需要通过同义词排查，维护同义词。&lt;/p>
&lt;p>![](/image/2016-06-25 17-51-39.jpg)&lt;/p>
&lt;h4 id="检索效率">检索效率&lt;/h4>
&lt;p>用户输入的&lt;strong>一个&lt;/strong>词，我们通过猜测，将这个词转换成了&lt;strong>多个&lt;/strong>词或者&lt;strong>多个&lt;/strong>查询条件，很影响查询的效率。
比如用户输入了&lt;code>宝马5&lt;/code>，我们可能就需要把查询条件转化为：&lt;code>宝马x5&lt;/code> || &lt;code>宝马x5（平行进口）&lt;/code> || &lt;code>宝马5系&lt;/code> || &lt;code>宝马m5&lt;/code> || &lt;code>宝马x5 m&lt;/code> &amp;hellip;.
目前我们是有200多条同一个关键词匹配多条记录的同义词，最多的有十几条：
![](/image/2016-06-25 18-46-31.jpg)&lt;/p>
&lt;p>总的来说，我们想方设法在逻辑层修修补补，而OpenSearch扮演的角色充其量是一个首尾模糊like查询速度比较快的mysql而已。&lt;/p>
&lt;h1 id="elasticsearch">Elasticsearch&lt;/h1>
&lt;p>Elasticsearch是一个基于&lt;code>Lucene&lt;/code>的开源，分布式全文检索引擎。&lt;a href="https://github.com/elastic/elasticsearch">Github&lt;/a>&lt;/p>
&lt;h2 id="基本的概念">基本的概念&lt;/h2>
&lt;h3 id="倒排索引--inverted-indexing">倒排索引 ： inverted indexing&lt;/h3>
&lt;p>Lucene采用倒排索引（inverted indexing）的方式创建索引。
例如，每一篇文章都包含若干tag，通过反向创建索引，如果需要找出包含某个tag的文章，就无需遍历所有文章进行寻找。
![](/image/2016-06-26 00-45-56.jpg)&lt;/p>
&lt;h3 id="相关度计算--tfidf">相关度计算 ： TF/IDF&lt;/h3>
&lt;p>Elasticsearch采用TF/IDF来计算文档与查询内容的的相关度。TF/IDF指的是&lt;code>term frequency–inverse document frequency&lt;/code>，即出现频度-在倒排索引中的频度。可以简单的认为，查询关键字在一个文档中出现的次数越多，而且这个关键字在全部结果中出现的次数越少，这个文档的相关性就越强。
TF很直观就不解释了，IDF这个也不难理解，他表示一个在所有文档中出现次数越少的词，越有助于我们定位用户想要的查询结果。
好比你到一家鱼铺去买鱼，你跟老板说你要一条&lt;code>鱼&lt;/code>，他根本不知道你想要的是什么，因为几乎所有的鱼名字都带有&lt;code>鱼&lt;/code>，即&lt;code>鱼&lt;/code>在所有记录中出现的次数很多。但如果你跟老板说你要一条&lt;code>鲫鱼&lt;/code>，老板马上就会给你捞一条鲫鱼，因为&lt;code>鲫&lt;/code>这个字在记录中只出现了一次，这个词的匹配理应给这个记录带来很高的加分。
再举个例子：
比如搜索&lt;code>宝马 x6&lt;/code>，所有的结果中，&lt;code>x6&lt;/code>出现的概率较小，包含&lt;code>x6&lt;/code>的结果得分会比包含&lt;code>宝马&lt;/code>的得分要高。
查询结果的得分解释中有关的&lt;code>x6&lt;/code>的显示：
&lt;code>6.0730667 = idf(docFreq=673, maxDocs=107613)&lt;/code>
即&lt;code>x6&lt;/code>这个词在全部&lt;code>107613&lt;/code>个文档中出现了&lt;code>673&lt;/code>次，IDF得分是&lt;code>6.0730667&lt;/code>。
而有关&lt;code>宝马&lt;/code>的部分显示：
&lt;code>4.177803 = idf(docFreq=4484, maxDocs=107613)&lt;/code>
即&lt;code>x6&lt;/code>这个词在全部&lt;code>107613&lt;/code>个文档中出现了&lt;code>4484&lt;/code>次，IDF得分是&lt;code>4.177803&lt;/code>。
![](/image/2016-06-26 01-26-57.jpg?r=63)&lt;/p>
&lt;p>Elasticsearch还给我们提供了很多方式来影响某条记录的最终得分从而影响结果的展示顺序，后面我们会具体讲到。&lt;/p>
&lt;h2 id="显著的提升">显著的提升&lt;/h2>
&lt;p>历史中的问题在Elasticsearch中都得到了比较完美的解决。&lt;/p>
&lt;h3 id="索引创建速度">索引创建速度&lt;/h3>
&lt;p>![](/image/2016-06-27 00-13-22.jpg)
![](/image/2016-06-27 00-13-38.jpg)&lt;/p>
&lt;p>如图所示，&lt;strong>20W&lt;/strong>条记录，每条记录包含&lt;strong>55&lt;/strong>个字段，从创建数据库连接到索引建立完成，耗时不到3分钟。&lt;/p>
&lt;h3 id="准实时查询">准实时查询&lt;/h3>
&lt;p>添加到索引的记录可以实时被检索到。
目前采用的方式是通过&lt;code>elasticsearch-jdbc&lt;/code>每隔10s从mysql中拉一次数据（是否采集通过gmt_modify判断），同步到&lt;code>elasticseach&lt;/code>的索引中，所以一条记录从产生到可以响应查询的延时最差情况下是&lt;code>10s + mysql查询耗时 + elasticsearch创建耗时 + 网络传输耗时&lt;/code>，一般不会超过15s。
![](/image/2016-06-26 01-49-12.jpg)
存在的问题：&lt;/p>
&lt;ol>
&lt;li>需要定时轮询&lt;/li>
&lt;li>对时间准确的依赖&lt;/li>
&lt;li>多数据源的配置很麻烦&lt;/li>
&lt;li>实时性不够完美&lt;/li>
&lt;/ol>
&lt;p>更好的方式：
![](/image/2016-06-26 01-53-59.jpg)&lt;/p>
&lt;blockquote>
&lt;p>图片 from 卢栋@杭州码耘网络 Elasticsearch-jdbc介绍及基于binlog增量同步方案&lt;/p>
&lt;/blockquote>
&lt;h3 id="准确可控的分词">准确，可控的分词&lt;/h3>
&lt;p>在Elasticsearch中，这个过程称为&lt;code>Analyze&lt;/code>，我们平时说的&lt;code>分词&lt;/code>其实只涵盖了其中的&lt;code>Tokanizer&lt;/code>部分，这里姑且用&lt;code>Elasticsearch分词&lt;/code>来指代一下整个&lt;code>Analyze&lt;/code>过程。
Elasticsearch分词的整个过程如下：
![](/image/2016-06-26 02-13-50.jpg)&lt;/p>
&lt;p>包含了&lt;strong>多个character filter -&amp;gt; 一个tokenizer -&amp;gt; 多个token filter&lt;/strong>。
其中：
&lt;code>character filter&lt;/code>在文档被进行分词之前对文档进行处理，官方定义了3个character filter，包含html字符的转义，根据正则替换特定字符，根据映射替换字符。
&lt;code>tokenizer&lt;/code>就是我们常说的分词了，用于将文档转为一个个token，这些token会被通过上文中的&lt;code>inverted indexing&lt;/code>的方式创建索引。
&lt;code>token filter&lt;/code>用于分词器产生的token的处理，如添加同义词，过滤停用词，更细粒度划分等等。官方提供了许多非常实用的实现 ：&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenfilters.html">analysis-tokenfilters&lt;/a>。&lt;/p>
&lt;p>在这一步我们做了许多的优化，主要包含了：&lt;/p>
&lt;h4 id="同义词-1">同义词&lt;/h4>
&lt;p>注意这里的同义词的概念与之前很不一样。
原来的同义词是在搜索的时候处理关键字：
![](/image/2016-06-26 02-48-29.jpg)&lt;/p>
&lt;p>现在我们通过定义不同的&lt;code>Elasticsearch分词&lt;/code>过程，只在添加索引记录时处理同义词：
![](/image/2016-06-26 02-57-27.jpg)&lt;/p>
&lt;p>更好的方案：
不仅在创建索引时添加同义词，而且根据用户的查询分析，在用户检索时添加同义词并赋予权重：
![](/image/2016-06-26 03-27-27.jpg?r=81)&lt;/p>
&lt;blockquote>
&lt;p>图片 from 洪斌@有赞 ：有赞搜索引擎实践&lt;/p>
&lt;/blockquote>
&lt;h4 id="词库维护">词库维护&lt;/h4>
&lt;p>在词库里面定义的词条，在分词过程中会被拆分为一个token，这样处理可以避免一些不必要的拆分导致搜索出现意外的结果。
比如我们定义&lt;code>宝马&lt;/code>为一个词条，在查询的过程中，&lt;code>宝马&lt;/code>不会被进一步拆分为&lt;code>宝&lt;/code>和&lt;code>马&lt;/code>，从而搜出来&lt;code>宝奥马汽车销售有限公司&lt;/code>这种结果。
但是过多这样处理也是有风险的，比如我们定义了一条&lt;code>x6 m&lt;/code>的词条，搜索的时候分词成&lt;code>x6 m&lt;/code>，导致搜不出来&lt;code>宝马X6 16款 3.0T M运动&lt;/code>这样的车。反而&lt;code>x6m&lt;/code>能被分成&lt;code>x6&lt;/code>和&lt;code>m&lt;/code>，从而可以搜到这辆车。
目前我们定义的同义词包含常用词约40W条，自定义词条：品牌名，车系名，车系名中去除品牌名的部分（负面效果比较大，打算去掉），省市县3级名称，车规名，内饰、外观颜色名，年款 共约1w条。&lt;/p>
&lt;h4 id="停用词">停用词&lt;/h4>
&lt;p>对分词产生的结果进行过滤，目前主要过滤了空格，&lt;code>色&lt;/code>等。&lt;/p>
&lt;h4 id="指导价寻车">指导价寻车&lt;/h4>
&lt;p>需求是根据指导价的4位数字获取匹配指导价，比如：用户输入&lt;code>2486&lt;/code>，需要匹配到指导价为&lt;code>24.86万&lt;/code>的车，输入&lt;code>1110&lt;/code>，需要匹配到指导价为&lt;code>11.1万&lt;/code>的车。处理的方法是添加了两个根据正则匹配的&lt;code>token filter&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">char_filter :
price_patern :
type: pattern_replace
pattern: (\d{1,4})\.(\d{1,2})万
replacement: $1$2
price_patern2:
type: pattern_replace
pattern: (\d{1,4})\.(\d{1})万
replacement: $1 $2 0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="排序的优化">排序的优化&lt;/h3>
&lt;p>在对查询结果进行排序的时候，已经不再是简单的存在与否的问题，而是查询结果与查询条件之间有多相关的问题。
Elasticsearch中的相关度基于&lt;code>score&lt;/code>来衡量。&lt;/p>
&lt;h4 id="tf-term-frequency">TF ：Term Frequency&lt;/h4>
&lt;p>关键字在某个文档出现的次数越多，得分越高：
![](/image/2016-06-26 14-14-06.jpg)
实际的计算公式为 ： &lt;strong>tf(t in d) = √frequency&lt;/strong>&lt;/p>
&lt;h4 id="idf--inverse-document-frequency">IDF ： Inverse Document Frequency&lt;/h4>
&lt;p>某个关键字在全部文档中出现的次数越多，他的TF得分的权重就越低。
比如在下面3句话中搜索 &lt;code>the elasticsearch&lt;/code>：
![](/image/2016-06-26 14-23-35.jpg)
假如没出现一次计1分，如果不考虑IDF，每句话的TF得分都是一样的 2 分。
通过Inverse Document计算IDF ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Token | Sentence | IDF
the | 1，2，3 | 3
elasticsearch | 1，2 | 2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>计算IDF后，第一句话的得分与第二句话的得分一致：1/2 + 1/3 = 5/6，第三句话的得分是2/3。
实际的计算公式为 ： &lt;strong>idf(t) = 1 + log ( numDocs / (docFreq + 1))&lt;/strong>&lt;/p>
&lt;h4 id="field-length-norm">field-length norm&lt;/h4>
&lt;p>字段长度归约，同一个文档中存在的总token数量越少，匹配到查询token的得分就越高。
实际的计算公式为：&lt;strong>norm(d) = 1 / √numTerms&lt;/strong>&lt;/p>
&lt;h4 id="tfidf">TF/IDF&lt;/h4>
&lt;p>lucene基于TF/IDF的&lt;code>score&lt;/code>计算公式如下 ：&lt;/p>
&lt;blockquote>
&lt;p>score(q,d) = queryNorm(q) · coord(q,d) · ∑ (tf(t in d) · idf(t)² · t.getBoost()· norm(t,d) ) (t in q)
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/practical-scoring-function.html#query-norm">practical-scoring-function&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>当然你还可以指定其他的相关度计算方法：&lt;/p>
&lt;ul>
&lt;li>Okapi BM25&lt;/li>
&lt;li>Divergence from randomness, or DFR similarity&lt;/li>
&lt;li>Information based, or IB similarity&lt;/li>
&lt;li>LM Dirichlet similarity&lt;/li>
&lt;li>LM Jelinek Mercer similarity&lt;/li>
&lt;/ul>
&lt;p>![](/image/2016-06-26 15-06-58.jpg)&lt;/p>
&lt;h4 id="通过给字段设置boost影响score">通过给字段设置boost影响score&lt;/h4>
&lt;p>现有的查询是到多个字段中寻找匹配的。
比如我们搜索&lt;code>北京&lt;/code>，&lt;code>北京&lt;/code>这个关键字同时存在于&lt;code>品牌&lt;/code>，&lt;code>车系&lt;/code>，&lt;code>车型&lt;/code>，&lt;code>厂商&lt;/code>，&lt;code>车源所在地&lt;/code>等字段中，如果我们想让&lt;code>品牌&lt;/code>匹配上&lt;code>北京&lt;/code>的结果出现在靠前的位置，我们可以通过给&lt;code>品牌&lt;/code>这个字段设置一定的查询时提升（boost）。
代码：
![](/image/2016-06-26 15-15-05.jpg)
explain：
![](/image/2016-06-26 15-16-16.jpg)&lt;/p>
&lt;h4 id="function-score-query">function score query&lt;/h4>
&lt;p>除了通过boost影响文本相关度的得分，我们还可以通过自定义函数的形式影响最终的得分，elsticsearch为我们提供了&lt;code>function score query&lt;/code>来自定义我们的函数：&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html">function-score-query&lt;/a>。&lt;/p>
&lt;h5 id="认证商家的提升">认证商家的提升&lt;/h5>
&lt;p>如果一条车源是认证商家发布的，&lt;code>is_verify&lt;/code>字段为1，否则为0。
通过&lt;code>fieldValueFactorFunction&lt;/code>来处理&lt;code>is_verify&lt;/code>字段，将这个字段的值作为函数的输入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">FieldValueFactorFunctionBuilder verifyScore = ScoreFunctionBuilders.fieldValueFactorFunction(&amp;#34;is_verify&amp;#34;);
verifyScore.factor(1.5f);// 字段的值乘上1.5
verifyScore.missing(0)；// 若字段为空返回0
verifyScore.setWeight(getRedisOrDefault(WeightEnum.VERIFY.getKey(), 1));// 设置权重
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="是否手工发布的处理">是否手工发布的处理&lt;/h5>
&lt;p>如果一条车源是手工发布发布的，&lt;code>is_induce&lt;/code>字段为0，否则为1。
通过定义一个线性函数（&lt;code>inear&lt;/code>）来处理&lt;code>is_induce&lt;/code>字段：
函数：
![](/image/2016-06-26 15-35-22.jpg)
代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">LinearDecayFunctionBuilder induceScore = ScoreFunctionBuilders.linearDecayFunction(&amp;#34;is_induce&amp;#34;, 0, 1);
induceScore.setWeight(getRedisOrDefault(WeightEnum.INDUCE.getKey(), 1));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果就是输入0返回1，输入1返回0。
是否电议也是同样的处理方式。&lt;/p>
&lt;h5 id="更新时间的处理">更新时间的处理&lt;/h5>
&lt;p>更新时间的处理就不是单纯的线性关系，而更像一个梯形的函数：
![](/image/2016-06-26 15-45-31.jpg)&lt;/p>
&lt;p>一天内发布的车源得分0.6，一天以外的的车源得分以0.6的速度衰减：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">LinearDecayFunctionBuilder updateDateScore = ScoreFunctionBuilders.linearDecayFunction(&amp;#34;modify&amp;#34;,&amp;#34;1d&amp;#34;);
updateDateScore.setOffset(&amp;#34;2d&amp;#34;);
updateDateScore.setDecay(0.6);
updateDateScore.setWeight(getRedisOrDefault(WeightEnum.DATE.getKey(), 1));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="结果打散">结果打散&lt;/h5>
&lt;p>通过random_score来获取一个随机的分数，这个分数可以基于一个特定的数字（用户的sessionid）产生，确保同一个session获取的随机分是一致的，不会出现翻页后结果错乱的问题。&lt;/p>
&lt;h4 id="组合">组合&lt;/h4>
&lt;p>&lt;code>function score&lt;/code>设置的多个函数的结果可以通过下列形式进行组合（&lt;code>score_mode&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">运算符| 操作
multiply | （默认）得分进行乘积运算
sum | 求和
avg | 平均
first | 取第一个函数结果
max | 取最大
min | 取最小
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>组合的时候可以通过设置&lt;code>weight&lt;/code>权重来控制每个函数对结果的影响。&lt;/p>
&lt;p>&lt;code>function score&lt;/code>的最终结果可以通过下列形式组合到TF/IDF得分上（&lt;code>boost_mode&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">运算符| 操作
multiply | （默认）得分进行乘积运算
replace | 仅使用function score query的得分，忽略TF/IDF得分
sum | 求和
avg | 平均
max | 取最大
min | 取最小
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>目前采用的方式是：&lt;code>score_mode&lt;/code>=sum，&lt;code>boost_mode&lt;/code>=multiply，主要基于以下考虑：&lt;/p>
&lt;ul>
&lt;li>我们自定义function中存在输出为0的函数，比如控制&lt;code>is_verify&lt;/code>的函数，如果函数之间的组合采用乘积的形式会抹去其他函数的作用，所以使用求和方式比较合适。&lt;/li>
&lt;li>相关度的得分没有做归一化处理，分散在0~10之间，所以与function score query的得分进行组合使用乘积比较合理。&lt;/li>
&lt;/ul>
&lt;h4 id="读懂得分">读懂得分&lt;/h4>
&lt;p>以下是输入&lt;code>宝马 中规&lt;/code>出来结果第一条的得分：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> 1.7160147 = function score, product of:
0.8580074 = sum of:
0.8580074 = sum of:
0.36771744 = max of:
0.18385872 = weight(model_name:宝马 in 30025) [PerFieldSimilarity], result of:
0.18385872 = score(doc=30025,freq=1.0), product of:
0.23471184 = queryWeight, product of:
2.0 = boost
4.177803 = idf(docFreq=4484, maxDocs=107613)
0.028090343 = queryNorm
0.78333807 = fieldWeight in 30025, product of:
1.0 = tf(freq=1.0), with freq of:
1.0 = termFreq=1.0
4.177803 = idf(docFreq=4484, maxDocs=107613)
0.1875 = fieldNorm(doc=30025)
0.36771744 = weight(series_name:宝马 in 30025) [PerFieldSimilarity], result of:
0.36771744 = score(doc=30025,freq=1.0), product of:
0.23471184 = queryWeight, product of:
2.0 = boost
4.177803 = idf(docFreq=4484, maxDocs=107613)
0.028090343 = queryNorm
1.5666761 = fieldWeight in 30025, product of:
1.0 = tf(freq=1.0), with freq of:
1.0 = termFreq=1.0
4.177803 = idf(docFreq=4484, maxDocs=107613)
0.375 = fieldNorm(doc=30025)
0.49028993 = max of:
0.49028993 = weight(spec_name:中规 in 30025) [PerFieldSimilarity], result of:
0.49028993 = score(doc=30025,freq=1.0), product of:
0.23471184 = queryWeight, product of:
2.0 = boost
4.177803 = idf(docFreq=4484, maxDocs=107613)
0.028090343 = queryNorm
2.0889015 = fieldWeight in 30025, product of:
1.0 = tf(freq=1.0), with freq of:
1.0 = termFreq=1.0
4.177803 = idf(docFreq=4484, maxDocs=107613)
0.5 = fieldNorm(doc=30025)
0.0 = match on required clause, product of:
0.0 = # clause
0.028090343 = #is_deleted:  #sku_status: , product of:
1.0 = boost
0.028090343 = queryNorm
2.0 = min of:
2.0 = function score, score mode [sum]
0.0 = function score, product of:
1.0 = match filter: *:*
0.0 = product of:
0.0 = field value function: none(doc[&amp;#39;is_verify&amp;#39;].value?:0.0 * factor=1.5)
0.0 = weight
0.0 = function score, product of:
1.0 = match filter: *:*
0.0 = product of:
0.0 = Function for field modify:
0.0 = max(0.0, ((2.16E8 - MIN[Math.max(Math.abs(1.46647956E12(=doc value) - 1.466928806432E12(=origin))) - 1.728E8(=offset), 0)])/2.16E8)
1.0 = weight
1.0 = function score, product of:
1.0 = match filter: *:*
1.0 = product of:
1.0 = Function for field is_dianyi:
1.0 = max(0.0, ((2.0 - MIN[Math.max(Math.abs(0.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)])/2.0)
1.0 = weight
1.0 = function score, product of:
1.0 = match filter: *:*
1.0 = product of:
1.0 = Function for field is_induce:
1.0 = max(0.0, ((2.0 - MIN[Math.max(Math.abs(0.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)])/2.0)
1.0 = weight
3.4028235E38 = maxBoost
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="筛选功能的优化">筛选功能的优化&lt;/h3>
&lt;h4 id="筛选条件的获取">筛选条件的获取&lt;/h4>
&lt;p>目前我们获取筛选条件的方式是通过&lt;code>select distinct()&lt;/code>的方式。
比如搜索&lt;code>宝马&lt;/code>，如果想要获取搜索结果中所有的车规种类，需要进行一次&lt;code>select distinct(spec) from table where keyword='宝马'&lt;/code>查询。
每次查询都需要额外对 &lt;code>车规&lt;/code>， &lt;code>车系&lt;/code>， &lt;code>外观颜色&lt;/code> 字段分别做一次select distinct查询，才能获取所有的筛选条件。
&lt;img src="https://run.halfbit.top/image/3c42bee4bb90aeb97db515565372e391.png?r=33" alt="">&lt;/p>
&lt;p>elasticsearch为我们提供了&lt;code>聚合（aggregation）&lt;/code>功能，可以在返回查询结果的同时，返回指定字段（可多个）的所有聚合结果。
如选择&lt;code>车规&lt;/code>和&lt;code>外观颜色&lt;/code>进行聚合：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">POST /car4/car/_search
{
&amp;#34;query&amp;#34;: {
&amp;#34;match_all&amp;#34;: {
}
},
&amp;#34;size&amp;#34;: 1,
&amp;#34;aggs&amp;#34;: {
&amp;#34;spec&amp;#34;: {
&amp;#34;terms&amp;#34;: {
&amp;#34;field&amp;#34;: &amp;#34;spec_name.raw&amp;#34;,
&amp;#34;size&amp;#34;: 2
}
},
&amp;#34;color&amp;#34; : {
&amp;#34;terms&amp;#34;: {
&amp;#34;field&amp;#34;: &amp;#34;outer_color_name.raw&amp;#34;,
&amp;#34;size&amp;#34;: 2
}}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查询结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;took&amp;#34;: 21,
&amp;#34;timed_out&amp;#34;: false,
&amp;#34;_shards&amp;#34;: {
&amp;#34;total&amp;#34;: 1,
&amp;#34;successful&amp;#34;: 1,
&amp;#34;failed&amp;#34;: 0
},
&amp;#34;hits&amp;#34;: {
&amp;#34;total&amp;#34;: 201211,
&amp;#34;max_score&amp;#34;: 1,
&amp;#34;hits&amp;#34;: [
{
&amp;#34;_index&amp;#34;: &amp;#34;car4&amp;#34;,
&amp;#34;_type&amp;#34;: &amp;#34;car&amp;#34;,
&amp;#34;_id&amp;#34;: &amp;#34;282884&amp;#34;,
&amp;#34;_score&amp;#34;: 1,
&amp;#34;_source&amp;#34;: {
&amp;#34;car_id&amp;#34;: 282884,
&amp;#34;seller_id&amp;#34;: 32,
&amp;#34;series_name&amp;#34;: null,
&amp;#34;model_name&amp;#34;: null,
&amp;#34;custom_model&amp;#34;: &amp;#34;17款 GLS450&amp;#34;,
&amp;#34;inner_color_name&amp;#34;: &amp;#34;黑&amp;#34;,
&amp;#34;outer_color_name&amp;#34;: &amp;#34;黑&amp;#34;,
&amp;#34;send_city&amp;#34;: null,
&amp;#34;seller_price&amp;#34;: 115000000,
&amp;#34;corp_name&amp;#34;: &amp;#34;精英（大连）汽车贸易有限公司&amp;#34;,
&amp;#34;spec_name&amp;#34;: &amp;#34;平行进口&amp;#34;,
&amp;#34;spec&amp;#34;: 7,
&amp;#34;is_induce&amp;#34;: 1,
&amp;#34;is_verify&amp;#34;: 1,
&amp;#34;modify&amp;#34;: &amp;#34;2016-05-30T21:24:56.000+08:00&amp;#34;,
&amp;#34;gmt_create&amp;#34;: &amp;#34;2016-05-12T19:55:46.000+08:00&amp;#34;,
&amp;#34;price_adjust_way&amp;#34;: 1,
&amp;#34;inner_color_id&amp;#34;: -1,
&amp;#34;outer_color_id&amp;#34;: -1,
&amp;#34;car_source&amp;#34;: 0,
&amp;#34;car_type&amp;#34;: 3,
&amp;#34;series_id&amp;#34;: 2002,
&amp;#34;brand_id&amp;#34;: 14,
&amp;#34;model_id&amp;#34;: -1,
&amp;#34;configure&amp;#34;: &amp;#34;17款，大窗，P01，19轮，防盗螺丝，氙灯，灰色顶篷，二排易入，照明脚踏，后娱预留，车道包，停车辅助包&amp;#34;,
&amp;#34;car_area&amp;#34;: null,
&amp;#34;car_status&amp;#34;: &amp;#34;2016/7/30预计到港&amp;#34;,
&amp;#34;reach_date&amp;#34;: null,
&amp;#34;formalities_status&amp;#34;: null,
&amp;#34;sku_status&amp;#34;: 1,
&amp;#34;invoice_price&amp;#34;: null,
&amp;#34;car_unique&amp;#34;: &amp;#34;7615&amp;#34;,
&amp;#34;img_url&amp;#34;: null,
&amp;#34;benchmark&amp;#34;: null,
&amp;#34;fuel&amp;#34;: 1,
&amp;#34;quantity&amp;#34;: 1,
&amp;#34;insurance&amp;#34;: null,
&amp;#34;remark&amp;#34;: null,
&amp;#34;sanbao&amp;#34;: null,
&amp;#34;custom_formality&amp;#34;: null,
&amp;#34;custom_area&amp;#34;: null,
&amp;#34;config_price&amp;#34;: null,
&amp;#34;by_template&amp;#34;: 0,
&amp;#34;price_adjust_val&amp;#34;: &amp;#34;-1&amp;#34;,
&amp;#34;is_dianyi&amp;#34;: 0,
&amp;#34;ext_id&amp;#34;: null,
&amp;#34;creator&amp;#34;: 78,
&amp;#34;guide_price&amp;#34;: null,
&amp;#34;guide_price_na&amp;#34;: null,
&amp;#34;is_deleted&amp;#34;: 1,
&amp;#34;send_city_pre&amp;#34;: null
}
}
]
},
&amp;#34;aggregations&amp;#34;: {
&amp;#34;color&amp;#34;: {
&amp;#34;doc_count_error_upper_bound&amp;#34;: 0,
&amp;#34;sum_other_doc_count&amp;#34;: 97885,
&amp;#34;buckets&amp;#34;: [
{
&amp;#34;key&amp;#34;: &amp;#34;白&amp;#34;,
&amp;#34;doc_count&amp;#34;: 54875
},
{
&amp;#34;key&amp;#34;: &amp;#34;黑&amp;#34;,
&amp;#34;doc_count&amp;#34;: 48376
}
]
},
&amp;#34;spec&amp;#34;: {
&amp;#34;doc_count_error_upper_bound&amp;#34;: 0,
&amp;#34;sum_other_doc_count&amp;#34;: 55099,
&amp;#34;buckets&amp;#34;: [
{
&amp;#34;key&amp;#34;: &amp;#34;中规&amp;#34;,
&amp;#34;doc_count&amp;#34;: 121437
},
{
&amp;#34;key&amp;#34;: &amp;#34;国产&amp;#34;,
&amp;#34;doc_count&amp;#34;: 24675
}
]
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="筛选条件的构建">筛选条件的构建&lt;/h4>
&lt;p>限于目前客户端的显示，查询条件需要通过后台返回&lt;code>id+name&lt;/code>的形式来构建查询条件，但是如果通过聚合来实现筛选，只能返回聚合字段的值。
比如要创建车规的筛选条件，就需要通过车规id（spec_id）或者车规名字（spec_name）来进行聚合。如果通过车规id（spec_id）来聚合，返回的结果就是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">spec_id=1,count=10;
spec_id=2,count=20;
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样的结果，如果通过车规名字（spec_name）来聚合，同样只能返回以spec_name划分的数量。如果我同时需要id和name，就需要自己再进行翻译处理。&lt;/p>
&lt;p>在客户端逻辑不变的前提下，想出了一种解决的方式：每次聚合的同时取一条&lt;code>tophit&lt;/code>，以这条tophit的id或者name来构建筛选条件。
查询条件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">POST /car4/car/_search
{
&amp;#34;query&amp;#34;: {
&amp;#34;match_all&amp;#34;: {
}
},
&amp;#34;size&amp;#34;: 1,
&amp;#34;aggs&amp;#34;: {
&amp;#34;spec&amp;#34;: {
&amp;#34;terms&amp;#34;: {
&amp;#34;field&amp;#34;: &amp;#34;spec_name.raw&amp;#34;,
&amp;#34;size&amp;#34;: 2
},
&amp;#34;aggs&amp;#34;: {
&amp;#34;top_tag_hits&amp;#34;: {
&amp;#34;top_hits&amp;#34;: {
&amp;#34;sort&amp;#34;: [
{
&amp;#34;spec&amp;#34;: {
&amp;#34;order&amp;#34;: &amp;#34;desc&amp;#34;
}
}
],
&amp;#34;_source&amp;#34;: {
&amp;#34;include&amp;#34;: [
&amp;#34;spec&amp;#34;
]
},
&amp;#34;size&amp;#34; : 1
}
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;took&amp;#34;: 19,
&amp;#34;timed_out&amp;#34;: false,
&amp;#34;_shards&amp;#34;: {
&amp;#34;total&amp;#34;: 1,
&amp;#34;successful&amp;#34;: 1,
&amp;#34;failed&amp;#34;: 0
},
&amp;#34;hits&amp;#34;: {
&amp;#34;total&amp;#34;: 201211,
&amp;#34;max_score&amp;#34;: 1,
&amp;#34;hits&amp;#34;: [
{
&amp;#34;_index&amp;#34;: &amp;#34;car4&amp;#34;,
&amp;#34;_type&amp;#34;: &amp;#34;car&amp;#34;,
&amp;#34;_id&amp;#34;: &amp;#34;282884&amp;#34;,
&amp;#34;_score&amp;#34;: 1,
&amp;#34;_source&amp;#34;: {
&amp;#34;car_id&amp;#34;: 282884,
&amp;#34;seller_id&amp;#34;: 32,
&amp;#34;series_name&amp;#34;: null,
&amp;#34;model_name&amp;#34;: null,
&amp;#34;custom_model&amp;#34;: &amp;#34;17款 GLS450&amp;#34;,
&amp;#34;inner_color_name&amp;#34;: &amp;#34;黑&amp;#34;,
&amp;#34;outer_color_name&amp;#34;: &amp;#34;黑&amp;#34;,
&amp;#34;send_city&amp;#34;: null,
&amp;#34;seller_price&amp;#34;: 115000000,
&amp;#34;corp_name&amp;#34;: &amp;#34;精英（大连）汽车贸易有限公司&amp;#34;,
&amp;#34;spec_name&amp;#34;: &amp;#34;平行进口&amp;#34;,
&amp;#34;spec&amp;#34;: 7,
&amp;#34;is_induce&amp;#34;: 1,
&amp;#34;is_verify&amp;#34;: 1,
&amp;#34;modify&amp;#34;: &amp;#34;2016-05-30T21:24:56.000+08:00&amp;#34;,
&amp;#34;gmt_create&amp;#34;: &amp;#34;2016-05-12T19:55:46.000+08:00&amp;#34;,
&amp;#34;price_adjust_way&amp;#34;: 1,
&amp;#34;inner_color_id&amp;#34;: -1,
&amp;#34;outer_color_id&amp;#34;: -1,
&amp;#34;car_source&amp;#34;: 0,
&amp;#34;car_type&amp;#34;: 3,
&amp;#34;series_id&amp;#34;: 2002,
&amp;#34;brand_id&amp;#34;: 14,
&amp;#34;model_id&amp;#34;: -1,
&amp;#34;configure&amp;#34;: &amp;#34;17款，大窗，P01，19轮，防盗螺丝，氙灯，灰色顶篷，二排易入，照明脚踏，后娱预留，车道包，停车辅助包&amp;#34;,
&amp;#34;car_area&amp;#34;: null,
&amp;#34;car_status&amp;#34;: &amp;#34;2016/7/30预计到港&amp;#34;,
&amp;#34;reach_date&amp;#34;: null,
&amp;#34;formalities_status&amp;#34;: null,
&amp;#34;sku_status&amp;#34;: 1,
&amp;#34;invoice_price&amp;#34;: null,
&amp;#34;car_unique&amp;#34;: &amp;#34;7615&amp;#34;,
&amp;#34;img_url&amp;#34;: null,
&amp;#34;benchmark&amp;#34;: null,
&amp;#34;fuel&amp;#34;: 1,
&amp;#34;quantity&amp;#34;: 1,
&amp;#34;insurance&amp;#34;: null,
&amp;#34;remark&amp;#34;: null,
&amp;#34;sanbao&amp;#34;: null,
&amp;#34;custom_formality&amp;#34;: null,
&amp;#34;custom_area&amp;#34;: null,
&amp;#34;config_price&amp;#34;: null,
&amp;#34;by_template&amp;#34;: 0,
&amp;#34;price_adjust_val&amp;#34;: &amp;#34;-1&amp;#34;,
&amp;#34;is_dianyi&amp;#34;: 0,
&amp;#34;ext_id&amp;#34;: null,
&amp;#34;creator&amp;#34;: 78,
&amp;#34;guide_price&amp;#34;: null,
&amp;#34;guide_price_na&amp;#34;: null,
&amp;#34;is_deleted&amp;#34;: 1,
&amp;#34;send_city_pre&amp;#34;: null
}
}
]
},
&amp;#34;aggregations&amp;#34;: {
&amp;#34;spec&amp;#34;: {
&amp;#34;doc_count_error_upper_bound&amp;#34;: 0,
&amp;#34;sum_other_doc_count&amp;#34;: 55099,
&amp;#34;buckets&amp;#34;: [
{
&amp;#34;key&amp;#34;: &amp;#34;中规&amp;#34;,
&amp;#34;doc_count&amp;#34;: 121437,
&amp;#34;top_tag_hits&amp;#34;: {
&amp;#34;hits&amp;#34;: {
&amp;#34;total&amp;#34;: 121437,
&amp;#34;max_score&amp;#34;: null,
&amp;#34;hits&amp;#34;: [
{
&amp;#34;_index&amp;#34;: &amp;#34;car4&amp;#34;,
&amp;#34;_type&amp;#34;: &amp;#34;car&amp;#34;,
&amp;#34;_id&amp;#34;: &amp;#34;284668&amp;#34;,
&amp;#34;_score&amp;#34;: null,
&amp;#34;_source&amp;#34;: {
&amp;#34;spec&amp;#34;: 1
},
&amp;#34;sort&amp;#34;: [
1
]
}
]
}
}
},
{
&amp;#34;key&amp;#34;: &amp;#34;国产&amp;#34;,
&amp;#34;doc_count&amp;#34;: 24675,
&amp;#34;top_tag_hits&amp;#34;: {
&amp;#34;hits&amp;#34;: {
&amp;#34;total&amp;#34;: 24675,
&amp;#34;max_score&amp;#34;: null,
&amp;#34;hits&amp;#34;: [
{
&amp;#34;_index&amp;#34;: &amp;#34;car4&amp;#34;,
&amp;#34;_type&amp;#34;: &amp;#34;car&amp;#34;,
&amp;#34;_id&amp;#34;: &amp;#34;262165&amp;#34;,
&amp;#34;_score&amp;#34;: null,
&amp;#34;_source&amp;#34;: {
&amp;#34;spec&amp;#34;: 0
},
&amp;#34;sort&amp;#34;: [
0
]
}
]
}
}
}
]
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="筛选的实现">筛选的实现&lt;/h4>
&lt;p>在查询时添加fllter：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;#34;filter&amp;#34;: {
&amp;#34;bool&amp;#34;: {
&amp;#34;must&amp;#34;: {
&amp;#34;term&amp;#34;: {
&amp;#34;is_deleted&amp;#34;: &amp;#34;0&amp;#34;
}
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">BoolQueryBuilder innerBool = QueryBuilders.boolQuery();
innerBool.must(QueryBuilders.termQuery(&amp;#34;is_deleted&amp;#34;, 0));
BoolQueryBuilder filteredQueryuery = QueryBuilders.boolQuery();
filteredQueryuery.filter(innerBool);
filteredQueryuery.must(mqb);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="infiniti--the-future">infiniti : the future&lt;/h1>
&lt;h2 id="实时添加索引">实时添加索引&lt;/h2>
&lt;p>cannel，rocketMQ（ONS，kafuka），otter&lt;/p>
&lt;h2 id="定时重建索引">定时重建索引&lt;/h2>
&lt;p>通过alias无缝切换&lt;/p>
&lt;h2 id="同义词和词典的维护">同义词和词典的维护&lt;/h2>
&lt;p>redis，http&lt;/p>
&lt;h2 id="备份和恢复">备份和恢复&lt;/h2>
&lt;p>nas&lt;/p>
&lt;h2 id="数据分析">数据分析&lt;/h2>
&lt;p>hadoop，spark，hive，Hbase&lt;/p></description></item><item><title>《悟空传》有感</title><link>https://run.halfbit.top/post/%E6%82%9F%E7%A9%BA%E4%BC%A0%E6%9C%89%E6%84%9F/</link><pubDate>Mon, 20 Jun 2016 01:04:12 +0000</pubDate><guid>https://run.halfbit.top/post/%E6%82%9F%E7%A9%BA%E4%BC%A0%E6%9C%89%E6%84%9F/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>很久没有被一本书的序言打动了。&lt;/p>
&lt;blockquote>
&lt;p>西游就是一场被精心安排成自杀的谋杀。&lt;/p>
&lt;/blockquote>
&lt;p>书中的每一个人都失败了。无敌的孙悟空杀死了自己。哪咤也选择了自杀。金蝉子堕入了虚空。
最终他们都是败给了神，逃不过自己的宿命。&lt;/p>
&lt;p>正如作者序言中所说的，每个人都在奔向自己的宿命，每个人都无法挣脱。
西游中宿命的终点是成佛，成佛意味着放弃一切。
现实中宿命的终点是死亡。&lt;/p>
&lt;p>但是他们都失败的轰轰烈烈。&lt;/p>
&lt;blockquote>
&lt;p>我要让这天，再遮不住我的眼，要这地，再埋不了我心，要这众生，都明白我的意，要那诸佛，都烟消云散。&lt;/p>
&lt;/blockquote>
&lt;p>孙悟空终会失败，但是整个神界会记住这个名字一万年，为这个名字战栗。&lt;/p>
&lt;p>每个人都有自己的一条西游路，我们都在向西走，无法选择，无法回头。能做的，就是在这条路上尽量走的精彩一些，等到走到尽头的时候，能做到无愧于心。&lt;/p></description></item><item><title>Elasticsearch中文社区20160618杭州线下聚会纪要</title><link>https://run.halfbit.top/post/elasticsearch%E4%B8%AD%E6%96%87%E7%A4%BE%E5%8C%BA20160618%E6%9D%AD%E5%B7%9E%E7%BA%BF%E4%B8%8B%E8%81%9A%E4%BC%9A%E7%BA%AA%E8%A6%81/</link><pubDate>Sat, 18 Jun 2016 22:56:21 +0000</pubDate><guid>https://run.halfbit.top/post/elasticsearch%E4%B8%AD%E6%96%87%E7%A4%BE%E5%8C%BA20160618%E6%9D%AD%E5%B7%9E%E7%BA%BF%E4%B8%8B%E8%81%9A%E4%BC%9A%E7%BA%AA%E8%A6%81/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;h2 id="汪兴elasticsearch结合hbase的应用">汪兴－Elasticsearch结合hbase的应用&lt;/h2>
&lt;p>介绍中使用的存储介质是HBase，我司目前还未达到迁移到NoSQL的数据量级，而且后面的分享中大都采用hadoop（hive，spark）作为mysql数据的全量备份，目前看来参考的价值不大。
不过后面也有一些具有参考意义的，比如提到的可以将若干条件作为一组进行分组条件逻辑查询，还涉及到备份方式的讨论，脑裂问题的解决。&lt;/p>
&lt;h2 id="万斌elasticsearch在gooagoo的实践">万斌－ElasticSearch在gooagoo的实践&lt;/h2>
&lt;p>算是对于搜索的另一个方面的应用：数据统计，将传统BI的工作用elasticsearch来实现。
提到了Sense插件，可以自动补全查询的json。
提到了terms  Aggregation无法精确统计的问题。&lt;/p>
&lt;h2 id="曾勇introduction-to-beats-and-extending">曾勇－Introduction to Beats and extending&lt;/h2>
&lt;p>作为中文鼎鼎大名IK分词器的作者，medcl给我们带来了一个新的产品线Beats系列，是将来能很大程度取代logstash的一个产品，大部分还在开发验证阶段。&lt;/p>
&lt;h2 id="洪斌有赞搜索引擎实践">洪斌－有赞搜索引擎实践&lt;/h2>
&lt;p>是今天干货最多的一个topic了，虽然在量级上不如淘宝，但是设计中需要考虑到的方面基本覆盖到了。
印象很深的地方就是很大程度依赖hadoop来全量备份线上数据和进行索引构建。&lt;/p>
&lt;ol>
&lt;li>通过监控mysql的binlog，产生消息到kafka，消费消息实时将mysql的事务同步到搜索中。![](/image/2016-06-19 00-25-41.jpg)&lt;/li>
&lt;li>商用搜索引擎的AdvancedSearch的概念，将反向代理和通用算法层抽离出来。&lt;/li>
&lt;li>提到了评分体系的静态分和动态分的概念，静态分需要稳定和线性，动态分体现搜索的相关度。&lt;/li>
&lt;li>商品去重的问题，使用spark进行矢量相似度计算，在搜索时有限搜索去重之后的主库，只在出现召回等情况时搜索辅库。![](/image/2016-06-19 00-24-10.jpg)&lt;/li>
&lt;li>店铺去重的问题，通过分bucket的方式，在匹配度高的店铺和匹配度低的店铺中做了折衷。![](/image/2016-06-19 00-22-44.jpg)&lt;/li>
&lt;li>Query分析，通过分析搜索日志和购买日志画出query转化图，进行后续的同义词扩展，核心词提取和智能纠错方面的应用。&lt;/li>
&lt;li>将搜索输入的关键字转化为不同权重的同义词输入es查询。![](/image/2016-06-19 00-21-16.jpg)&lt;/li>
&lt;li>使用rolling技术替代性能很差的分页操作。&lt;/li>
&lt;li>优先采用filtered_query。&lt;/li>
&lt;li>使用用bulk。&lt;/li>
&lt;/ol>
&lt;h2 id="宁海元基于elk的云日志产品实践">宁海元－基于ELK的云日志产品实践&lt;/h2>
&lt;p>主要介绍ELK的日志实现，技术细节不多。&lt;/p>
&lt;h2 id="卢栋elasticsearch-jdbc介绍及基于binlog的增量同步方案">卢栋－elasticsearch-jdbc介绍及基于binlog的增量同步方案&lt;/h2>
&lt;p>算是最贴近我司现有起步阶段的topic，介绍了elasticsearch-jdbc的使用。
提到了elasticsearch-jdbc使用中的一些痛点，如定时轮询的操作会影响mysql的性能，多数据源配置比较麻烦和sql的增量控制的时间条件不准确，从而提出了通过监听binlog来实现实时同步的方案简单有效，很受启发。
![](/image/2016-06-19 00-31-14.jpg)
还提到了通过alias不停机迁移来做定时的全量，也很受启发。&lt;/p></description></item><item><title>elasticsearch上手指南</title><link>https://run.halfbit.top/post/elasticsearch%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 10 Jun 2016 19:09:26 +0000</pubDate><guid>https://run.halfbit.top/post/elasticsearch%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;h2 id="centos上安装elasticsearch">CentOS上安装elasticsearch&lt;/h2>
&lt;p>首先需要JAVA环境，这里不再详述。
在&lt;a href="https://www.elastic.co/downloads/elasticsearch">官网下载页面&lt;/a>找到RMP包的下载路径，通过wget命令下载安装包到本地：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/rpm/elasticsearch/2.3.3/elasticsearch-2.3.3.rpm
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo rpm -ivh elasticsearch-2.3.3.rpm
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认安装到&lt;code>/usr/share/elasticsearch/&lt;/code>，配置文件在&lt;code>/etc/elasticsearch&lt;/code>，init脚本在&lt;code>/etc/init.d/elasticsearch&lt;/code>。
添加为服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo systemctl enable elasticsearch.service
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo /etc/init.d/elasticsearch start
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">curl http://localhost:9200
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="创建一个文稿">创建一个文稿&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">curl -XPUT &amp;#39;localhost:9200/get-together/group/1?pretty&amp;#39; -d &amp;#39;{ &amp;#34;name&amp;#34;: &amp;#34;Elasticsearch Denver&amp;#34;, &amp;#34;organizer&amp;#34;: &amp;#34;Lee&amp;#34; }&amp;#39;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到返回信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;_index&amp;#34; : &amp;#34;get-together&amp;#34;,
&amp;#34;_type&amp;#34; : &amp;#34;group&amp;#34;,
&amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34;,
&amp;#34;_version&amp;#34; : 1,
&amp;#34;_shards&amp;#34; : {
&amp;#34;total&amp;#34; : 2,
&amp;#34;successful&amp;#34; : 1,
&amp;#34;failed&amp;#34; : 0
},
&amp;#34;created&amp;#34; : true
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Elasticsearch自动添加了&lt;code>get-together&lt;/code>索引，并创建了一个到类型&lt;code>group&lt;/code>的映射。
当然你也可以手动创建一个索引：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">curl -XPUT &amp;#39;localhost:9200/new-index&amp;#39;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Elasticsearch自动将&lt;code>name&lt;/code>和&lt;code>organizer&lt;/code>检测为&lt;code>string&lt;/code>类型，如果你又添加了一个文稿，包含除了&lt;code>name&lt;/code>和 &lt;code>organizer&lt;/code>的其他字段，Elasticsearch也会自动检测它的类型并添加到映射。
可以查看这个映射的详细信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">curl &amp;#39;localhost:9200/get-together/_mapping/group?pretty
{
&amp;#34;get-together&amp;#34; : {
&amp;#34;mappings&amp;#34; : {
&amp;#34;group&amp;#34; : {
&amp;#34;properties&amp;#34; : {
&amp;#34;name&amp;#34; : {
&amp;#34;type&amp;#34; : &amp;#34;string&amp;#34;
},
&amp;#34;organizer&amp;#34; : {
&amp;#34;type&amp;#34; : &amp;#34;string&amp;#34;
}
}
}
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="开始搜索">开始搜索&lt;/h2>
&lt;p>添加一些示例文稿：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">git clone git@github.com:suclogger/elasticsearch-in-action.git
sh elasticsearch-in-action/populate.sh
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个脚本会重建我们之前创建的&lt;code>get-together&lt;/code>索引。
一个简单的搜索：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">curl &amp;#34;localhost:9200/get-together/group/_search?q=elasticsearch&amp;amp;fields=name,location&amp;amp;size=1&amp;amp;pretty&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>curl请求的链接中，&lt;code>get-together/group&lt;/code>指定了范围：&lt;code>get-together&lt;/code>索引下的&lt;code>group&lt;/code>类型。
常见的关键词格式是：&lt;code>q=name:elasticsearch&lt;/code>，这里没有指定group下的某个参数，elasticsearch会默认指定为&lt;code>q=_all:elasticsearch&lt;/code>来搜索所有参数字段。
也可以通过&lt;code>,&lt;/code>分隔来同时搜索多个类型，如：&lt;code>curl &amp;quot;localhost:9200/get-together/group,event/_search?q=elasticsearch&amp;amp;fields=name,location&amp;amp;size=1&amp;amp;pretty&amp;quot;&lt;/code>，或者完全忽略类型部分来搜索所有类型：&lt;code>curl &amp;quot;localhost:9200/get-together/_search?q=elasticsearch&amp;amp;fields=name,location&amp;amp;size=1&amp;amp;pretty&amp;quot;&lt;/code>。
类似的，也可以通过&lt;code>,&lt;/code>分隔来同时搜索多个索引，如：&lt;code>curl &amp;quot;localhost:9200/get-together,other-index/_search\ ?q=elasticsearch&amp;amp;pretty&amp;quot;&lt;/code>，当然这个请求会失败，因为我们还没创建&lt;code>other-index&lt;/code>索引。也可以指定&lt;code>_all&lt;/code>来搜索所有索引。
返回的结果中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;took&amp;#34; : 5,
&amp;#34;timed_out&amp;#34; : false,
&amp;#34;_shards&amp;#34; : {
&amp;#34;total&amp;#34; : 2,
&amp;#34;successful&amp;#34; : 2,
&amp;#34;failed&amp;#34; : 0
},
&amp;#34;hits&amp;#34; : {
&amp;#34;total&amp;#34; : 2,
&amp;#34;max_score&amp;#34; : 0.83339834,
&amp;#34;hits&amp;#34; : [ {
&amp;#34;_index&amp;#34; : &amp;#34;get-together&amp;#34;,
&amp;#34;_type&amp;#34; : &amp;#34;group&amp;#34;,
&amp;#34;_id&amp;#34; : &amp;#34;2&amp;#34;,
&amp;#34;_score&amp;#34; : 0.83339834,
&amp;#34;fields&amp;#34; : {
&amp;#34;name&amp;#34; : [ &amp;#34;Elasticsearch Denver&amp;#34; ]
}
} ]
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>took&lt;/code>表示查询耗时5ms，&lt;code>timed_out&lt;/code>为false表示查询未超时（默认下查询永远不会超时，可以在curl链接后附带&lt;code>&amp;amp;timeout=3s&lt;/code>来指定超时时间为3s）&lt;/p></description></item><item><title>记一个线上bug的解决</title><link>https://run.halfbit.top/post/%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%BA%BF%E4%B8%8Abug%E7%9A%84%E8%A7%A3%E5%86%B3/</link><pubDate>Fri, 27 May 2016 22:56:03 +0000</pubDate><guid>https://run.halfbit.top/post/%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%BA%BF%E4%B8%8Abug%E7%9A%84%E8%A7%A3%E5%86%B3/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>我司的爬虫现在运行在一个通过ADSL拨号联网的VPS上，通过重新拨号切换IP来应对目标网站的防爬措施。&lt;/p>
&lt;h2 id="问题现象">问题现象&lt;/h2>
&lt;p>应用通过&lt;a href="https://github.com/alibaba/druid">druid&lt;/a>数据源连接到mysql保存数据，每次切换IP后，会通过下面这条简单sql尝试获取数据源连接：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">SELECT &amp;#39;1&amp;#39; FROM DUAL;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是通过查看日志这条sql每次都要等待长达17分钟才能执行完成：
&lt;img src="https://run.halfbit.top/image/3c91ebb0cbc84db0befa2f276df8fa19.jpg?r=59" alt="">&lt;/p>
&lt;h2 id="问题分析">问题分析&lt;/h2>
&lt;p>数据库的连接是长连接，IP切换之后原先的TCP长连接也都被断开，需要重新获取数据库连接，但是VPS到数据的连接延时稳定在20ms以内，ADSL拨号重建连接的耗时也在2s以内，重建TCP链路不应该耗时17分钟之久：
![](/image/2016-05-27 23-28-05.jpg)&lt;/p>
&lt;h3 id="bleedflyhttpstwittercombleedfly猜测mysql服务器可能受到dns污染">&lt;a href="https://twitter.com/bleedfly">@bleedfly&lt;/a>猜测mysql服务器可能受到DNS污染。&lt;/h3>
&lt;p>手动重新拨号之后ping接mysql域名，发现解析正确。
通过&lt;code>yum install mysql&lt;/code>命令在VPS（CentOS）主机上安装mysql客户端后也可以在拨号之后迅速正常连接到mysql，遂排除这一可能。&lt;/p>
&lt;h3 id="尝试根据内存dump文件发现问题">尝试根据内存dump文件发现问题&lt;/h3>
&lt;p>通过以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> sudo jmap -dump:live,format=b,file=/root/log.bin `pgrep java`
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>获取内存dump文件，放入&lt;a href="http://www.eclipse.org/mat/downloads.php">MAT&lt;/a>中分析：&lt;/p>
&lt;p>![](/image/2016-05-28 00-00-55.jpg)&lt;/p>
&lt;p>可以看到停顿时内存的使用量很小，不存在内存泄露的可能。
列出的&lt;code>suspect problem&lt;/code>中也看只反映了当时内存中主要存活的对象是&lt;code>org.apache.ibatis.session.Configuration&lt;/code>。&lt;/p>
&lt;h3 id="分析堆栈日志">分析堆栈日志&lt;/h3>
&lt;p>通过以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> jstack `pgrep java` &amp;gt; jstack.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>获取方法调用堆栈进行分析。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">2016-05-27 20:14:56
Full thread dump OpenJDK 64-Bit Server VM (24.95-b01 mixed mode):
&amp;#34;Attach Listener&amp;#34; daemon prio=10 tid=0x00007f1b14001000 nid=0x28a2 waiting on condition [0x0000000000000000]
java.lang.Thread.State: RUNNABLE
&amp;#34;pool-3-thread-1&amp;#34; prio=10 tid=0x00007f1af80c0800 nid=0x274b runnable [0x00007f1b02286000]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:152)
at java.net.SocketInputStream.read(SocketInputStream.java:122)
at com.mysql.jdbc.util.ReadAheadInputStream.fill(ReadAheadInputStream.java:114)
at com.mysql.jdbc.util.ReadAheadInputStream.readFromUnderlyingStreamIfNecessary(ReadAheadInputStream.java:161)
at com.mysql.jdbc.util.ReadAheadInputStream.read(ReadAheadInputStream.java:189)
- locked &amp;lt;0x0000000785ce9b80&amp;gt; (a com.mysql.jdbc.util.ReadAheadInputStream)
at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2536)
at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:2989)
at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:2978)
at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3526)
at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1989)
at com.mysql.jdbc.ConnectionImpl.pingInternal(ConnectionImpl.java:4051)
at com.mysql.jdbc.ConnectionImpl.ping(ConnectionImpl.java:4028)
at sun.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at com.alibaba.druid.pool.vendor.MySqlValidConnectionChecker.isValidConnection(MySqlValidConnectionChecker.java:79)
at com.alibaba.druid.pool.DruidAbstractDataSource.testConnectionInternal(DruidAbstractDataSource.java:1166)
at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:668)
at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:628)
at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:618)
at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:79)
at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:111)
at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:77)
at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:83)
at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:69)
at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:271)
at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:69)
at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:56)
at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:259)
at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:132)
at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:105)
at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:104)
at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:98)
at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:62)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:358)
at com.sun.proxy.$Proxy13.selectOne(Unknown Source)
at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:163)
at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:43)
at com.sun.proxy.$Proxy27.initCookie(Unknown Source)
at com.renault.cookie.manager.impl.CookieManagerImpl.getCookie(CookieManagerImpl.java:127)
at com.renault.core.webmagic.cookie.WcXcCookieProvider.getCookie(WcXcCookieProvider.java:40)
at us.codecraft.webmagic.downloader.HttpClientGenerator.generateCookie(HttpClientGenerator.java:92)
at us.codecraft.webmagic.downloader.HttpClientGenerator.generateClient(HttpClientGenerator.java:73)
at us.codecraft.webmagic.downloader.HttpClientGenerator.getClient(HttpClientGenerator.java:45)
at us.codecraft.webmagic.downloader.HttpClientDownloader.getHttpClient(HttpClientDownloader.java:69)
at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:97)
at us.codecraft.webmagic.Spider.processRequest(Spider.java:409)
at us.codecraft.webmagic.Spider$1.run(Spider.java:322)
at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:745)
&amp;#34;DestroyJavaVM&amp;#34; prio=10 tid=0x00007f1b4c00c000 nid=0x2723 waiting on condition [0x0000000000000000]
java.lang.Thread.State: RUNNABLE
&amp;#34;pool-2-thread-1&amp;#34; prio=10 tid=0x00007f1b4c1d2800 nid=0x2743 waiting on condition [0x00007f1b03518000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for &amp;lt;0x00000007831c9fd8&amp;gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at us.codecraft.webmagic.thread.CountableThreadPool.execute(CountableThreadPool.java:61)
at us.codecraft.webmagic.Spider.run(Spider.java:318)
at com.renault.core.webmagic.craw.WcXcCrawler.crawl(WcXcCrawler.java:66)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:65)
at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:81)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask.run(FutureTask.java:262)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:745)
&amp;#34;commons-pool-EvictionTimer&amp;#34; daemon prio=10 tid=0x00007f1b4cb7d000 nid=0x2742 in Object.wait() [0x00007f1b034d8000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on &amp;lt;0x0000000782824838&amp;gt; (a java.util.TaskQueue)
at java.util.TimerThread.mainLoop(Timer.java:552)
- locked &amp;lt;0x0000000782824838&amp;gt; (a java.util.TaskQueue)
at java.util.TimerThread.run(Timer.java:505)
&amp;#34;Druid-ConnectionPool-Destory&amp;#34; daemon prio=10 tid=0x00007f1b4ca8f000 nid=0x273f waiting on condition [0x00007f1b1804e000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:1292)
&amp;#34;Druid-ConnectionPool-Create&amp;#34; daemon prio=10 tid=0x00007f1b4ca88800 nid=0x273e waiting on condition [0x00007f1b1808f000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for &amp;lt;0x0000000785a217a8&amp;gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1195)
&amp;#34;Service Thread&amp;#34; daemon prio=10 tid=0x00007f1b4c1b1800 nid=0x2730 runnable [0x0000000000000000]
java.lang.Thread.State: RUNNABLE
&amp;#34;C2 CompilerThread1&amp;#34; daemon prio=10 tid=0x00007f1b4c1ae800 nid=0x272f waiting on condition [0x0000000000000000]
java.lang.Thread.State: RUNNABLE
&amp;#34;C2 CompilerThread0&amp;#34; daemon prio=10 tid=0x00007f1b4c1ac800 nid=0x272e waiting on condition [0x0000000000000000]
java.lang.Thread.State: RUNNABLE
&amp;#34;Signal Dispatcher&amp;#34; daemon prio=10 tid=0x00007f1b4c1aa000 nid=0x272d runnable [0x0000000000000000]
java.lang.Thread.State: RUNNABLE
&amp;#34;Surrogate Locker Thread (Concurrent GC)&amp;#34; daemon prio=10 tid=0x00007f1b4c1a8000 nid=0x272c waiting on condition [0x0000000000000000]
java.lang.Thread.State: RUNNABLE
&amp;#34;Finalizer&amp;#34; daemon prio=10 tid=0x00007f1b4c17b800 nid=0x272b in Object.wait() [0x00007f1b4854b000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on &amp;lt;0x0000000785a217c0&amp;gt; (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)
- locked &amp;lt;0x0000000785a217c0&amp;gt; (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)
at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)
&amp;#34;Reference Handler&amp;#34; daemon prio=10 tid=0x00007f1b4c179800 nid=0x272a in Object.wait() [0x00007f1b50078000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on &amp;lt;0x0000000785a217f0&amp;gt; (a java.lang.ref.Reference$Lock)
at java.lang.Object.wait(Object.java:503)
at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)
- locked &amp;lt;0x0000000785a217f0&amp;gt; (a java.lang.ref.Reference$Lock)
&amp;#34;VM Thread&amp;#34; prio=10 tid=0x00007f1b4c175000 nid=0x2729 runnable
&amp;#34;Gang worker#0 (Parallel GC Threads)&amp;#34; prio=10 tid=0x00007f1b4c01d800 nid=0x2724 runnable
&amp;#34;Gang worker#1 (Parallel GC Threads)&amp;#34; prio=10 tid=0x00007f1b4c01f800 nid=0x2725 runnable
&amp;#34;Gang worker#2 (Parallel GC Threads)&amp;#34; prio=10 tid=0x00007f1b4c021000 nid=0x2726 runnable
&amp;#34;Gang worker#3 (Parallel GC Threads)&amp;#34; prio=10 tid=0x00007f1b4c023000 nid=0x2727 runnable
&amp;#34;Concurrent Mark-Sweep GC Thread&amp;#34; prio=10 tid=0x00007f1b4c0a3800 nid=0x2728 runnable
&amp;#34;VM Periodic Task Thread&amp;#34; prio=10 tid=0x00007f1b4c1bc800 nid=0x2731 waiting on condition
JNI global references: 150
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>排除了标明为&lt;code>RUNNABLE&lt;/code>的线程之后，首先寻找是否有处于&lt;code>Deadlock&lt;/code>状态的线程。
没有发现Deadlock，如果有可能等待时间就不止17分钟了。&lt;/p>
&lt;p>接下来罗列处于&lt;code>WAITING&lt;/code>状态的线程：&lt;/p>
&lt;ol>
&lt;li>&amp;ldquo;pool-2-thread-1&amp;rdquo; prio=10 tid=0x00007f1b4c1d2800 nid=0x2743 waiting on condition [0x00007f1b03518000] java.lang.Thread.State: WAITING (parking)&lt;/li>
&lt;li>&amp;ldquo;commons-pool-EvictionTimer&amp;rdquo; daemon prio=10 tid=0x00007f1b4cb7d000 nid=0x2742 in Object.wait() [0x00007f1b034d8000] java.lang.Thread.State: TIMED_WAITING (on object monitor)&lt;/li>
&lt;li>&amp;ldquo;Druid-ConnectionPool-Destory&amp;rdquo; daemon prio=10 tid=0x00007f1b4ca8f000 nid=0x273f waiting on condition [0x00007f1b1804e000] java.lang.Thread.State: TIMED_WAITING (sleeping)&lt;/li>
&lt;li>&amp;ldquo;Druid-ConnectionPool-Create&amp;rdquo; daemon prio=10 tid=0x00007f1b4ca88800 nid=0x273e waiting on condition [0x00007f1b1808f000] java.lang.Thread.State: WAITING (parking)&lt;/li>
&lt;li>&amp;ldquo;Finalizer&amp;rdquo; daemon prio=10 tid=0x00007f1b4c17b800 nid=0x272b in Object.wait() [0x00007f1b4854b000] java.lang.Thread.State: WAITING (on object monitor)&lt;/li>
&lt;li>&amp;ldquo;Reference Handler&amp;rdquo; daemon prio=10 tid=0x00007f1b4c179800 nid=0x272a in Object.wait() [0x00007f1b50078000] java.lang.Thread.State: WAITING (on object monitor)&lt;/li>
&lt;/ol>
&lt;p>其中，第2个：&amp;ldquo;commons-pool-EvictionTimer&amp;rdquo; 用于空闲对象的驱逐，第5个：&amp;ldquo;Finalizer&amp;quot;线程用于在垃圾收集前，调用对象的finalize()方法，第6个：&amp;ldquo;Reference Handler&amp;quot;用于处理引用对象本身（软引用、弱引用、虚引用）的垃圾回收问题 ，这3个线程都从属于JVM，暂时忽略。&lt;/p>
&lt;p>粗略看来剩下的3个线程中，第1个和第4个都处于&lt;code>WAITING (parking)&lt;/code>的状态，即依赖于&lt;code>特定condition&lt;/code>的发生，而第3个处于&lt;code>TIMED_WAITING (sleeping)&lt;/code>，很可能是方法调用了Thread.wait()或者Thread.sleep()。&lt;/p>
&lt;p>查看pom文件，找到版本号&lt;code>0.2.9&lt;/code>，在druid目录通过check out到对应版本号的tag定位源代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> public class DestroyConnectionThread extends Thread {
public DestroyConnectionThread(String name){
super(name);
this.setDaemon(true);
}
public void run() {
initedLatch.countDown();
for (;;) {
// 从前面开始删除
try {
if (closed) {
break;
}
if (timeBetweenEvictionRunsMillis &amp;gt; 0) {
Thread.sleep(timeBetweenEvictionRunsMillis);
} else {
Thread.sleep(1000); // 这里是1292行
}
if (Thread.interrupted()) {
break;
}
shrink(true);
if (isRemoveAbandoned()) {
removeAbandoned();
}
} catch (InterruptedException e) {
break;
}
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的代码逻辑是这个独立的线程是用于回收关闭的链接，由于run方法一开始已经调用了&lt;code>initedLatch.countDown();&lt;/code>，应该不会影响主线程，所以第3个线程也不是罪魁祸首。&lt;/p>
&lt;p>找来找去，怀疑的目光又落在了&lt;code>pool-3-thread-1&lt;/code>这个最早看来人畜无害的&lt;code>Runable&lt;/code>线程。
猛烈google之后，发现了相关的讨论：&lt;a href="https://bugs.mysql.com/bug.php?id=9515">Long response waiting using Connector&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>always close the connection and use Socket.setSoTimeout(int) on every connection, I solve my problem. the hanging does never appear again.&lt;/p>
&lt;/blockquote>
&lt;p>又返回去看druid的源码，发现方法调用堆栈中&lt;code>isValidConnection&lt;/code>是支持设置超时时间的，需要在&lt;code>DruidDataSource&lt;/code>实例化时作为参数传入。&lt;/p>
&lt;h2 id="尝试">尝试&lt;/h2>
&lt;p>修改xml配置，给&lt;code>datasource&lt;/code>的bean中加上下列配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;property name=&amp;#34;validationQueryTimeout&amp;#34; value=&amp;#34;1000&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是实际发现没有起作用，底层的socket连接依然在等待。又发现druid最新版本（1.0.20）中已经给&lt;code>validationQueryTimeout&lt;/code>设置了默认值&lt;code>1000ms&lt;/code>，尝试更新druid，最新版依然存在问题。&lt;/p>
&lt;h2 id="解决">解决&lt;/h2>
&lt;p>又认真想了一遍。
druid通过&lt;code>MySqlValidConnectionChecker&lt;/code>调用&lt;code>com.mysql.jdbc.ConnectionImpl.pingInternal(boolean checkForClosedConnection, int timeoutMillis)&lt;/code>方法，并将validationQueryTimeout作为它的超时值。&lt;/p>
&lt;p>druid作为一个datasource pool，不管是选择在收回connection到pool的时候检验connection，还是从poll拿connection的时候检验connection，选择信任&lt;code>pingInternal()&lt;/code>方法是无可厚非的。&lt;/p>
&lt;p>那锅是要由JDBC的驱动里面的&lt;code>pingInternal()&lt;/code>方法来背吗？也不尽然：&lt;a href="https://bugs.mysql.com/bug.php?id=31353">mysq上的讨论&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Socket timeouts&lt;/em>:
UNCLOSED socket connection; JVM specs tell us GC does NOT release these resources thus they exhaust JVM resources related to socket operation, leading to SocketInputStream hanging your program. Always close the connection and use Socket.setSoTimeout(int) on every connection.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Now this is in relation with &lt;em>pooled connections&lt;/em> and DBCP (or &amp;ldquo;why does 1.2.1 work&amp;rdquo;, from Bug#30990):
If you&amp;rsquo;re using a connection pool that &lt;em>doesn&amp;rsquo;t&lt;/em> use the ConnectionPoolDataSource API to create connections that have lifecycle callbacks, then it is the &lt;em>pool&amp;rsquo;s&lt;/em> responsibility to cleanup &amp;ldquo;logical&amp;rdquo; pooled connections when they&amp;rsquo;re returned to the pool. Otherwise there is no way for a JDBC driver to tell that a connection is being pooled &amp;ldquo;above&amp;rdquo; it, and thus no event/method call where one can hook in to determine that you&amp;rsquo;ve been &amp;ldquo;logically&amp;rdquo; closed and returned to the pool.
More recent version of DBCP automatically call rollback() on connections that are returned to the pool.&lt;/p>
&lt;/blockquote>
&lt;p>所以，如果我们还想继续使用druid，还是老老实实在重新切换IP断网之前，调用一下&lt;code>DruidDataDource.close()&lt;/code>方法显式地关闭connection好了。&lt;/p>
&lt;p>其实刚开始我们就通过将数据源切换到&lt;code>DriverManagerDataSource&lt;/code>已经歪打正着解决了问题，但是&lt;code>DriverManagerDataSource&lt;/code>不是一个连接池，每次都要重新创建connection，所以既然定位了问题，还是用druid更为优雅一些。&lt;/p>
&lt;p>解决后可以实现切换动作在1s内完成。
![](/image/2016-05-30 14-17-50.jpg)&lt;/p></description></item><item><title>到底需不需要Manager层？</title><link>https://run.halfbit.top/post/%E5%88%B0%E5%BA%95%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81manager%E5%B1%82/</link><pubDate>Wed, 18 May 2016 00:09:55 +0000</pubDate><guid>https://run.halfbit.top/post/%E5%88%B0%E5%BA%95%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81manager%E5%B1%82/</guid><description>&lt;!-- abstract -->
&lt;p>今天跟同事们一起主要就是否需要按照严格的分层架构来规范当前代码讨论了应用的几个架构问题。&lt;/p>
&lt;!-- 开始正文 -->
&lt;p>之前第一家公司采用的是经典的SpringMVC架构，主要划分为Controller，Service，DAO三层。Controller层控制页面逻辑，数据库操作通过自己编写hql在DAO层实现，事务控制在Service层。这样的架构容易理解和上手，但是无法对DAO层的代码逻辑进行控制，很容易出现以下问题：&lt;/p>
&lt;ol>
&lt;li>自定义的hql逻辑比较随意，容易出现多表关联查询导致数据库的执行效率很低。&lt;/li>
&lt;li>容易出现Service层方法的相互调用导致事务嵌套，容易出现很多比较难以排查的bug。&lt;/li>
&lt;li>Service层和DAO层的代码都很容易变动，导致编写单元测试的成本比较高，而且DAO层一旦出现bug对应用整体的影响很大，曾经有一次线上应用一直崩溃，查找了2天才发现是因为调用了一个很古老的有问题的DAO层方法。&lt;/li>
&lt;/ol>
&lt;p>现在我司采用的架构沿袭自阿里，主要分为Controller，AO（Service），Manager，Mapper（DAO）四层，与经典的MVC3层架构相比多了一层Manager层。今天主要讨论了这一层的存在是否有必要。&lt;/p>
&lt;p>&lt;a href="https://twitter.com/bleedfly">@bleedfly&lt;/a>的观点是，DAO层只负责CRUD的逻辑，Manager层用于处理多表关联，所有业务逻辑止步AO层。&lt;/p>
&lt;p>理论听起来是很有道理，但是如果没有严格的规范控制，就很难确保严格执行。
很常见的一种情况是，如果整个Service层只需要一个方法，该方法的逻辑只是从根据一个主键值从一张表中取一条记录，如果严格按照规范，就需要写一个Manager层方法和一个Mapper（DAO）层方法，而且这两层的方法逻辑是一样的，直接将Mapper注入Service可以达到同样的效果。如果不假思索的话，很容易打破上述代码规范。&lt;/p>
&lt;p>严格满足规范有什么好处呢？&lt;/p>
&lt;ol>
&lt;li>Mapper（DAO）层代码很固定，不容易出现文章开头出现的DAO层的严重事故。&lt;/li>
&lt;li>事务控制在Manager层，Manager层方法不允许相互调用，不会出现事务嵌套的问题。&lt;/li>
&lt;li>为了避免在数据库执行join操作，Manager层负责采用循环控制分别查询，可以有效缓解数据库压力。（PS.当前线上业务挂掉，最先挂的肯定都是数据库，尽管通过读写方式的形式简单隔离了一下数据库，但是数据库的瓶颈在代码依然中是着重考虑的方面）&lt;/li>
&lt;/ol>
&lt;p>实际工作中经常出现效率和规范冲突的情况，但是满足规范才是保证代码质量和规避风险的最佳实践。所以下班之前把今天有争议的代码都重构了，感觉神清气爽。&lt;/p></description></item><item><title>从webmagic着手浅析JAVA爬虫</title><link>https://run.halfbit.top/post/%E4%BB%8Ewebmagic%E7%9D%80%E6%89%8B%E6%B5%85%E6%9E%90java%E7%88%AC%E8%99%AB/</link><pubDate>Tue, 17 May 2016 11:41:07 +0000</pubDate><guid>https://run.halfbit.top/post/%E4%BB%8Ewebmagic%E7%9D%80%E6%89%8B%E6%B5%85%E6%9E%90java%E7%88%AC%E8%99%AB/</guid><description>&lt;!-- abstract -->
&lt;p>用于我司内部分享会，主要结合做过的项目简单介绍一下常用的爬虫模式。&lt;/p>
&lt;!-- 开始正文 -->
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>什么是爬虫？&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E8%9C%98%E8%9B%9B">网络蜘蛛&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>关于爬虫是否合法的讨论？&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.v2ex.com/t/268607">用爬虫抓取数据，这样的行为是否合法&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>比较知名的开源的爬虫主要包括：
JAVA : &lt;a href="https://github.com/code4craft/webmagic" title="Webmagic">Webmagic&lt;/a>，&lt;a href="https://github.com/CrawlScript/WebCollector" title="WebCollector">WebCollector&lt;/a>，&lt;a href="https://github.com/yasserg/crawler4j" title="Crawler4j">Crawler4j&lt;/a>
PYTHON : &lt;a href="https://github.com/scrapy/scrapy" title="Scrapy"> Scrapy&lt;/a>&lt;/p>
&lt;h2 id="简单的爬虫">简单的爬虫&lt;/h2>
&lt;p>&lt;code>简单的网络爬虫&lt;/code>可以只是遍历一个存放URL的集合并通过&lt;code>HttpClient&lt;/code>发送网络请求：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">CloseableHttpClient httpclient = HttpClients.createDefault();
try {
HttpGet httpget = new HttpGet(&amp;#34;http://httpbin.org/&amp;#34;);
ResponseHandler&amp;lt;String&amp;gt; responseHandler = new ResponseHandler&amp;lt;String&amp;gt;() {
@Override
public String handleResponse( HttpResponse response) throws IOException {
int status = response.getStatusLine().getStatusCode();
if (status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300) {
HttpEntity entity = response.getEntity();
return entity != null ? EntityUtils.toString(entity) : null;
}
return null;
}
};
String responseBody = httpclient.execute(httpget, responseHandler);
} catch (IOException e){
e.printStackTrace();
} finally {
try {
httpclient.close();
} catch (IOException e) {
e.printStackTrace();
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="好的爬虫">好的爬虫&lt;/h2>
&lt;p>一个&lt;code>好的爬虫框架&lt;/code>相比简单的爬虫，应该包含了以下特性：&lt;/p>
&lt;ol>
&lt;li>支持多线程&lt;/li>
&lt;li>支持代理&lt;/li>
&lt;li>支持过滤重复URL&lt;/li>
&lt;li>支持爬取ajax返回信息&lt;/li>
&lt;li>支持爬取需要登录验证的网页信息（Cookie管理）&lt;/li>
&lt;li>支持持久化保存爬取到的信息&lt;/li>
&lt;li>支持错误处理（IP被封禁或者登录信息失效后的处理）&lt;/li>
&lt;li>支持停止后从断点继续&lt;/li>
&lt;li>准确，快速地抓取所需信息
为了给一个简单的爬虫整合这些特性，需要做一个简单的框架设计。&lt;/li>
&lt;/ol>
&lt;h2 id="优雅的框架设计">优雅的框架设计&lt;/h2>
&lt;p>&lt;code>Scrapy&lt;/code>的框架：&lt;/p>
&lt;p>![Scrapy Structure](/image/2016-05-18 at 上午9.33.jpeg)&lt;/p>
&lt;ul>
&lt;li>&lt;code>Spider&lt;/code>创建&lt;code>Request&lt;/code>，处理&lt;code>Response&lt;/code>,生成&lt;code>Items&lt;/code>和后续&lt;code>Request&lt;/code>。&lt;/li>
&lt;li>&lt;code>Items&lt;/code>是从Response中由抽取出的所需信息组合而成的一个个POJO。&lt;/li>
&lt;li>Spider生成的&lt;code>Items&lt;/code>经&lt;code>process_item()&lt;/code>方法交由一系列的&lt;code>Item Pipelines&lt;/code>进行处理。&lt;/li>
&lt;li>&lt;code>Pipeline&lt;/code>处理&lt;code>Items&lt;/code>，可以是保存到数据库，打印到控制台，提交给Elasticsearch等等。&lt;/li>
&lt;li>&lt;code>Downloader&lt;/code>负责实际的下载行为，接收传入的Request请求，输出Response。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Webmagic&lt;/code>的框架：
![webmagic structure](/image/2016-05-18 at 上午11.16.jpeg)&lt;/p>
&lt;p>Webmagic的框架设计大部分沿袭了Scrapy：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Downloader&lt;/code>负责从互联网上下载页面，以便后续处理。WebMagic默认使用了Apache HttpClient作为下载工具。&lt;/li>
&lt;li>&lt;code>PageProcessor&lt;/code> 负责解析页面，抽取有用信息，以及发现新的链接。&lt;/li>
&lt;li>&lt;code>Scheduler&lt;/code>负责管理待抓取的URL，以及一些去重的工作。&lt;/li>
&lt;li>&lt;code>Pipeline&lt;/code>负责抽取结果的处理，包括计算、持久化到文件、数据库等。
&lt;strong>&lt;code>Webmagic&lt;/code>很好的贯彻了&lt;code>面向接口&lt;/code>的设计思想，我们可以很容易地对上述的组件进行自定义和扩展。&lt;/strong>
更进一步，可以通过修改webmgic的源代码来满足我们的定制化需求。&lt;/li>
&lt;/ul>
&lt;h2 id="储备知识">储备知识&lt;/h2>
&lt;h3 id="通过xpath获取页面元素">通过XPath获取页面元素&lt;/h3>
&lt;p>常见的从html页面获取元素的方式是通过&lt;code>Jsoup&lt;/code>，它支持用&lt;code>CSS Selector&lt;/code>方式选择DOM元素，也可过滤HTML文本。&lt;/p>
&lt;blockquote>
&lt;p>参见&lt;code>renault&lt;/code>中Craw168.java的实现&lt;/p>
&lt;/blockquote>
&lt;p>这里主要介绍通过Xpath语法获取页面元素。Xpath语法介绍请见：&lt;a href="http://www.w3school.com.cn/xpath/">Xpath语法&lt;/a>
由于Jsoup暂不支持Xpath语法，webmagic中集成了&lt;a href="https://github.com/code4craft/xsoup">Xsoup&lt;/a>来实现对Xpath语法的支持。但是由于Xsoup项目疏于维护，对Xpath的语法支持不全，我个人给webmgic添加了&lt;code>JsoupXpath&lt;/code>来支持&lt;code>Xpath&lt;/code>语法。JsoupXpath项目地址：&lt;a href="https://github.com/zhegexiaohuozi/JsoupXpath">JsoupXpath&lt;/a>&lt;/p>
&lt;h4 id="在chrome中调试xpath">在chrome中调试xpath&lt;/h4>
&lt;p>通过 开发者工具-元素选择栏 可以快速获取所需元素的xpath路径：
![chrome xpath chose](/image/2016-05-18 at 下午5.00.jpeg)&lt;/p>
&lt;p>在console中可以使用&lt;code>$x(&amp;quot;XPath路径&amp;quot;)&lt;/code>来定位xpath对应的元素：
![get element by xpath in chrome](/image/2016-05-18 at 下午5.04.jpeg)&lt;/p>
&lt;h4 id="在firefox中调试xpath">在firefox中调试xpath&lt;/h4>
&lt;p>通过安装插件&lt;code>XPath Checker&lt;/code>来调试xpath：
查看：
![firefox xpath chose](/image/2016-05-18 at 下午5.06.jpeg?r=42)
获取元素：
![get element by xpath in firefox](/image/2016-05-18 at 下午5.07.jpeg?r=56)&lt;/p>
&lt;h4 id="使用xpath需要遵循的几个原则">使用xpath需要遵循的几个原则&lt;/h4>
&lt;ol>
&lt;li>避免使用数组的形式获取元素，如&lt;code>//*[@id=&amp;quot;myid&amp;quot;]/div/div/div[1]/div[2]/div/div[1]/div[1]/a/img&lt;/code>。这种形式的xpath表达式是很脆弱的，因为页面的元素的排列很可能受到广告的插入，其他信息的存在与否而导致数组依赖的div的显示与否 等等因素的影响。通过chrome或者firefox自动获取的xpath通常是这种形式，要记得对得到的结果进行一定处理。
举个例子：
第一个页面上使用&lt;code>li[9]&lt;/code>路径来获取页面上的&lt;code>QQ&lt;/code>元素，但是第二页面中由于没有对应的元素，导致后面的元素使用了&lt;code>li[9]&lt;/code>路径，这时候如果还用&lt;code>li[9]&lt;/code>路径来获取页面上的&lt;code>QQ&lt;/code>元素，就会得到错误的元素：
![](/image/2016-05-20 16-26-24.jpg?f=1) ![](/image/2016-05-20 16-27-15.jpg?f=2)&lt;/li>
&lt;li>避免采用元素的&lt;code>class&lt;/code>属性来获取元素，如&lt;code>//div[@class=&amp;quot;red&amp;quot;]/a/img&lt;/code>。因为class通常用于控制页面元素的样式，一旦页面的样式风格发生变化，对应元素的class也极有可能发生变化。&lt;/li>
&lt;li>元素的&lt;code>id&lt;/code>属性通常是最为可靠的，如&lt;code>//*[@id=&amp;quot;more_info&amp;quot;]//text()&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>接下来就用一个简单的实例进入实战：&lt;/p>
&lt;h2 id="一个简单的webmgic的例子">一个简单的webmgic的例子&lt;/h2>
&lt;h3 id="caoliucraw">CaoLiuCraw&lt;/h3>
&lt;p>CaoLiuProcessor.java:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public class CaoLiuProcessor implements PageProcessor {
private Site site = Site.me()
.setUserAgent(&amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36&amp;#34;)
.setCharset(&amp;#34;GBK&amp;#34;).setDomain(&amp;#34;cl.pclmm.org&amp;#34;).setSleepTime(5000)
.setHttpProxy(new HttpHost(&amp;#34;localhost&amp;#34;,6152));
@Override
public void process(Page page) {
String title = page.getHtml().selectDocument(new JsoupXpathSelector(&amp;#34;//title/text()&amp;#34;));
List&amp;lt;String&amp;gt; list = page.getHtml().selectDocumentForList(new JsoupXpathSelector(&amp;#34;//div[@class=&amp;#39;tpc_content do_not_catch&amp;#39;]/descendant::input[@type=&amp;#39;image&amp;#39;]/@src&amp;#34;));
page.putField(&amp;#34;title&amp;#34;, title);
page.putField(&amp;#34;images&amp;#34;, list);
Selectable links = page.getHtml().links();
List&amp;lt;String&amp;gt; targeturls = links.regex(&amp;#34;http:\\/\\/cl\\.pclmm\\.org\\/htm_data\\/\\d+\\/\\d+\\/\\d+\\.html&amp;#34;).all();
List&amp;lt;String&amp;gt; helpurls = links.regex(&amp;#34;http:\\/\\/cl\\.pclmm\\.org\\/thread0806\\.php\\?fid=16&amp;amp;search=&amp;amp;page=\\d+&amp;#34;).all();
page.addTargetRequests(helpurls);
page.addTargetRequests(targeturls);
}
@Override
public Site getSite() {
return site;
}
public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
Spider.create(new CaoLiuProcessor())
// .setScheduler(new FileCacheQueueScheduler(&amp;#34;/Users/suclogger/MyWorkspace/caoliua&amp;#34;))
.addUrl(&amp;#34;http://cl.pclmm.org/thread0806.php?fid=16&amp;amp;search=&amp;amp;page=1&amp;#34;)
.addPipeline(new CaoLiuPip())
.thread(2)
.run();
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>CaoLiuPip.java:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public class CaoLiuPip implements Pipeline{
private final static String path = &amp;#34;/Users/suclogger/MyWorkspace/caoliu/&amp;#34;;
@Override
public void process(ResultItems resultItems, Task task) {
String title = resultItems.get(&amp;#34;title&amp;#34;);
List&amp;lt;String&amp;gt; list = resultItems.get(&amp;#34;images&amp;#34;);
if(!StringUtils.isBlank(title) &amp;amp;&amp;amp; list.size() &amp;gt; 0) {
StringBuffer imgFileNameNewYuan =new StringBuffer(path)
.append(title) //此处提取文件夹名，即之前采集的标题名
.append(&amp;#34;/&amp;#34;);
//这里先判断文件夹名是否存在，不存在则建立相应文件夹
Path target = Paths.get(imgFileNameNewYuan.toString());
if(!Files.isReadable(target)){
try {
Files.createDirectory(target);
} catch (IOException e) {
logger.error(&amp;#34;folder exist {}&amp;#34;, imgFileNameNewYuan.toString(),e);
}
}
for(int i=1;i&amp;lt;list.size();i++){
try {
ThreadPoolFactory.getThreadPool().execute(new DownloadImg(imgFileNameNewYuan.toString(), title,list.get(i)));
} catch (RejectedExecutionException e) {
logger.error(&amp;#34;image thread too many, hold on for a minuet&amp;#34;);
try {
Thread.sleep(60000);
// retry
ThreadPoolFactory.getThreadPool().execute(new DownloadImg(imgFileNameNewYuan.toString(), title,list.get(i)));
} catch (Exception e1) {
logger.error(&amp;#34;shit retry error. do nothing&amp;#34;);
}
}
}
}
}
class DownloadImg implements Runnable{
private final HttpHost proxy = new HttpHost(&amp;#34;127.0.0.1&amp;#34;, 6152, &amp;#34;http&amp;#34;);
String imgpath;
String title;
String link;
public DownloadImg(String imgpath, String title, String link) {
this.imgpath = imgpath;
this.title = title;
this.link = link;
}
@Override
public void run() {
try {
String extName=com.google.common.io
.Files.getFileExtension(link);
StringBuffer imgFileNameNew = new StringBuffer(imgpath)
.append((link)
.replaceAll(&amp;#34;[\\pP‘’“”]&amp;#34;, &amp;#34;&amp;#34;))
.append(&amp;#34;.&amp;#34;)
.append(extName);
//这里通过httpclient下载之前抓取到的图片网址，并放在对应的文件中
CloseableHttpClient httpclient = HttpClients.createDefault();
RequestConfig config = RequestConfig.custom()
.setProxy(proxy)
.build();
HttpGet httpget = new HttpGet(link);
httpget.setConfig(config);
HttpResponse response = httpclient.execute(httpget);
HttpEntity entity = response.getEntity();
InputStream in = entity.getContent();
File file = new File(imgFileNameNew.toString());
try {
FileOutputStream fout = new FileOutputStream(file);
int l = -1;
byte[] tmp = new byte[1024];
while ((l = in.read(tmp)) != -1) {
fout.write(tmp,0,l);
}
fout.flush();
fout.close();
logger.info(&amp;#34;save image : {}&amp;#34;, link);
} finally {
in.close();
}
httpclient.close();
} catch (Exception e) {
logger.error(&amp;#34;fail saving image : {}&amp;#34;,link);
}
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="通过注解编写爬虫的例子">通过注解编写爬虫的例子&lt;/h2>
&lt;h3 id="ebookcraw">EBookCraw&lt;/h3>
&lt;p>&lt;code>EBookModel.java&lt;/code>（略去了get和set方法）:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@TargetUrl(&amp;#34;http:\\/\\/www.allitebooks.com\\/(?!read\\/read.php)*&amp;#34;)
@HelpUrl({&amp;#34;http://www.allitebooks.com/\\/page\\/\\d+&amp;#34;})
public class EBookModel {
@ExtractBy(value = &amp;#34;//header[@class=&amp;#39;entry-header&amp;#39;]/h1[@class=&amp;#39;single-title&amp;#39;]/text()&amp;#34;,notNull = true)
@Formatter(value = &amp;#34;author is %s&amp;#34;,formatter = EBookTitleFormatter.class)
private String title;
@ExtractBy(value = &amp;#34;//header[@class=&amp;#39;entry-header&amp;#39;]/h4/text()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String brief;
@ExtractBy(value = &amp;#34;//header[@class=&amp;#39;entry-header&amp;#39;]/div/div[@class*=&amp;#39;entry-body-thumbnail&amp;#39;]/a/img/@src&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String cover;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;book-detail&amp;#39;]/dl/dd[1]/allText()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String author;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;book-detail&amp;#39;]/dl/dd[2]/allText()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String isbn;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;book-detail&amp;#39;]/dl/dd[3]/text()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String year;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;book-detail&amp;#39;]/dl/dd[4]/text()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String pages;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;book-detail&amp;#39;]/dl/dd[5]/allText()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String language;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;book-detail&amp;#39;]/dl//dd[6]/allText()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String fileSize;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;book-detail&amp;#39;]/dl/dd[7]/allText()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String fileFormat;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;book-detail&amp;#39;]/dl/dd[8]/allText()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String category;
@ExtractBy(value = &amp;#34;//div[@class=&amp;#39;entry-content&amp;#39;]/allText()&amp;#34;,type = ExtractBy.Type.JsoupXpath)
private String description;
@ExtractBy(&amp;#34;//span[@class=&amp;#39;download-links&amp;#39;][1]/a/@href&amp;#34;)
private String downloadLink;
@ExtractByUrl(&amp;#34;http://www.allitebooks.com/([\\w-]+)&amp;#34;)
private String url;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>EBookPip.java:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@Component
public class EBookPip implements PageModelPipeline {
@Autowired
private EBookAO eBookAO;
@Override
public void process(Object o, Task task) {
if(o instanceof EBookModel) {
EBookModel model = (EBookModel) o;
EbookDO edo = new EbookDO();
edo.setTitle(model.getTitle());
edo.setAuthor(model.getAuthor());
edo.setBrief(model.getBrief());
edo.setCategory(model.getCategory());
edo.setCover(model.getCover());
edo.setDescription(model.getDescription());
edo.setDownloadLink(model.getDownloadLink());
edo.setFileFormat(model.getFileFormat());
edo.setFileSize(model.getFileSize());
edo.setIsbn(model.getIsbn());
edo.setLanguage(model.getLanguage());
edo.setYears(model.getYear());
if(!StringUtils.isBlank(model.getPages()) &amp;amp;&amp;amp; StringUtils.isNumeric(model.getPages())) {
edo.setPages(Integer.valueOf(model.getPages()));
}
edo.setUrl(model.getUrl());
try {
eBookAO.save(edo);
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="对一些特性的分析">对一些特性的分析&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>多线程的支持
多线程的支持是通过一个可监控的&lt;code>TheadPool&lt;/code>实现的，用法是通过&lt;code>Spider.thread(N)&lt;/code>来开启N个线程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代理的支持
下文 &lt;code>应对网站的反爬措施&lt;/code> 部分中会展开。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>过滤重复URL的支持
过滤是通过实现&lt;code>DuplicateRemover&lt;/code>接口实现的，默认实现是使用内存中的一个&lt;code>HashSet&lt;/code>集来存放已添加进爬取队列的网址。
扩展中还添加了&lt;a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">布隆过滤器&lt;/a>的实现，适用于巨量网址的去重。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>爬取ajax返回信息
通过采集页面链接，并将ajax链接放入爬取队列中可以实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持爬取需要登录验证的网页信息（Cookie管理）
&lt;code>Scrapy&lt;/code>替我们托管了所有cookie操作，但是webmagic中没有实现。
通过&lt;code>CookieProvider&lt;/code>管理Cookie。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>持久信息的支持
如上面的&lt;code>EBookCraw&lt;/code>例子，可以在PipeLine中添加数据持久化逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持停止后从断点继续
采用&lt;code>FileCacheQueueScheduler&lt;/code>来管理爬取链接，爬取中止后可以从文件中读取爬取进度。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="应对网站的反爬措施">应对网站的反爬措施&lt;/h2>
&lt;p>主要有下面三个方面 ：&lt;/p>
&lt;ol>
&lt;li>使用webmagic集成的&lt;code>ProxyPool&lt;/code>来管理Proxy&lt;/li>
&lt;li>实现&lt;code>CookieProvider&lt;/code>自定义管理Cookie&lt;/li>
&lt;li>实现&lt;code>ErrorDetector&lt;/code>自定义捕获错误&lt;/li>
&lt;/ol>
&lt;h3 id="使用webmagic集成的proxypool来管理proxy">使用webmagic集成的&lt;code>ProxyPool&lt;/code>来管理Proxy&lt;/h3>
&lt;p>&lt;code>ProxyPool&lt;/code>维护了一个代理的有序队列，在每次请求完成后，通过请求的状态码设置当前使用的代理的优先级别返还到队列中，每次请求从队列中根据优先级别重新获取新的代理。
这种方式适用于手上有很多前向代理资源的爬虫，切换起来比较方便，有些情况下可能需要与切换Cookie相互配合使用。&lt;/p>
&lt;h3 id="实现cookieprovider自定义管理cookie">实现&lt;code>CookieProvider&lt;/code>自定义管理Cookie&lt;/h3>
&lt;p>每次请求都会从&lt;code>CookieProvider &lt;/code>中拿一个cookie放入本次请求头中，可以通过方法调用切换cookie。
&lt;strong>结合renault演示&lt;/strong>&lt;/p>
&lt;h2 id="增量抓取">增量抓取&lt;/h2>
&lt;p>通过实现&lt;code>ExistDetector&lt;/code>接口，在抓取后续链接的时候调用&lt;code>detect()&lt;/code>方法进行判断是否需要抓取该链接。
&lt;strong>结合renault演示&lt;/strong>&lt;/p>
&lt;h2 id="爬虫的运行监控">爬虫的运行监控&lt;/h2>
&lt;p>还在雏形阶段
![](/image/2016-05-20 17-19-29.jpg?r=26)&lt;/p>
&lt;p>参考：&lt;a href="http://my.oschina.net/flashsword/blog/202889">WebMagic Avalon设计草图&lt;/a>&lt;/p></description></item><item><title>逆向解除TextNut内购限制</title><link>https://run.halfbit.top/post/%E9%80%86%E5%90%91%E8%A7%A3%E9%99%A4textnut%E5%86%85%E8%B4%AD%E9%99%90%E5%88%B6/</link><pubDate>Sun, 15 May 2016 11:41:07 +0000</pubDate><guid>https://run.halfbit.top/post/%E9%80%86%E5%90%91%E8%A7%A3%E9%99%A4textnut%E5%86%85%E8%B4%AD%E9%99%90%E5%88%B6/</guid><description>&lt;p>看到少数派的&lt;a href="http://weibo.com/sspaime">微博&lt;/a>上推荐了一款markdown编辑器，体验了一下觉得不错，但是有未内购只能创建2个文件夹的限制，遂尝试通过逆向解除限制。&lt;/p>
&lt;!-- more -->
&lt;blockquote>
&lt;p>半年前写这篇文章的时候，因为软件作者的抗议和谐了文章内容，现在将内容放出。 -20161216&lt;/p>
&lt;/blockquote>
&lt;p>使用工具：Hopper Disassembler，
逆向App：TextNut&lt;/p>
&lt;p>首先看一下&lt;code>applicationWillFinishLaunching&lt;/code>方法，一般这里会有注册状态的相关逻辑：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">if ([rbx areYouSponsor] == 0x1) {
r12 = [[ESPurchaseManager sharedPurchaseManager] retain];
rbx = [[SKPaymentQueue defaultQueue] retain];
rdx = r12;
[rbx addTransactionObserver:rdx];
rdi = rbx;
[rdi release];
[r12 release];
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>猜测是用&lt;code>areYouSponsor&lt;/code>来存放注册状态，分析这个变量的相关引用：
![](/image/2016-05-15 12-16-53.jpg)
可以看到如果注册成功，&lt;code>areYouSponsor&lt;/code>会被设置为&lt;code>0x1&lt;/code>，继续看这个变量对创建文件夹的控制：
在&lt;code>ETDocumentController validateMenuItem&lt;/code>方法中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">if ([r12-&amp;gt;settings areYouSponsor] == 0x0) {
if ((_objc_msgSend(r13, rbx) == 0x1772) &amp;amp;&amp;amp; ([ESCoreDataUtil countLibraries:0x1] &amp;gt; 0x3)) {
r15 = 0x0;
}
else {
if (_objc_msgSend(r13, rbx) == 0x1776) {
if ([ESCoreDataUtil countLibraries:0xa] &amp;lt;= 0x1) {
r15 = 0x1;
}
else {
r15 = 0x0;
}
}
else {
r15 = 0x1;
}
}
}
else {
r15 = 0x1;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码通过&lt;code>countLibraries&lt;/code>来计算当前library数量和判断&lt;code>areYouSponsor&lt;/code>来控制新建Library菜单的是否只读。
尝试将判断条件置反，即将&lt;code>if ([r12-&amp;gt;settings areYouSponsor] == 0x0) {&lt;/code>跳转的逻辑&lt;code>和else {&lt;/code>跳转的逻辑对调：
![](/image/2016-05-15 12-30-03.jpg)
将&lt;code>7566&lt;/code>改为&lt;code>7466&lt;/code>：
![](/image/2016-05-15 12-31-20.jpg?r=35)
解除限制成功：
![](/image/2016-05-15 12-32-37.jpg)&lt;/p></description></item><item><title>打开了新世界的大门：Hopper Disassembler</title><link>https://run.halfbit.top/post/%E6%89%93%E5%BC%80%E4%BA%86%E6%96%B0%E4%B8%96%E7%95%8C%E7%9A%84%E5%A4%A7%E9%97%A8hopper-disassembler/</link><pubDate>Fri, 13 May 2016 22:45:28 +0000</pubDate><guid>https://run.halfbit.top/post/%E6%89%93%E5%BC%80%E4%BA%86%E6%96%B0%E4%B8%96%E7%95%8C%E7%9A%84%E5%A4%A7%E9%97%A8hopper-disassembler/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>在&lt;a href="https://twitter.com/bleedfly">@bleedfly&lt;/a>的影响下，也想自己动手玩一下逆向。
记录一下第一个逆向的app ： &lt;code>Interface Inspector&lt;/code> 的过程。&lt;/p>
&lt;p>使用工具：&lt;code>Hopper Disassembler&lt;/code> Version 3.9.15 ，&lt;code>Hex Fiend&lt;/code> Version 2.1.2 (200)
逆向APP：&lt;code>Interface Inspector&lt;/code> Version 2.2 (17)&lt;/p>
&lt;ol>
&lt;li>通过检索关键字&lt;code>register&lt;/code>定位到相关注册方法：SMLicenseManager registerLicenseWithName：
![](/image/2016-05-13 22-49-54.jpg)&lt;/li>
&lt;li>此处通过&lt;code>verifyLicenseWithName&lt;/code>方法判断是否为合法注册码，定位到对应汇编代码，将变更后的汇编代码翻译为字节码。
此处通过将判断条件置反，使得无效的注册码进入有效验证码的后续逻辑，即需要将汇编代码：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">000000010010f30e je 0x10010f39b
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>替换为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">000000010010f30e jne 0x10010f39b
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>通过右侧的窗口查看汇编命令对应的字节码：&lt;/li>
&lt;/ol>
&lt;p>![](/image/2016-05-13 22-57-58.jpg)
根据汇编命令与字节码的对应关系：&lt;/p>
&lt;p>![](/image/2016-05-13 23-00-28.jpg)&lt;/p>
&lt;p>需要将&lt;code>je&lt;/code> 对应的&lt;code>0F 84 87 00 00 00 &lt;/code>替换为&lt;code>0F 85 87 00 00 00&lt;/code>
4. 使用mac下的字节码编辑工具&lt;code>Hex Fiend&lt;/code>打开MacOs目录下的可执行文件
执行替换时，因为&lt;code>0F 84 87 00 00 00 &lt;/code>对应了多个结果，这里将后一句汇编代码对应的字节码拼接上去确保结果唯一后执行替换：
![](/image/2016-05-13 23-11-08.jpg)&lt;/p>
&lt;ol start="5">
&lt;li>保存替换之后还无法运行，因为修改过的可执行文件丢失了证书信息，需要重新对该文件进行签名操作。
详细步骤可以参考：&lt;a href="http://forums.macnn.com/79/developer-center/355720/how-re-sign-apples-applications-once/">re-sign-apples-applications&lt;/a>&lt;/li>
&lt;li>签名之后依然无法打开，查找提示信息&lt;code>Signature of the Interface Inspector is broken&lt;/code>找到程序启动完毕触发事件的监听部分：&lt;/li>
&lt;/ol>
&lt;p>![](/image/2016-05-13 23-22-40.jpg)
找到跳转入口：
![](/image/2016-05-13 23-23-31.jpg)
按照刚才的处理方法，替换此处的判断条件。
7. 至此可以打开软件并用任意字符成功注册。&lt;/p>
&lt;p>![](/image/2016-05-13 23-25-18.jpg)&lt;/p></description></item><item><title>《万历十五年》有感</title><link>https://run.halfbit.top/post/%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E6%9C%89%E6%84%9F/</link><pubDate>Wed, 11 May 2016 21:07:53 +0000</pubDate><guid>https://run.halfbit.top/post/%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E6%9C%89%E6%84%9F/</guid><description>&lt;p>全书分别从人君，文官，武官，文人的角度描绘了万历十五年这个明朝的统治末年下的方方面面。&lt;/p>
&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>人君受到文官集团的钳制，形同傀儡，无法自由发挥天性，或放浪形骸，或消极处事。&lt;/p>
&lt;p>文官就算位极人臣，也要小心制衡百官和人君，稍有变革，触及文官集团的利益，便有杀身之祸。&lt;/p>
&lt;p>武官在这样一个重文轻武的朝代，经济制度混乱，文官对武官的权力时刻警惕，更是难有建树。&lt;/p>
&lt;p>文人被牢牢束缚在儒学和传统宗族集团制度的枷锁之下，妄图放弃正统的儒学观念，则是威胁到王朝根基安全的大逆之举。&lt;/p>
&lt;p>政府的施政方针和个人的行动完全凭借道德的指导，而不依靠公正而周详的法律，这样带来的后果是社会越来越趋于凝固，政府的政治措施无法适应时代的需要，个人的独创精神也难以得到发挥。&lt;/p>
&lt;p>文极必开动乱之机，由乱复归于治。努尔哈赤在白山黑水之间起家，带着“质”上的纯真，征服了这样一个庞大的帝国。&lt;/p>
&lt;blockquote>
&lt;p>当一个人口众多的国家，各人行动全凭儒家简单粗浅而又无法固定的原则所限制，而法律又缺乏创造性，则其社会发展的程度，必然受到限制。即便是宗旨善良，也不能补助技术之不及。1587年，是为万历十五年，丁亥次岁，表面上似乎是四海升平，无事可记，实际上我们的大明帝国却已经走到了它发展的尽头。在这个时候，皇帝的励精图治或者宴安耽乐，首辅的独裁或者调和，高级将领的富于创造或者习于苟安，文官的廉洁奉公或者贪污舞弊，思想家的极端进步或者绝对保守，最后的结果，都是无分善恶，统统不能在事业上取得有意义的发展，有的身败，有的名裂，还有的人则身败而兼名裂。&lt;/p>
&lt;/blockquote></description></item><item><title>《人皮论语》有感</title><link>https://run.halfbit.top/post/%E4%BA%BA%E7%9A%AE%E8%AE%BA%E8%AF%AD%E6%9C%89%E6%84%9F/</link><pubDate>Sun, 24 Apr 2016 00:27:03 +0000</pubDate><guid>https://run.halfbit.top/post/%E4%BA%BA%E7%9A%AE%E8%AE%BA%E8%AF%AD%E6%9C%89%E6%84%9F/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>如同作者的写作手记所述：&lt;/p>
&lt;blockquote>
&lt;p>..&lt;/p>
&lt;p>（4）权本位是这个民族悲剧不断循环的宿命之根，但很多人将矛头指向儒家，心中始终愤愤不平。 　　&lt;/p>
&lt;p>（5）中国历史命运的转折是从汉武帝独尊儒术开始。儒学和中国文化从此定型，两千年延续不断。&lt;/p>
&lt;p>..&lt;/p>
&lt;/blockquote>
&lt;p>这本书大有为儒学鸣不平之意。&lt;/p>
&lt;p>回望高中的时候，语文老师强迫我们背下通篇《论语》，我背下之后，就在早读课上记诵 老、庄。当时仅仅是下意识的更喜欢老、庄，很大程度跟自己的性格有关：不喜与人争。&lt;/p>
&lt;p>这本书将命题上升到民族的高度，把儒学放在一个特定的时间点：汉武帝独尊儒术 上来打量，试图得到这样一个结论，儒学并不是权本位的根源，恰恰相反，&lt;strong>儒学也是权本位的牺牲品&lt;/strong>，从真正的圣人之言，成为了当权者操纵思想的工具。&lt;/p>
&lt;blockquote>
&lt;p>君子谋道不谋食。耕也，馁在其中矣；学也，禄在 其中矣。&lt;/p>
&lt;/blockquote>
&lt;p>出自论语中的这类词句在本书中是被当权者强加到论语中的，并非出自孔子。当权者通过篡改论语达到了操纵思想的目的。&lt;/p>
&lt;p>同样的，本书中通过同一时期司马迁和他所著《史记》的命运也印证了这一点。&lt;/p>
&lt;p>且不管作者有关儒学的申辩，&lt;code>这里本来有一句话,但是最终还是没敢写出来，俗称，自我审查，自我和谐&lt;/code>。&lt;/p></description></item><item><title/><link>https://run.halfbit.top/post/solr%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://run.halfbit.top/post/solr%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</guid><description>&lt;p>title: solr上手指南&lt;/p>
&lt;p>date: 2016-04-23 22:10:59&lt;/p>
&lt;p>tags: [solr]&lt;/p>
&lt;p>categories: 搜索&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>通过homebrew安装solr:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">brew install solr
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装在&lt;code>/usr/local/Cellar/solr/&lt;/code>下对应版本号的目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动solr cloud:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">solr start -e cloud -noprompt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;del>或者solr单个节点:&lt;/del>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">solr start
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动后通过访问:http://localhost:8983/solr/#/~cloud 可以看到系统拓扑图:
&lt;img src="https://run.halfbit.top/image/B30F4FC6D27D77B47CEF0E3E8241C4E4.jpg" alt="2016-04-12 at 下午9.20.jpg">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>导入数据
3.1 导入富文本文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">post -c gettingstarted /usr/local/Cellar/solr/5.5.0/libexec/docs/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上命令将导入solr目录下的示例数据文件夹包含的富文本文件.
导入之后,就可以通过访问solr的搜索界面:http://localhost:8983/solr/#/gettingstarted_shard1_replica2/query 进行搜索:
&lt;img src="https://run.halfbit.top/image/62A148F2E36F570A76B83CF1E9AA8998.jpg" alt="2016-04-12 at 下午9.34.jpg">
3.2 通过solr xml格式文件导入数据
solr xml文件的定义参见:&lt;a href="https://cwiki.apache.org/confluence/display/solr/Uploading+Data+with+Index+Handlers#UploadingDatawithIndexHandlers-XMLFormattedIndexUpdates">apache wiki&lt;/a>
导入示例文件命令为:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">post -c gettingstarted example/exampledocs/*.xml
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过访问:http://localhost:8983/solr/gettingstarted/browse 可以看到当前已导入的文件列表,同样可以通过搜索界面进行搜索.
3.3 通过json格式文件导入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">post -c gettingstarted example/exampledocs/books.json
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>3.4 通过csv格式文件导入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">post -c gettingstarted example/exampledocs/books.csv
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>3.5 其他导入方式
通过DIH从数据库导入,使用SolrJ插件通过java等基于jvm的代码导入,使用Admin UI &amp;hellip;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过关键词进行搜索
4.1 单个条件搜索
通过替换搜索界面中q的默认值:&lt;code>*:*&lt;/code>为&amp;rsquo;foudation&amp;rsquo;或者访问地址:http://localhost:8983/solr/gettingstarted/select?wt=json&amp;amp;indent=true&amp;amp;q=foundation 可以得到搜索结果.
&lt;strong>访问搜索界面需要执行sharding,但是请求搜索结果可以忽略&lt;/strong>
可以看到返回的结果几乎包含了所有的记录,因为刚才的搜索包含了所有的字段,通过将q设置为&lt;code>name:foudation&lt;/code>可以仅仅搜索&lt;code>name&lt;/code>属性中中包含foudation的记录,同理可以试试q设置为&lt;code>cat:software&lt;/code>搜索cat属性中包含software的记录.
4.2 词组搜索
例如需要搜索&lt;code>CAS latency&lt;/code>,在搜索界面中可以直接录入&lt;code>CAS latency&lt;/code>,但是如果通过url,需要将空格替换为&lt;code>+&lt;/code>.
&lt;img src="https://run.halfbit.top/image/64ACBB392AD1C988DBDBBE74381E0896.jpg" alt="2016-04-12 at 下午10.17.jpg">
4.3 组合搜索条件
需要条件出现使用&lt;code>+&lt;/code>,需要条件不出现使用&lt;code>-&lt;/code>
例如:http://localhost:8983/solr/gettingstarted/select?wt=json&amp;amp;indent=true&amp;amp;q=%2Bone+%2Bthree 这个链接搜索包含one但是不包含three的记录
4.4 更多
访问&lt;a href="https://cwiki.apache.org/confluence/display/solr/Searching">apache wiki&lt;/a>获取更多有关搜索的细节.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>清理
到现在我们已经大致接触了solr,要将solr恢复到初始状态,执行以下命令:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">bin/solr stop -all ; rm -Rf example/cloud/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title/><link>https://run.halfbit.top/post/spring-boot%E7%9B%B8%E5%85%B3%E5%8F%8Adubbo%E9%9B%86%E6%88%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://run.halfbit.top/post/spring-boot%E7%9B%B8%E5%85%B3%E5%8F%8Adubbo%E9%9B%86%E6%88%90/</guid><description>&lt;p>layout: &amp;lsquo;[draft]&amp;rsquo;
title: Spring-Boot相关及Dubbo集成
tags:&lt;/p>
&lt;ul>
&lt;li>Spring-Boot&lt;/li>
&lt;li>Dubbo
comments: true
toc: true
categories:&lt;/li>
&lt;li>编程
date: 2017-04-16 11:45:23&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>We talk about Spring Boot integration with Dubbo this time.&lt;/p>
&lt;!-- more -->
&lt;h1 id="spring-boot-hello-world">Spring Boot Hello World&lt;/h1>
&lt;p>一个Spirng Boot的Hello World：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@SpringBootApplication
public class SpringBootSimpleApplication {
public static void main(String[] args) {
SpringApplication.run(SpringBootSimpleApplication.class, args);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基础注解：&lt;code>@SpringBootApplication&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="err">@&lt;/span>&lt;span class="nf">Target&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ElementType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TYPE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nf">Retention&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">RetentionPolicy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RUNTIME&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nx">Documented&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nx">Inherited&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nx">SpringBootConfiguration&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nx">EnableAutoConfiguration&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nf">ComponentScan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">excludeFilters&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nf">Filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">FilterType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CUSTOM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">classes&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">TypeExcludeFilter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">class&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nf">Filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">FilterType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CUSTOM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">classes&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">AutoConfigurationExcludeFilter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">class&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="nx">public&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nx">SpringBootApplication&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Exclude specific auto-configuration classes such that they will never be applied.
&lt;/span>&lt;span class="cm"> * @return the classes to exclude
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nf">AliasFor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">annotation&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">EnableAutoConfiguration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attribute&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;exclude&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">Class&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">&amp;gt;[]&lt;/span> &lt;span class="nf">exclude&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Exclude specific auto-configuration class names such that they will never be
&lt;/span>&lt;span class="cm"> * applied.
&lt;/span>&lt;span class="cm"> * @return the class names to exclude
&lt;/span>&lt;span class="cm"> * @since 1.3.0
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nf">AliasFor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">annotation&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">EnableAutoConfiguration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attribute&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;excludeName&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="nf">excludeName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Base packages to scan for annotated components. Use {@link #scanBasePackageClasses}
&lt;/span>&lt;span class="cm"> * for a type-safe alternative to String-based package names.
&lt;/span>&lt;span class="cm"> * @return base packages to scan
&lt;/span>&lt;span class="cm"> * @since 1.3.0
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nf">AliasFor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">annotation&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">ComponentScan&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attribute&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;basePackages&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="nf">scanBasePackages&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Type-safe alternative to {@link #scanBasePackages} for specifying the packages to
&lt;/span>&lt;span class="cm"> * scan for annotated components. The package of each class specified will be scanned.
&lt;/span>&lt;span class="cm"> * &amp;lt;p&amp;gt;
&lt;/span>&lt;span class="cm"> * Consider creating a special no-op marker class or interface in each package that
&lt;/span>&lt;span class="cm"> * serves no purpose other than being referenced by this attribute.
&lt;/span>&lt;span class="cm"> * @return base packages to scan
&lt;/span>&lt;span class="cm"> * @since 1.3.0
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nf">AliasFor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">annotation&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">ComponentScan&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attribute&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;basePackageClasses&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">Class&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">&amp;gt;[]&lt;/span> &lt;span class="nf">scanBasePackageClasses&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个一个组合注解，包含了&lt;code>@SpringBootConfiguration&lt;/code>、&lt;code>@EnableAutoConfiguration&lt;/code>和&lt;code>@ComponentScan&lt;/code>。
关键是&lt;code>@EnableAutoConfiguration&lt;/code>这个注解负责自动配置，依次检查类路径，注解，配置文件来为你创建所需的配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public class EnableAutoConfigurationImportSelector
extends AutoConfigurationImportSelector {
@Override
protected boolean isEnabled(AnnotationMetadata metadata) {
if (getClass().equals(EnableAutoConfigurationImportSelector.class)) {
return getEnvironment().getProperty(
EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class,
true);
}
return true;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>1.5之后，主要功能迁移到了&lt;code>AutoConfigurationImportSelector&lt;/code>中，其中最为关键的是&lt;code>getCandidateConfiguration&lt;/code>方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">protected List&amp;lt;String&amp;gt; getCandidateConfigurations(AnnotationMetadata metadata,
AnnotationAttributes attributes) {
List&amp;lt;String&amp;gt; configurations = SpringFactoriesLoader.loadFactoryNames(
getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());
Assert.notEmpty(configurations,
&amp;#34;No auto configuration classes found in META-INF/spring.factories. If you &amp;#34;
+ &amp;#34;are using a custom packaging, make sure that file is correct.&amp;#34;);
return configurations;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个方法中，使用了&lt;code>SpringFactoriesLoader.loadFactoryNames&lt;/code>方法来加载候选配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">public static List&amp;lt;String&amp;gt; loadFactoryNames(Class&amp;lt;?&amp;gt; factoryClass, ClassLoader classLoader) {
String factoryClassName = factoryClass.getName();
try {
Enumeration&amp;lt;URL&amp;gt; urls = classLoader != null?classLoader.getResources(&amp;#34;META-INF/spring.factories&amp;#34;):ClassLoader.getSystemResources(&amp;#34;META-INF/spring.factories&amp;#34;);
ArrayList result = new ArrayList();
while(urls.hasMoreElements()) {
URL url = (URL)urls.nextElement();
Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));
String factoryClassNames = properties.getProperty(factoryClassName);
result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));
}
return result;
} catch (IOException var8) {
throw new IllegalArgumentException(&amp;#34;Unable to load [&amp;#34; + factoryClass.getName() + &amp;#34;] factories from location [&amp;#34; + &amp;#34;META-INF/spring.factories&amp;#34; + &amp;#34;]&amp;#34;, var8);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法从类路径或者定义的资源路径下的&lt;code>META-INF/spring.factories&lt;/code>文件中加载候选配置。
org.springframework.boot.autoconfigure包下的&lt;code>spring.factories&lt;/code>如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># Initializers
org.springframework.context.ApplicationContextInitializer=\
org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\
org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer
# Application Listeners
org.springframework.context.ApplicationListener=\
org.springframework.boot.autoconfigure.BackgroundPreinitializer
# Auto Configuration Import Listeners
org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\
org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener
# Auto Configuration Import Filters
org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\
org.springframework.boot.autoconfigure.condition.OnClassCondition
# Auto Configure
org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\
org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\
org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\
org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\
org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\
org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\
org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>spring.factories&lt;/code>文件定义了所有用于推断当前运行的应用程序的类型的逻辑和对应各个程序类型的自动配置方法。
以&lt;code>CloudAutoConfiguration&lt;/code>为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@Configuration
@Profile(&amp;#34;cloud&amp;#34;)
@AutoConfigureOrder(CloudAutoConfiguration.ORDER)
@ConditionalOnClass(CloudScanConfiguration.class)
@ConditionalOnMissingBean(Cloud.class)
@ConditionalOnProperty(prefix = &amp;#34;spring.cloud&amp;#34;, name = &amp;#34;enabled&amp;#34;, havingValue = &amp;#34;true&amp;#34;, matchIfMissing = true)
@Import(CloudScanConfiguration.class)
public class CloudAutoConfiguration {
// Cloud configuration needs to happen early (before data, mongo etc.)
public static final int ORDER = Ordered.HIGHEST_PRECEDENCE + 20;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个配置函数会将当前应用配置为一个cloud应用，判断依据是&lt;code>@ConditionalOnClass&lt;/code>、&lt;code>@ConditionalOnMissingBean&lt;/code>和&lt;code>@ConditionalOnProperty&lt;/code>：类路径中存在&lt;code>CloudScanConfiguration&lt;/code>、容器当前没有&lt;code>Cloud&lt;/code>类的Bean实例而且配置参数中&lt;code>spring.cloud&lt;/code>值为&lt;code>true&lt;/code>或不存在这个配置项，即默认匹配。
&lt;code>@Profile&lt;/code>表示加载&lt;code>cloud&lt;/code>配置，&lt;code>@Import&lt;/code>表示如果上述条件满足，则加载&lt;code>CloudScanConfiguration&lt;/code>。
看完了注解 ，再来看看main函数。
&lt;code>SpringApplication&lt;/code>这个类起到了引导（bootstrap）的作用。
除了最基本的&lt;code>run&lt;/code>方法，还可以通过&lt;code>SpringApplication&lt;/code>提供的更多方法对应用进行定制。&lt;/p>
&lt;h1 id="spring-boot-starter">Spring Boot Starter&lt;/h1>
&lt;p>可以把Starter理解为一个完整功能的自动配置。例如通过引入spring-boot-starter-jdbc，我们就可以直接通过@Autowired引入DataSource的bean，不需要再手动创建DataSource的相关实例。&lt;/p>
&lt;h2 id="custom-starter">Custom Starter&lt;/h2>
&lt;p>在上面我们可以看到，Spring Boot通过扫描&lt;code>spring.factories&lt;/code>文件来加载自动配置。
所以我们只需自定义一个&lt;code>CustomAutoConfiguration&lt;/code>，并添加到&lt;code>spring.factories&lt;/code>文件中，即可被Spring Boot自动加载。
如果不想污染&lt;code>spring.factories&lt;/code>文件，也可以通过&lt;code>@Import&lt;/code>注解手动导入&lt;code>CustomAutoConfiguration.class&lt;/code>。&lt;/p>
&lt;h2 id="spring-boot-starter-dubbo">Spring Boot Starter Dubbo&lt;/h2>
&lt;p>通过创建一个Dubbo的starter，我们可以快速的给应用添加dubbo支持。
开源社区中主要有以下相关项目提供了dubbo的starter：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/teaey/spring-boot-starter-dubbo">spring-boot-starter-dubbo By teaey&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/linux-china/spring-boot-dubbo">spring-boot-dubbo By 卷爷&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>teaey的项目比较中规中矩，而卷爷的项目添加了很多好的想法，但是只支持他开发的dubbo 3，为了兼容现有的dubbo 2.x 版本，我们可以综合一下这两个项目。&lt;/p>
&lt;h2 id="autowired-vs-reference">Autowired vs Reference&lt;/h2>
&lt;p>&lt;code>@Reference&lt;/code>是Dubbo提供的用于标示dubbo服务的注解，而&lt;code>@Autowired&lt;/code>是Spring原生支持的依赖注入的注解，为了减少侵入性，显然是后者更胜。
卷爷的项目中，巧妙的通过Provider额外提供的一个Starter，使得dubbo的Consumer可以直接使用&lt;code>@Autowired&lt;/code>引入Dubbo服务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">@Bean
public ReferenceBean&amp;lt;UicTemplate&amp;gt; uicTemplate() {
return getConsumerBean(UicTemplate.class, properties.getVersion(), properties.getTimeout());
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以我们可以给teaey的项目引入卷爷项目中的&lt;code>DubboBasedAutoConfiguration&lt;/code>来获得&lt;code>getConsumerBean()&lt;/code>方法的支持。&lt;/p>
&lt;h1 id="spring-boot-with-dubbo-project">Spring Boot With Dubbo Project&lt;/h1>
&lt;p>Before Spring Boot：
&lt;img src="https://run.halfbit.top/image/2017-04-16-13-57-26.jpg" alt="">
After Spring Boot:
&lt;img src="https://run.halfbit.top/image/2017-04-16-13-55-50.jpg" alt="">&lt;/p>
&lt;p>一个提供Dubbo服务的Spring Boot项目应该包含以下模块：&lt;/p>
&lt;ul>
&lt;li>Dubbo服务的接口API，如图中的&lt;code>infiniti-api&lt;/code>&lt;/li>
&lt;li>Dubbo服务的实现模块（可以是Web服务，也可以不是），如图中的&lt;code>spring-boot-infiniti-web&lt;/code>&lt;/li>
&lt;li>Dubbo服务的Reference封装模块，如图中的&lt;code>spring-boot-starter-infiniti&lt;/code>&lt;/li>
&lt;li>（可选）Dubbo服务的Consumer示例，如图中的&lt;code>spring-boot-infiniti-demo-client&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>一个消费Dubbo服务的项目应该引入以下依赖：&lt;/p>
&lt;ul>
&lt;li>Dubbo Starter&lt;/li>
&lt;li>Dubbo服务的接口API&lt;/li>
&lt;li>对应Dubbo服务的Reference封装模块&lt;/li>
&lt;/ul>
&lt;h1 id="other">Other&lt;/h1>
&lt;p>因为一些意外的关系，博客停更了3个月，后面会继续保持更新，祝好。&lt;/p></description></item><item><title/><link>https://run.halfbit.top/post/%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0cxf%E7%9A%84webservice%E6%94%AF%E6%8C%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://run.halfbit.top/post/%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0cxf%E7%9A%84webservice%E6%94%AF%E6%8C%81/</guid><description>&lt;p>title: 项目添加CXF的WebService支持&lt;/p>
&lt;p>date: 2016-03-01 18:10:59&lt;/p>
&lt;p>tags: [cxf,spring ]&lt;/p>
&lt;p>categories: 编程&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>在&lt;code>web.xml&lt;/code>文件中添加：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">&amp;lt;!--&lt;/span> &lt;span class="n">配置Context&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">contextConfigLocation&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">classpath&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">conf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">spring&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">cxf&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">core&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在&lt;code>web.xml&lt;/code>文件中添加：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">&amp;lt;!--&lt;/span> &lt;span class="n">配置CXFServlet&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">CXFServlet&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cxf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">transport&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CXFServlet&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">class&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">on&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">startup&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">4&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">on&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">startup&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mapping&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">CXFServlet&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="o">&amp;gt;/&lt;/span>&lt;span class="n">ws&lt;/span>&lt;span class="o">/*&amp;lt;/&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">servlet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mapping&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加&lt;code>spring-cxd-core.xml&lt;/code>配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="n">xml&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;1.0&amp;#34;&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="o">?&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">beans&lt;/span> &lt;span class="n">xmlns&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span> &lt;span class="n">xmlns&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">xsi&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;span class="nl">xsi:&lt;/span>&lt;span class="n">schemaLocation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans
&lt;/span>&lt;span class="s"> http://www.springframework.org/schema/beans/spring-beans-3.1.xsd&amp;#34;&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">autowire&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;byName&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;!--&lt;/span> &lt;span class="n">导入CXF核心配置&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">resource&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;classpath:META-INF/cxf/cxf.xml&amp;#34;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">resource&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;classpath:META-INF/cxf/cxf-servlet.xml&amp;#34;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">beans&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加&lt;code>spring-cxf-jaxrs.xml&lt;/code>配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="n">xml&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;1.0&amp;#34;&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="o">?&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">beans&lt;/span> &lt;span class="n">xmlns&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span> &lt;span class="n">xmlns&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">xsi&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span> &lt;span class="n">xmlns&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">jaxrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://cxf.apache.org/jaxrs&amp;#34;&lt;/span>
&lt;span class="nl">xsi:&lt;/span>&lt;span class="n">schemaLocation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans
&lt;/span>&lt;span class="s"> http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
&lt;/span>&lt;span class="s"> http://cxf.apache.org/jaxrs
&lt;/span>&lt;span class="s"> http://cxf.apache.org/schemas/jaxrs.xsd&amp;#34;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">autowire&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;byName&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;!--&lt;/span> &lt;span class="n">JSON相关配置&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">bean&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;jsonProvider&amp;#34;&lt;/span> &lt;span class="n">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;com.wondersgroup.core.util.ext.JsonProvider&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">property&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;dateFormat&amp;#34;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;yyyy-MM-dd&amp;#34;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">bean&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;!--&lt;/span> &lt;span class="n">使用JAX&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">RS发布RESTful服务&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;!--&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jaxrs&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">server&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/data&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jaxrs&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">serviceBeans&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">bean&lt;/span> &lt;span class="n">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;com.wondersgroup.notice.webservice.NoticeWebService&amp;#34;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">jaxrs&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">serviceBeans&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jaxrs&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">providers&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ref&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;jsonProvider&amp;#34;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">jaxrs&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">providers&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">jaxrs&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">--&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">beans&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加4个jar包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cxf&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">core&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jar&lt;/span>
&lt;span class="n">2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cxf&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">rt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">frontend&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">jaxrs&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jar&lt;/span>
&lt;span class="n">3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cxf&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">rt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jar&lt;/span>
&lt;span class="n">4&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cxf&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">rt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">transports&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jar&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>solr中文全词匹配的问题</title><link>https://run.halfbit.top/post/solr%E4%B8%AD%E6%96%87%E5%85%A8%E8%AF%8D%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://run.halfbit.top/post/solr%E4%B8%AD%E6%96%87%E5%85%A8%E8%AF%8D%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>正常情况下的全词匹配可以用双引号括住需要检索的关键字,比如: q=name:&amp;ldquo;keyword&amp;rdquo;
但是如果某个字段用配置了中文分词器,用双引号括住无法查找到对应记录,只能用分词的结果的一部分做模糊查询,比如要精确查询 &amp;ldquo;美丽人生&amp;rdquo; ,用 q=name:&amp;ldquo;美丽人生&amp;rdquo; 是无法匹配到的,只能用 q=name:&amp;ldquo;美丽&amp;rdquo; ,或者 q=name:&amp;ldquo;人生&amp;rdquo; 才能匹配到.
中文分词配置如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;field name=&amp;#34;name&amp;#34; type=&amp;#34;textComplex&amp;#34; indexed=&amp;#34;true&amp;#34; stored=&amp;#34;true&amp;#34;/&amp;gt;
...
&amp;lt;fieldType name=&amp;#34;textComplex&amp;#34; class=&amp;#34;solr.TextField&amp;#34; positionIncrementGap=&amp;#34;100&amp;#34;&amp;gt;
&amp;lt;analyzer type=&amp;#34;index&amp;#34;&amp;gt;
&amp;lt;tokenizer class=&amp;#34;com.chenlb.mmseg4j.solr.MMSegTokenizerFactory&amp;#34; mode=&amp;#34;complex&amp;#34;/&amp;gt;
&amp;lt;filter class=&amp;#34;solr.WordDelimiterFilterFactory&amp;#34;
splitOnNumerics=&amp;#34;0&amp;#34;
generateWordParts=&amp;#34;1&amp;#34;
generateNumberParts=&amp;#34;1&amp;#34;
catenateWords=&amp;#34;0&amp;#34;
catenateNumbers=&amp;#34;0&amp;#34;
catenateAll=&amp;#34;0&amp;#34;
preserveOriginal=&amp;#34;1&amp;#34;
/&amp;gt;
&amp;lt;filter class=&amp;#34;solr.LowerCaseFilterFactory&amp;#34;/&amp;gt;
&amp;lt;filter class=&amp;#34;solr.EdgeNGramFilterFactory&amp;#34; minGramSize=&amp;#34;1&amp;#34; maxGramSize=&amp;#34;10&amp;#34;/&amp;gt;
&amp;lt;/analyzer&amp;gt;
&amp;lt;analyzer type=&amp;#34;query&amp;#34;&amp;gt;
&amp;lt;tokenizer class=&amp;#34;solr.StandardTokenizerFactory&amp;#34;/&amp;gt;
&amp;lt;filter class=&amp;#34;solr.LowerCaseFilterFactory&amp;#34;/&amp;gt;
&amp;lt;/analyzer&amp;gt;
&amp;lt;/fieldType&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解决的思路就是索引两个字段，一个分词，一个不分词，但是他们都索引了，在查询时，同时查询这两个字段，分词的字段：模糊查，不分词的字段：精确查，这样以来既能保证召全率，也能保证查准率,配置如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;!-- 这个字段用于模糊匹配 --&amp;gt;
&amp;lt;field name=&amp;#34;name&amp;#34; type=&amp;#34;textComplex&amp;#34; indexed=&amp;#34;true&amp;#34; stored=&amp;#34;true&amp;#34;/&amp;gt;
&amp;lt;!-- 这个字段用于精确匹配 --&amp;gt;
&amp;lt;field name=&amp;#34;exactName&amp;#34; type=&amp;#34;exactText&amp;#34; indexed=&amp;#34;true&amp;#34; stored=&amp;#34;true&amp;#34;/&amp;gt;
&amp;lt;!--保持这两个字段相等 --&amp;gt;
&amp;lt;copyField source=&amp;#34;name&amp;#34; dest=&amp;#34;exactName&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>