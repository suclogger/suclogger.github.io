<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程 on To Mars</title><link>https://www.tomars.cv/categories/%E7%BC%96%E7%A8%8B/</link><description>Recent content in 编程 on To Mars</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 22 Apr 2021 10:15:37 +0000</lastBuildDate><atom:link href="https://www.tomars.cv/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>近期作为一个杠精的自我修养</title><link>https://www.tomars.cv/post/%E8%BF%91%E6%9C%9F%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%9D%A0%E7%B2%BE%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</link><pubDate>Thu, 22 Apr 2021 10:15:37 +0000</pubDate><guid>https://www.tomars.cv/post/%E8%BF%91%E6%9C%9F%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%9D%A0%E7%B2%BE%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</guid><description>&lt;blockquote>
&lt;p>杠精是一个网络流行词，指经常的通过抬杠获取快感的人、总是唱反调的人、争辩时故意持相反意见的人。&lt;/p>
&lt;/blockquote>
&lt;p>工作中会有很多争论的场合，产品方案，技术方案，流程方案，大家需要花很多的时间达成一致，在这些过程中，要警惕为了杠而杠，和为了达成目标而探讨。&lt;/p></description></item><item><title>后平台行业分离时代面临的开发问题</title><link>https://www.tomars.cv/post/thoughs-2020-05/</link><pubDate>Sun, 14 Jun 2020 21:32:15 +0000</pubDate><guid>https://www.tomars.cv/post/thoughs-2020-05/</guid><description>&lt;p>我在18年年底入职，正值菜鸟仓储的平台行业分离时代战役启动。目前基本完成了平台化改造和内核升级，所有切换也基本进入长尾，计划近期会完成平台行业分离战役前的老应用/链路的物理下线。在当前这个【后平台行业分离时代】，作为一名亲历的一线开发小二，谈谈正在面临的一些技术困境。&lt;/p></description></item><item><title>UNIX网络编程学习笔记（三）</title><link>https://www.tomars.cv/post/unix-network-program-3/</link><pubDate>Sun, 17 May 2020 10:30:31 +0000</pubDate><guid>https://www.tomars.cv/post/unix-network-program-3/</guid><description>&lt;p>UNIX网络编程学习笔记（三）&lt;/p>
&lt;!-- more -->
&lt;h2 id="大纲">大纲&lt;/h2>
&lt;p>![](/image/2020-05-17/UNIX网络编程 第三章.png)&lt;/p>
&lt;h2 id="习题">习题&lt;/h2>
&lt;h3 id="31为什么诸如套接字地址结构的长度之类的值-结果参数要用指针来传递">“3.1　为什么诸如套接字地址结构的长度之类的值-结果参数要用指针来传递？”&lt;/h3>
&lt;p>之所以需要通过指针来传递，是因为这个参数同时扮演了两个角色：入参和出参。
作为入参，应用程序告诉内核需要操作的空间大小，避免写越界。
作为出参，内核高速应用程序实际写入的空间大小，从而控制应用程序行为。&lt;/p></description></item><item><title>UNIX网络编程学习笔记（二）</title><link>https://www.tomars.cv/post/unix-network-program-2/</link><pubDate>Mon, 11 May 2020 03:45:52 +0000</pubDate><guid>https://www.tomars.cv/post/unix-network-program-2/</guid><description>&lt;p>UNIX网络编程学习笔记（二）&lt;/p>
&lt;!-- more -->
&lt;h2 id="大纲">大纲&lt;/h2>
&lt;p>&lt;img src="https://www.tomars.cv/image/2020-05-11/%E7%AC%AC%E4%BA%8C%E7%AB%A0.png" alt="">&lt;/p>
&lt;h2 id="习题">习题&lt;/h2>
&lt;h3 id="21我们已经提到ipv4ip版本4和ipv6版本6ip版本5情况如何ip版本012和3又是什么">“2.1　我们已经提到IPv4（IP版本4）和IPv6（版本6）。IP版本5情况如何，IP版本0、1、2和3又是什么？”&lt;/h3>
&lt;p>参考：
&lt;a href="https://www.heficed.com/blog/ip-address-evolution-ipv4-vs-ipv6-has-ipv5-gone-missing">https://www.heficed.com/blog/ip-address-evolution-ipv4-vs-ipv6-has-ipv5-gone-missing&lt;/a>
&lt;a href="https://blog.alertlogic.com/blog/where-is-ipv1,-2,-3,and-5/">https://blog.alertlogic.com/blog/where-is-ipv1,-2,-3,and-5/&lt;/a>&lt;/p></description></item><item><title>UNIX网络编程学习笔记（一）</title><link>https://www.tomars.cv/post/unix-network-program-1/</link><pubDate>Sun, 10 May 2020 18:41:48 +0000</pubDate><guid>https://www.tomars.cv/post/unix-network-program-1/</guid><description>&lt;p>UNIX网络编程学习笔记（一）&lt;/p>
&lt;!-- more -->
&lt;h2 id="大纲">大纲&lt;/h2>
&lt;p>&lt;img src="https://www.tomars.cv/image/2020-05-10/%E7%AC%AC%E4%B8%80%E7%AB%A0.png" alt="">&lt;/p>
&lt;h2 id="习题">习题&lt;/h2>
&lt;h3 id="11-按19节未尾的步骤找出你自己的网络拓扑的信息">1.1 “按1.9节未尾的步骤找出你自己的网络拓扑的信息”&lt;/h3>
&lt;p>主要包含两个基本命令：netstat和ifconfig
netstat -i提供网络接口的信息。我们还指定-n标志以输出数值地址，而不是试图把它们反向解析成名字。
可以看到本机是支持IPV6协议的。
&lt;img src="https://www.tomars.cv/image/2020-05-10/2020-05-10-18-52-06.jpg" alt="">&lt;/p></description></item><item><title>归来吧，少年</title><link>https://www.tomars.cv/post/took-me-four-years-to-find/</link><pubDate>Fri, 14 Sep 2018 21:33:36 +0000</pubDate><guid>https://www.tomars.cv/post/took-me-four-years-to-find/</guid><description>&lt;p>写在离开卖好车，进入菜鸟，工作满4周年，刚过完27岁生日之际。&lt;/p>
&lt;!-- more -->
&lt;p>最近的两年时间里面，时常感觉到迷茫和恐慌。&lt;/p>
&lt;p>V站上，公众号的软文中，随处可见的是&lt;strong>焦虑&lt;/strong>。大家在焦虑些什么，我在焦虑些什么。&lt;/p></description></item><item><title>从锁死的RUNNABLE线程谈UNIX的I/O模型</title><link>https://www.tomars.cv/post/a-not-running-runnable/</link><pubDate>Wed, 13 Jun 2018 09:48:16 +0000</pubDate><guid>https://www.tomars.cv/post/a-not-running-runnable/</guid><description>&lt;p>记录一下JAVA IO库（java version &amp;ldquo;1.8.0_131&amp;rdquo;）的一个坑。&lt;/p>
&lt;!-- more -->
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>背景是一个爬虫，实际执行网络请求是通过共用一个固定核心线程数的线程池（FixedThreadPool）做下载操作，但是每次运行一段时间后，线程池就被僵尸进程塞满了，表现为新提交到线程池的下载操作都无法被执行。&lt;/p></description></item><item><title>Micrometer使用小记：对象弱引用的一种使用场景</title><link>https://www.tomars.cv/post/weak-reference/</link><pubDate>Tue, 29 May 2018 13:50:24 +0000</pubDate><guid>https://www.tomars.cv/post/weak-reference/</guid><description>&lt;p>结合Micrometer使用过程中的一个场景谈谈Java当中的几种引用。&lt;/p>
&lt;!-- more -->
&lt;h2 id="场景">场景&lt;/h2>
&lt;p>最近尝试通过SpringBoot集成Micrometer来观测应用状态，注册自定义Meter的时候出现了一个问题，先看原先的代码：&lt;/p></description></item><item><title>关于近期的面试情况-续</title><link>https://www.tomars.cv/post/job-interview-2018-2/</link><pubDate>Fri, 11 May 2018 15:30:41 +0000</pubDate><guid>https://www.tomars.cv/post/job-interview-2018-2/</guid><description>&lt;p>续上篇。&lt;/p>
&lt;!-- more -->
&lt;p>现场面试考察的侧重点就更脱离场景，深入到底层。&lt;/p>
&lt;h1 id="tcp和udp的区别">TCP和UDP的区别&lt;/h1>
&lt;p>考察基础通信原理，为什么tcp可以做到传输完整有序。&lt;/p>
&lt;h1 id="gc-root有哪些">GC Root有哪些&lt;/h1>
&lt;p>当时有一个争论的点在于虚拟机栈上的变量是否属于GC Root。&lt;/p></description></item><item><title>关于近期的面试情况</title><link>https://www.tomars.cv/post/job-interview-2018/</link><pubDate>Fri, 04 May 2018 15:07:26 +0000</pubDate><guid>https://www.tomars.cv/post/job-interview-2018/</guid><description>&lt;p>记录一下最近面试遇到的一些问题。&lt;/p>
&lt;!-- more -->
&lt;h1 id="duboo的默认线程池大小">Duboo的默认线程池大小&lt;/h1>
&lt;p>阅读代码的时候没有注意到这一点，瞎猜了一下是CPU核数的2倍。答案是默认线程池核心线程数是200 。&lt;/p>
&lt;p>认真探究了一下，具体参考：&lt;a href="http://ifeve.com/how-to-calculate-threadpool-size/">如何合理地估算线程池大小&lt;/a>&lt;/p></description></item><item><title>一次线上Memory Leak的排查</title><link>https://www.tomars.cv/post/%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8Amemory-leak%E7%9A%84%E6%8E%92%E6%9F%A5/</link><pubDate>Fri, 24 Nov 2017 13:16:37 +0000</pubDate><guid>https://www.tomars.cv/post/%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8Amemory-leak%E7%9A%84%E6%8E%92%E6%9F%A5/</guid><description>&lt;p>很久很久没有更新博客了，最近遇到了一个线上内存泄露问题，简单记录一下排查的过程。&lt;/p>
&lt;!-- more -->
&lt;p>很早前就有小伙伴反馈调用我们的一个应用响应非常慢，往往更新到最新的部署代码之后就恢复正常了，所以一直没有重视这个问题。这次出现用户反馈，严重影响了正常业务。
现象是：&lt;/p></description></item><item><title>基于RocketMQ的JAVA消息服务</title><link>https://www.tomars.cv/post/%E5%9F%BA%E4%BA%8Erocketmq%E7%9A%84java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 10 Aug 2017 11:07:33 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%9F%BA%E4%BA%8Erocketmq%E7%9A%84java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1/</guid><description>&lt;p>基于RocketMQ的JAVA消息服务&lt;/p>
&lt;!-- more -->
&lt;h2 id="java消息服务-jms基础">Java消息服务（ JMS）基础&lt;/h2>
&lt;blockquote>
&lt;p>Java消息服务（Java Message Service，JMS）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。 Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。
Java消息服务- 维基百科，自由的百科全书
&lt;a href="https://zh.wikipedia.org/zh-hans/Java">https://zh.wikipedia.org/zh-hans/Java&lt;/a>消息服务&lt;/p></description></item><item><title>RocketMQ</title><link>https://www.tomars.cv/post/rocketmq/</link><pubDate>Mon, 03 Jul 2017 22:10:45 +0000</pubDate><guid>https://www.tomars.cv/post/rocketmq/</guid><description>&lt;p>介绍一下近期做的RocketMQ接入的工作。&lt;/p>
&lt;!-- more -->
&lt;h2 id="docker">docker&lt;/h2>
&lt;p>官方在external中提供了namesrv和brokr的标准镜像：&lt;a href="http://https://github.com/apache/incubator-rocketmq-externals/tree/master/rocketmq-docker">rocketmq-docker&lt;/a>
但是标准镜像的jvm启动参数是写死在&lt;code>runserver.sh&lt;/code>和&lt;code>runbroker.sh&lt;/code>中的：&lt;/p></description></item><item><title>Kotlin:初恋的感觉</title><link>https://www.tomars.cv/post/kotlin-%E5%88%9D%E6%81%8B%E7%9A%84%E6%84%9F%E8%A7%89/</link><pubDate>Fri, 30 Jun 2017 02:09:07 +0000</pubDate><guid>https://www.tomars.cv/post/kotlin-%E5%88%9D%E6%81%8B%E7%9A%84%E6%84%9F%E8%A7%89/</guid><description>&lt;p>很久没有这么喜欢写代码了😄。&lt;/p>
&lt;!-- more --></description></item><item><title>代码重构之：Mybatis批量写入</title><link>https://www.tomars.cv/post/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84%E4%B9%8Bmybatis%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5/</link><pubDate>Thu, 22 Jun 2017 23:28:28 +0000</pubDate><guid>https://www.tomars.cv/post/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84%E4%B9%8Bmybatis%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5/</guid><description>&lt;p>今天做了一点代码重构，以此为记。&lt;/p>
&lt;!-- more -->
&lt;p>业务场景是作为dubbo服务提供方，先到一张表写入数据后取出主键，以此主键为外键到另一张表写入数据。
因为处理时间过长，导致一系列的dubbo，nginx超时。&lt;/p></description></item><item><title>ES使用filebeat收集nginx日志</title><link>https://www.tomars.cv/post/es%E4%BD%BF%E7%94%A8filebeat%E6%94%B6%E9%9B%86nginx%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 12 Jun 2017 10:15:37 +0000</pubDate><guid>https://www.tomars.cv/post/es%E4%BD%BF%E7%94%A8filebeat%E6%94%B6%E9%9B%86nginx%E6%97%A5%E5%BF%97/</guid><description>&lt;p>传统方案都是通过logstash模版解析nginx日志，现在使用filebeat自带的nginx模块就可以省去logstash。&lt;/p>
&lt;!-- more -->
&lt;h2 id="根据nginx日志配置调整设置">根据nginx日志配置调整设置&lt;/h2>
&lt;p>首先要看nginx的配置，如果nginx使用的是默认的日志配置，则忽略这一步。
否则需要根据nginx日志配置来配置filebeat的模版。&lt;/p></description></item><item><title>为什么这么慢？</title><link>https://www.tomars.cv/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E6%85%A2/</link><pubDate>Fri, 09 Jun 2017 17:26:33 +0000</pubDate><guid>https://www.tomars.cv/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E6%85%A2/</guid><description>&lt;p>昨天差点引发了一个严重线上bug，以此为记。&lt;/p>
&lt;!-- more -->
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>我们现在采用的是logstash的jdbc插件同步mysql的数据。
这次上线的功能需要多关联一张表查询数据进入索引，直接体现在logstash jdbc配置文件中定义的SQL多了一个left join。&lt;/p></description></item><item><title>在JAVA中执行shell</title><link>https://www.tomars.cv/post/%E5%9C%A8java%E4%B8%AD%E6%89%A7%E8%A1%8Cshell/</link><pubDate>Sun, 08 Jan 2017 23:32:51 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%9C%A8java%E4%B8%AD%E6%89%A7%E8%A1%8Cshell/</guid><description>&lt;p>今天抽时间解决了一个升级Elasticsearch后带来的一个问题。&lt;/p>
&lt;!-- more -->
&lt;p>起源是最初开发的一个用于维护搜索的项目&lt;code>infiniti&lt;/code>，主要功能是重建索引，创建备份，维护分词，排序控制等。其中重建索引的部分，原先是基于&lt;code>elasticsearch-jdbc&lt;/code>来做的，为了方便起见，从数据库导入数据的部分需要执行shell脚本。在&lt;a href="http://suclogger.me/MySQL%E5%88%B0Elasticsearch%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%B7%AF">前面一篇&lt;/a>文章中也有说到，ES升级到5.0之后，数据库同步的部分也切换到了&lt;code>logstash&lt;/code>，同样是通过执行shell脚本的方式同步数据。&lt;/p></description></item><item><title>分布式系统设计迷思（二）</title><link>https://www.tomars.cv/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D%E4%BA%8C/</link><pubDate>Mon, 14 Nov 2016 21:36:28 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D%E4%BA%8C/</guid><description>&lt;p>继续&lt;a href="http://suclogger.me/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D/">上一篇&lt;/a>文末提到的&lt;code>paxos&lt;/code>，这一篇谈谈如何通过选主来解决paxos的活性问题。&lt;/p>
&lt;!-- more -->
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>&lt;code>basic paxos&lt;/code>存在一个活性（liveness）问题，如图：
&lt;img src="https://www.tomars.cv/image/2016-11-14-17-46-53.jpg" alt="">
首先注意每个proposer都只需要给超过半数的acceptor发起请求并取得一致即可，这里的例子共有5个server，所以这个数是3。&lt;/p></description></item><item><title>RabbitMQ上手指南</title><link>https://www.tomars.cv/post/rabbitmq%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 07 Nov 2016 23:20:27 +0000</pubDate><guid>https://www.tomars.cv/post/rabbitmq%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</guid><description>&lt;p>本文记录了在macOS Sierra 10.12.2环境下搭建RabbitMQ的过程。&lt;/p>
&lt;!-- more -->
&lt;h2 id="安装rabbitmq">安装RabbitMQ&lt;/h2>
&lt;p>通过homebrew安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">brew install rabbitmq
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成后如图：
&lt;img src="https://www.tomars.cv/image/2016-11-07-23-21-57.jpg" alt="">
默认安装路径为：&lt;code>/usr/local/sbin&lt;/code>，通过给&lt;code>~/.zshrc&lt;/code>（shell使用zsh）添加：&lt;/p></description></item><item><title>并发下的Base64解码问题</title><link>https://www.tomars.cv/post/%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%9A%84base64%E8%A7%A3%E7%A0%81%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 03 Nov 2016 22:51:13 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%9A%84base64%E8%A7%A3%E7%A0%81%E9%97%AE%E9%A2%98/</guid><description>&lt;p>&lt;a href="http://suclogger.tech/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/">上一篇文章&lt;/a>中介绍的接口加密方案上线至今已有月余，考虑到加密后影响业务的风险以及用户的升级体验，近两个版本采用了明文和密文并存的灰度升级方式，这次发布的版本中决定完全移除明文请求，所以看了一眼近一个月加密逻辑中记录的日志，发现了一些问题。&lt;/p>
&lt;!-- more -->
&lt;p>在日志中存在很多以下报错信息：
&lt;img src="https://www.tomars.cv/image/2016-11-03-23-31-03.jpg" alt="">&lt;/p>
&lt;p>&lt;img src="https://www.tomars.cv/image/2016-11-03-23-35-33.jpg" alt="">&lt;/p>
&lt;p>错误最终从RSA解密方法中抛出，错误类型有：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">javax.crypto.BadPaddingException: data hash wrong
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_10]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也有：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">org.bouncycastle.crypto.DataLengthException: input too large for RSA cipher.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	at org.bouncycastle.crypto.engines.RSACoreEngine.convertInput(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	at org.bouncycastle.crypto.engines.RSAEngine.processBlock(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	at org.bouncycastle.crypto.encodings.OAEPEncoding.decodeBlock(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	at org.bouncycastle.crypto.encodings.OAEPEncoding.processBlock(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) ~[bcprov-jdk14-138.jar:1.38.0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	at javax.crypto.Cipher.doFinal(Cipher.java:2145) ~[na:1.7.0_10]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>处理密文的切面中代码逻辑大致如下：&lt;/p></description></item><item><title>支付宝接入开发摘记</title><link>https://www.tomars.cv/post/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%85%A5%E5%BC%80%E5%8F%91%E6%91%98%E8%AE%B0/</link><pubDate>Tue, 01 Nov 2016 23:40:58 +0000</pubDate><guid>https://www.tomars.cv/post/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%85%A5%E5%BC%80%E5%8F%91%E6%91%98%E8%AE%B0/</guid><description>&lt;p>这一篇主要记录一下支付宝开发过程遇到的一些坑，后面再开一篇文章讲讲支付的架构设计。
这一期的支付开发主要接入支付宝，包含了入账和出账。&lt;/p>
&lt;!-- more -->
&lt;h2 id="流程图">流程图&lt;/h2>
&lt;p>入账的流程图如下：&lt;/p></description></item><item><title>配置Erlang环境</title><link>https://www.tomars.cv/post/%E9%85%8D%E7%BD%AEerlang%E7%8E%AF%E5%A2%83/</link><pubDate>Fri, 21 Oct 2016 21:24:15 +0000</pubDate><guid>https://www.tomars.cv/post/%E9%85%8D%E7%BD%AEerlang%E7%8E%AF%E5%A2%83/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>本文环境：macOS Sierra&lt;/p>
&lt;h3 id="安装-erlang-otp">安装 Erlang OTP&lt;/h3>
&lt;p>通过homebrew安装erlang：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">brew install erlang
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功页面：&lt;/p>
&lt;p>&lt;img src="https://www.tomars.cv/image/2016-11-07-15-41-12.jpg" alt="">
验证安装：
输入&lt;code>erl&lt;/code>命令会返回：
&lt;img src="https://www.tomars.cv/image/2016-11-07-15-42-09.jpg" alt="">&lt;/p>
&lt;h3 id="安装rebar">安装Rebar&lt;/h3>
&lt;p>&lt;a href="http://erlang.org/doc/getting_started/seq_prog.html#id60113">Rebar&lt;/a>可以帮助我们编译和调试erlang程序，可以通过以下命令进行安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git clone git://github.com/rebar/rebar.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cd rebar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./bootstrap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Recompile: src/getopt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Recompile: src/rebar_utils
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">==&amp;gt; rebar (compile)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv ./rebar /usr/local/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功页面如图：&lt;/p></description></item><item><title>通过Wireshark看MIM攻击</title><link>https://www.tomars.cv/post/%E9%80%9A%E8%BF%87wireshark%E7%9C%8Bmim%E6%94%BB%E5%87%BB/</link><pubDate>Tue, 18 Oct 2016 22:41:14 +0000</pubDate><guid>https://www.tomars.cv/post/%E9%80%9A%E8%BF%87wireshark%E7%9C%8Bmim%E6%94%BB%E5%87%BB/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>本文中，服务端IP地址是&lt;code>120.55.246.173&lt;/code>，移动端（我的手机）的IP地址是&lt;code>192.168.1.226&lt;/code>，中间人（我的电脑）的IP地址是&lt;code>192.168.1.158&lt;/code>，电脑通过Charles监听8888端口，转发移动端发来的数据包。&lt;/p></description></item><item><title>应用接口的安全方案设计（二）</title><link>https://www.tomars.cv/post/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%E4%BA%8C/</link><pubDate>Fri, 14 Oct 2016 00:17:27 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%E4%BA%8C/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>在&lt;a href="http://suclogger.tech/2016/09/23/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/">上一篇&lt;/a>文章中我说到：HTTPS是不安全的，因为存在MIM攻击。但是随着了解的深入，发现这个认识是有问题的，正确的认识应当是：&lt;strong>HTTPS的设计是安全的，只是错误的用法导致了MIM攻击&lt;/strong>。&lt;/p>
&lt;p>关于SSL/TLS协议运行机制，阮一峰的&lt;a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">博客文章&lt;/a>做了很好的介绍。&lt;/p>
&lt;p>稍加了解，可以发现，其实上一篇文章中的设计就是参照了SSL/TLS协议运行机制，混合了非对称加密和对称加密，有几点需要注意：&lt;/p></description></item><item><title>应用接口的安全方案设计</title><link>https://www.tomars.cv/post/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</link><pubDate>Fri, 23 Sep 2016 18:42:22 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>鉴于当前日益严峻的行业竞争和用户的安全忧虑，我司近期上线了对全接口的安全监控，以下记录了方案设计过程中的一些想法。&lt;/p>
&lt;h2 id="https安全吗">HTTPS安全吗？&lt;/h2>
&lt;p>HTTPS可以在一定程度上隐藏接口调用的路径和参数，但是如果使用不当，依然会暴露在&lt;a href="https://zh.wikipedia.org/zh-cn/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">MIM攻击&lt;/a>下，现在流行的网络调试工具都可以支持MIM。如Charles：&lt;/p></description></item><item><title>AES和RSA的JavaScript实现</title><link>https://www.tomars.cv/post/aes%E5%92%8Crsa%E7%9A%84javascript%E5%AE%9E%E7%8E%B0/</link><pubDate>Mon, 12 Sep 2016 01:30:28 +0000</pubDate><guid>https://www.tomars.cv/post/aes%E5%92%8Crsa%E7%9A%84javascript%E5%AE%9E%E7%8E%B0/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;h2 id="创建node工程">创建node工程&lt;/h2>
&lt;p>新建node工程，导入&lt;code>crypto-js&lt;/code>和&lt;code>crypto-browserify&lt;/code>的npm包。
代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">CryptoJS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;crypto-js&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">crypto&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;crypto-browserify&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;16位密钥&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">rsaKeyStr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="n">RSA公钥&lt;/span>&lt;span class="s1">&amp;#39;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">rsaBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">Buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">使用&lt;/span>&lt;span class="n">RSA公钥加密AES的密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">cryptedData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">crypto&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">publicEncrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rsaKeyStr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rsaBuffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">定义向量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">iv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;qwertyuiasdfghjk&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Utf8&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">iv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Utf8&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iv&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">使用&lt;/span>&lt;span class="n">AES加密加密内容&lt;/span>&lt;span class="err">，这里用&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="ne">Object&lt;/span> &lt;span class="err">代替&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">encrypted&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">AES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="ne">Object&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">iv&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">iv&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mode&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CBC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pad&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Pkcs7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">encryptedObj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="ne">Object&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">encryptedObj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mhcParams&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">encryptedObj&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mhcToken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cryptedData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;base64&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意有一个坑：
&lt;code>crypto.publicEncrypt(public_key, buffer)&lt;/code>传入的&lt;code>public_key&lt;/code>参数可以是一个Object，** If public_key is a string, it is treated as the key with no passphrase and will use RSA_PKCS1_OAEP_PADDING** ：如果是个string，默认采用&lt;code>RSA_PKCS1_OAEP_PADDING&lt;/code>的padding方式。&lt;/p></description></item><item><title>再看一遍SpringMVC的工作流程</title><link>https://www.tomars.cv/post/%E5%86%8D%E7%9C%8B%E4%B8%80%E9%81%8Dspringmvc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 10 Aug 2016 22:19:54 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%86%8D%E7%9C%8B%E4%B8%80%E9%81%8Dspringmvc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>&lt;img src="https://www.tomars.cv/image/74046075A2738B39AB990A21164CB8F7.png" alt="">&lt;/p>
&lt;p>high level overview 工作流程图&lt;/p>
&lt;p>初始化DispatcherServlet的过程:&lt;/p>
&lt;p>因为在web.xml文件中配置了DispatcherServlet:&lt;/p></description></item><item><title>分布式系统设计迷思</title><link>https://www.tomars.cv/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D/</link><pubDate>Thu, 28 Jul 2016 18:45:05 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%BF%B7%E6%80%9D/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>先祭出祖师爷：
&lt;img src="https://www.tomars.cv/image/2016-08-07-13-31-01.jpg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>You want proff?I&amp;rsquo;ll give you proff! - Leslie Lamport&lt;/p>
&lt;/blockquote>
&lt;h2 id="单机系统">单机系统&lt;/h2>
&lt;p>小强的这家咖啡店刚开始经营，为了让顾客满意，他想需要记住每个顾客喜欢的咖啡，比如万剑喜欢摩卡，拓爷喜欢星冰乐等等，每次顾客进来，马上就能给顾客想要的咖啡。
简单起见，小强拿了一个本子，上面记录着顾客的喜好信息：&lt;/p></description></item><item><title>谈谈spring中的循环依赖问题</title><link>https://www.tomars.cv/post/spring%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</link><pubDate>Tue, 19 Jul 2016 16:41:40 +0000</pubDate><guid>https://www.tomars.cv/post/spring%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;p>昨天听到同事谈到，代码架构的同层不应该存在相互调用，因为会出现循环依赖。
这个编码规范我是支持的，但是这个原因我是拒绝的。&lt;/p>
&lt;p>首先看一下下面这两段代码（不完整，仅用于表达意思）：&lt;/p></description></item><item><title>记一个线上bug的解决</title><link>https://www.tomars.cv/post/%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%BA%BF%E4%B8%8Abug%E7%9A%84%E8%A7%A3%E5%86%B3/</link><pubDate>Fri, 27 May 2016 22:56:03 +0000</pubDate><guid>https://www.tomars.cv/post/%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%BA%BF%E4%B8%8Abug%E7%9A%84%E8%A7%A3%E5%86%B3/</guid><description>&lt;!-- abstract -->
&lt;!-- 开始正文 -->
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>我司的爬虫现在运行在一个通过ADSL拨号联网的VPS上，通过重新拨号切换IP来应对目标网站的防爬措施。&lt;/p>
&lt;h2 id="问题现象">问题现象&lt;/h2>
&lt;p>应用通过&lt;a href="https://github.com/alibaba/druid">druid&lt;/a>数据源连接到mysql保存数据，每次切换IP后，会通过下面这条简单sql尝试获取数据源连接：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT &amp;#39;1&amp;#39; FROM DUAL; 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是通过查看日志这条sql每次都要等待长达17分钟才能执行完成：
&lt;img src="https://www.tomars.cv/image/3c91ebb0cbc84db0befa2f276df8fa19.jpg?r=59" alt="">&lt;/p></description></item><item><title>到底需不需要Manager层？</title><link>https://www.tomars.cv/post/%E5%88%B0%E5%BA%95%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81manager%E5%B1%82/</link><pubDate>Wed, 18 May 2016 00:09:55 +0000</pubDate><guid>https://www.tomars.cv/post/%E5%88%B0%E5%BA%95%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81manager%E5%B1%82/</guid><description>&lt;!-- abstract -->
&lt;p>今天跟同事们一起主要就是否需要按照严格的分层架构来规范当前代码讨论了应用的几个架构问题。&lt;/p>
&lt;!-- 开始正文 -->
&lt;p>之前第一家公司采用的是经典的SpringMVC架构，主要划分为Controller，Service，DAO三层。Controller层控制页面逻辑，数据库操作通过自己编写hql在DAO层实现，事务控制在Service层。这样的架构容易理解和上手，但是无法对DAO层的代码逻辑进行控制，很容易出现以下问题：&lt;/p></description></item></channel></rss>